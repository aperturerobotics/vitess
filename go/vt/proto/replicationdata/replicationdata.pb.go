// Code generated by protoc-gen-go-lite. DO NOT EDIT.
// protoc-gen-go-lite version: v0.6.1
// source: github.com/dolthub/vitess/proto/dolthub/vt/replicationdata.proto

package dolthub_vt_replicationdata

import (
	fmt "fmt"
	protobuf_go_lite "github.com/aperturerobotics/protobuf-go-lite"
	json "github.com/aperturerobotics/protobuf-go-lite/json"
	io "io"
	strconv "strconv"
	strings "strings"
)

//
//Copyright 2019 The Vitess Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// This file defines the replication related structures we use.

// Status is the replication status for MySQL (returned by 'show slave status'
// and parsed into a Position and fields).
type Status struct {
	unknownFields       []byte
	Position            string `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	SlaveIoRunning      bool   `protobuf:"varint,2,opt,name=slave_io_running,json=slaveIoRunning,proto3" json:"slaveIoRunning,omitempty"`
	SlaveSqlRunning     bool   `protobuf:"varint,3,opt,name=slave_sql_running,json=slaveSqlRunning,proto3" json:"slaveSqlRunning,omitempty"`
	SecondsBehindMaster uint32 `protobuf:"varint,4,opt,name=seconds_behind_master,json=secondsBehindMaster,proto3" json:"secondsBehindMaster,omitempty"`
	MasterHost          string `protobuf:"bytes,5,opt,name=master_host,json=masterHost,proto3" json:"masterHost,omitempty"`
	MasterPort          int32  `protobuf:"varint,6,opt,name=master_port,json=masterPort,proto3" json:"masterPort,omitempty"`
	MasterConnectRetry  int32  `protobuf:"varint,7,opt,name=master_connect_retry,json=masterConnectRetry,proto3" json:"masterConnectRetry,omitempty"`
}

func (x *Status) Reset() {
	*x = Status{}
}

func (*Status) ProtoMessage() {}

func (x *Status) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *Status) GetSlaveIoRunning() bool {
	if x != nil {
		return x.SlaveIoRunning
	}
	return false
}

func (x *Status) GetSlaveSqlRunning() bool {
	if x != nil {
		return x.SlaveSqlRunning
	}
	return false
}

func (x *Status) GetSecondsBehindMaster() uint32 {
	if x != nil {
		return x.SecondsBehindMaster
	}
	return 0
}

func (x *Status) GetMasterHost() string {
	if x != nil {
		return x.MasterHost
	}
	return ""
}

func (x *Status) GetMasterPort() int32 {
	if x != nil {
		return x.MasterPort
	}
	return 0
}

func (x *Status) GetMasterConnectRetry() int32 {
	if x != nil {
		return x.MasterConnectRetry
	}
	return 0
}

func (m *Status) CloneVT() *Status {
	if m == nil {
		return (*Status)(nil)
	}
	r := new(Status)
	r.Position = m.Position
	r.SlaveIoRunning = m.SlaveIoRunning
	r.SlaveSqlRunning = m.SlaveSqlRunning
	r.SecondsBehindMaster = m.SecondsBehindMaster
	r.MasterHost = m.MasterHost
	r.MasterPort = m.MasterPort
	r.MasterConnectRetry = m.MasterConnectRetry
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Status) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (this *Status) EqualVT(that *Status) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Position != that.Position {
		return false
	}
	if this.SlaveIoRunning != that.SlaveIoRunning {
		return false
	}
	if this.SlaveSqlRunning != that.SlaveSqlRunning {
		return false
	}
	if this.SecondsBehindMaster != that.SecondsBehindMaster {
		return false
	}
	if this.MasterHost != that.MasterHost {
		return false
	}
	if this.MasterPort != that.MasterPort {
		return false
	}
	if this.MasterConnectRetry != that.MasterConnectRetry {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Status) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*Status)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}

// MarshalProtoJSON marshals the Status message to JSON.
func (x *Status) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Position != "" || s.HasField("position") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("position")
		s.WriteString(x.Position)
	}
	if x.SlaveIoRunning || s.HasField("slaveIoRunning") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("slaveIoRunning")
		s.WriteBool(x.SlaveIoRunning)
	}
	if x.SlaveSqlRunning || s.HasField("slaveSqlRunning") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("slaveSqlRunning")
		s.WriteBool(x.SlaveSqlRunning)
	}
	if x.SecondsBehindMaster != 0 || s.HasField("secondsBehindMaster") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("secondsBehindMaster")
		s.WriteUint32(x.SecondsBehindMaster)
	}
	if x.MasterHost != "" || s.HasField("masterHost") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("masterHost")
		s.WriteString(x.MasterHost)
	}
	if x.MasterPort != 0 || s.HasField("masterPort") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("masterPort")
		s.WriteInt32(x.MasterPort)
	}
	if x.MasterConnectRetry != 0 || s.HasField("masterConnectRetry") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("masterConnectRetry")
		s.WriteInt32(x.MasterConnectRetry)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the Status to JSON.
func (x *Status) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the Status message from JSON.
func (x *Status) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "position":
			s.AddField("position")
			x.Position = s.ReadString()
		case "slave_io_running", "slaveIoRunning":
			s.AddField("slave_io_running")
			x.SlaveIoRunning = s.ReadBool()
		case "slave_sql_running", "slaveSqlRunning":
			s.AddField("slave_sql_running")
			x.SlaveSqlRunning = s.ReadBool()
		case "seconds_behind_master", "secondsBehindMaster":
			s.AddField("seconds_behind_master")
			x.SecondsBehindMaster = s.ReadUint32()
		case "master_host", "masterHost":
			s.AddField("master_host")
			x.MasterHost = s.ReadString()
		case "master_port", "masterPort":
			s.AddField("master_port")
			x.MasterPort = s.ReadInt32()
		case "master_connect_retry", "masterConnectRetry":
			s.AddField("master_connect_retry")
			x.MasterConnectRetry = s.ReadInt32()
		}
	})
}

// UnmarshalJSON unmarshals the Status from JSON.
func (x *Status) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

func (m *Status) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Status) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *Status) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.MasterConnectRetry != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.MasterConnectRetry))
		i--
		dAtA[i] = 0x38
	}
	if m.MasterPort != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.MasterPort))
		i--
		dAtA[i] = 0x30
	}
	if len(m.MasterHost) > 0 {
		i -= len(m.MasterHost)
		copy(dAtA[i:], m.MasterHost)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.MasterHost)))
		i--
		dAtA[i] = 0x2a
	}
	if m.SecondsBehindMaster != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.SecondsBehindMaster))
		i--
		dAtA[i] = 0x20
	}
	if m.SlaveSqlRunning {
		i--
		if m.SlaveSqlRunning {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if m.SlaveIoRunning {
		i--
		if m.SlaveIoRunning {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if len(m.Position) > 0 {
		i -= len(m.Position)
		copy(dAtA[i:], m.Position)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Position)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Status) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Position)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.SlaveIoRunning {
		n += 2
	}
	if m.SlaveSqlRunning {
		n += 2
	}
	if m.SecondsBehindMaster != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.SecondsBehindMaster))
	}
	l = len(m.MasterHost)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.MasterPort != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.MasterPort))
	}
	if m.MasterConnectRetry != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.MasterConnectRetry))
	}
	n += len(m.unknownFields)
	return n
}

func (x *Status) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("Status { ")
	if x.Position != "" {
		sb.WriteString(" position: ")
		sb.WriteString(strconv.Quote(x.Position))
	}
	if x.SlaveIoRunning {
		sb.WriteString(" slave_io_running: ")
		sb.WriteString(strconv.FormatBool(x.SlaveIoRunning))
	}
	if x.SlaveSqlRunning {
		sb.WriteString(" slave_sql_running: ")
		sb.WriteString(strconv.FormatBool(x.SlaveSqlRunning))
	}
	if x.SecondsBehindMaster != 0 {
		sb.WriteString(" seconds_behind_master: ")
		sb.WriteString(strconv.FormatUint(uint64(x.SecondsBehindMaster), 10))
	}
	if x.MasterHost != "" {
		sb.WriteString(" master_host: ")
		sb.WriteString(strconv.Quote(x.MasterHost))
	}
	if x.MasterPort != 0 {
		sb.WriteString(" master_port: ")
		sb.WriteString(strconv.FormatInt(int64(x.MasterPort), 10))
	}
	if x.MasterConnectRetry != 0 {
		sb.WriteString(" master_connect_retry: ")
		sb.WriteString(strconv.FormatInt(int64(x.MasterConnectRetry), 10))
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *Status) String() string {
	return x.MarshalProtoText()
}
func (m *Status) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Status: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Status: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Position = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlaveIoRunning", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SlaveIoRunning = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SlaveSqlRunning", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SlaveSqlRunning = bool(v != 0)
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecondsBehindMaster", wireType)
			}
			m.SecondsBehindMaster = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SecondsBehindMaster |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterHost", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MasterHost = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterPort", wireType)
			}
			m.MasterPort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MasterPort |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MasterConnectRetry", wireType)
			}
			m.MasterConnectRetry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MasterConnectRetry |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
