// Code generated by protoc-gen-go-lite. DO NOT EDIT.
// protoc-gen-go-lite version: v0.6.1
// source: github.com/dolthub/vitess/proto/dolthub/vt/query.proto

package query

import (
	base64 "encoding/base64"
	binary "encoding/binary"
	fmt "fmt"
	protobuf_go_lite "github.com/aperturerobotics/protobuf-go-lite"
	json "github.com/aperturerobotics/protobuf-go-lite/json"
	topodata "github.com/dolthub/vitess/go/vt/proto/topodata"
	vtrpc "github.com/dolthub/vitess/go/vt/proto/vtrpc"
	io "io"
	math "math"
	strconv "strconv"
	strings "strings"
)

//
//Copyright 2019 The Vitess Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// This file contains all the types necessary to make
// RPC calls to Vttablet.

// Flags sent from the MySQL C API
type MySqlFlag int32

const (
	MySqlFlag_EMPTY                 MySqlFlag = 0
	MySqlFlag_NOT_NULL_FLAG         MySqlFlag = 1
	MySqlFlag_PRI_KEY_FLAG          MySqlFlag = 2
	MySqlFlag_UNIQUE_KEY_FLAG       MySqlFlag = 4
	MySqlFlag_MULTIPLE_KEY_FLAG     MySqlFlag = 8
	MySqlFlag_BLOB_FLAG             MySqlFlag = 16
	MySqlFlag_UNSIGNED_FLAG         MySqlFlag = 32
	MySqlFlag_ZEROFILL_FLAG         MySqlFlag = 64
	MySqlFlag_BINARY_FLAG           MySqlFlag = 128
	MySqlFlag_ENUM_FLAG             MySqlFlag = 256
	MySqlFlag_AUTO_INCREMENT_FLAG   MySqlFlag = 512
	MySqlFlag_TIMESTAMP_FLAG        MySqlFlag = 1024
	MySqlFlag_SET_FLAG              MySqlFlag = 2048
	MySqlFlag_NO_DEFAULT_VALUE_FLAG MySqlFlag = 4096
	MySqlFlag_ON_UPDATE_NOW_FLAG    MySqlFlag = 8192
	MySqlFlag_NUM_FLAG              MySqlFlag = 32768
	MySqlFlag_PART_KEY_FLAG         MySqlFlag = 16384
	MySqlFlag_GROUP_FLAG            MySqlFlag = 32768
	MySqlFlag_UNIQUE_FLAG           MySqlFlag = 65536
	MySqlFlag_BINCMP_FLAG           MySqlFlag = 131072
)

// Enum value maps for MySqlFlag.
var (
	MySqlFlag_name = map[int32]string{
		0:     "EMPTY",
		1:     "NOT_NULL_FLAG",
		2:     "PRI_KEY_FLAG",
		4:     "UNIQUE_KEY_FLAG",
		8:     "MULTIPLE_KEY_FLAG",
		16:    "BLOB_FLAG",
		32:    "UNSIGNED_FLAG",
		64:    "ZEROFILL_FLAG",
		128:   "BINARY_FLAG",
		256:   "ENUM_FLAG",
		512:   "AUTO_INCREMENT_FLAG",
		1024:  "TIMESTAMP_FLAG",
		2048:  "SET_FLAG",
		4096:  "NO_DEFAULT_VALUE_FLAG",
		8192:  "ON_UPDATE_NOW_FLAG",
		32768: "NUM_FLAG",
		16384: "PART_KEY_FLAG",
		// Duplicate value: 32768: "GROUP_FLAG",
		65536:  "UNIQUE_FLAG",
		131072: "BINCMP_FLAG",
	}
	MySqlFlag_value = map[string]int32{
		"EMPTY":                 0,
		"NOT_NULL_FLAG":         1,
		"PRI_KEY_FLAG":          2,
		"UNIQUE_KEY_FLAG":       4,
		"MULTIPLE_KEY_FLAG":     8,
		"BLOB_FLAG":             16,
		"UNSIGNED_FLAG":         32,
		"ZEROFILL_FLAG":         64,
		"BINARY_FLAG":           128,
		"ENUM_FLAG":             256,
		"AUTO_INCREMENT_FLAG":   512,
		"TIMESTAMP_FLAG":        1024,
		"SET_FLAG":              2048,
		"NO_DEFAULT_VALUE_FLAG": 4096,
		"ON_UPDATE_NOW_FLAG":    8192,
		"NUM_FLAG":              32768,
		"PART_KEY_FLAG":         16384,
		"GROUP_FLAG":            32768,
		"UNIQUE_FLAG":           65536,
		"BINCMP_FLAG":           131072,
	}
)

func (x MySqlFlag) Enum() *MySqlFlag {
	p := new(MySqlFlag)
	*p = x
	return p
}

func (x MySqlFlag) String() string {
	name, valid := MySqlFlag_name[int32(x)]
	if valid {
		return name
	}
	return strconv.Itoa(int(x))
}

// Flag allows us to qualify types by their common properties.
type Flag int32

const (
	Flag_NONE       Flag = 0
	Flag_ISINTEGRAL Flag = 256
	Flag_ISUNSIGNED Flag = 512
	Flag_ISFLOAT    Flag = 1024
	Flag_ISQUOTED   Flag = 2048
	Flag_ISTEXT     Flag = 4096
	Flag_ISBINARY   Flag = 8192
)

// Enum value maps for Flag.
var (
	Flag_name = map[int32]string{
		0:    "NONE",
		256:  "ISINTEGRAL",
		512:  "ISUNSIGNED",
		1024: "ISFLOAT",
		2048: "ISQUOTED",
		4096: "ISTEXT",
		8192: "ISBINARY",
	}
	Flag_value = map[string]int32{
		"NONE":       0,
		"ISINTEGRAL": 256,
		"ISUNSIGNED": 512,
		"ISFLOAT":    1024,
		"ISQUOTED":   2048,
		"ISTEXT":     4096,
		"ISBINARY":   8192,
	}
)

func (x Flag) Enum() *Flag {
	p := new(Flag)
	*p = x
	return p
}

func (x Flag) String() string {
	name, valid := Flag_name[int32(x)]
	if valid {
		return name
	}
	return strconv.Itoa(int(x))
}

// Type defines the various supported data types in bind vars
// and query results.
type Type int32

const (
	// NULL_TYPE specifies a NULL type.
	Type_NULL_TYPE Type = 0
	// INT8 specifies a TINYINT type.
	// Properties: 1, IsNumber.
	Type_INT8 Type = 257
	// UINT8 specifies a TINYINT UNSIGNED type.
	// Properties: 2, IsNumber, IsUnsigned.
	Type_UINT8 Type = 770
	// INT16 specifies a SMALLINT type.
	// Properties: 3, IsNumber.
	Type_INT16 Type = 259
	// UINT16 specifies a SMALLINT UNSIGNED type.
	// Properties: 4, IsNumber, IsUnsigned.
	Type_UINT16 Type = 772
	// INT24 specifies a MEDIUMINT type.
	// Properties: 5, IsNumber.
	Type_INT24 Type = 261
	// UINT24 specifies a MEDIUMINT UNSIGNED type.
	// Properties: 6, IsNumber, IsUnsigned.
	Type_UINT24 Type = 774
	// INT32 specifies a INTEGER type.
	// Properties: 7, IsNumber.
	Type_INT32 Type = 263
	// UINT32 specifies a INTEGER UNSIGNED type.
	// Properties: 8, IsNumber, IsUnsigned.
	Type_UINT32 Type = 776
	// INT64 specifies a BIGINT type.
	// Properties: 9, IsNumber.
	Type_INT64 Type = 265
	// UINT64 specifies a BIGINT UNSIGNED type.
	// Properties: 10, IsNumber, IsUnsigned.
	Type_UINT64 Type = 778
	// FLOAT32 specifies a FLOAT type.
	// Properties: 11, IsFloat.
	Type_FLOAT32 Type = 1035
	// FLOAT64 specifies a DOUBLE or REAL type.
	// Properties: 12, IsFloat.
	Type_FLOAT64 Type = 1036
	// TIMESTAMP specifies a TIMESTAMP type.
	// Properties: 13, IsQuoted.
	Type_TIMESTAMP Type = 2061
	// DATE specifies a DATE type.
	// Properties: 14, IsQuoted.
	Type_DATE Type = 2062
	// TIME specifies a TIME type.
	// Properties: 15, IsQuoted.
	Type_TIME Type = 2063
	// DATETIME specifies a DATETIME type.
	// Properties: 16, IsQuoted.
	Type_DATETIME Type = 2064
	// YEAR specifies a YEAR type.
	// Properties: 17, IsNumber, IsUnsigned.
	Type_YEAR Type = 785
	// DECIMAL specifies a DECIMAL or NUMERIC type.
	// Properties: 18, None.
	Type_DECIMAL Type = 18
	// TEXT specifies a TEXT type.
	// Properties: 19, IsQuoted, IsText.
	Type_TEXT Type = 6163
	// BLOB specifies a BLOB type.
	// Properties: 20, IsQuoted, IsBinary.
	Type_BLOB Type = 10260
	// VARCHAR specifies a VARCHAR type.
	// Properties: 21, IsQuoted, IsText.
	Type_VARCHAR Type = 6165
	// VARBINARY specifies a VARBINARY type.
	// Properties: 22, IsQuoted, IsBinary.
	Type_VARBINARY Type = 10262
	// CHAR specifies a CHAR type.
	// Properties: 23, IsQuoted, IsText.
	Type_CHAR Type = 6167
	// BINARY specifies a BINARY type.
	// Properties: 24, IsQuoted, IsBinary.
	Type_BINARY Type = 10264
	// BIT specifies a BIT type.
	// Properties: 25, IsQuoted.
	Type_BIT Type = 2073
	// ENUM specifies an ENUM type.
	// Properties: 26, IsQuoted.
	Type_ENUM Type = 2074
	// SET specifies a SET type.
	// Properties: 27, IsQuoted.
	Type_SET Type = 2075
	// TUPLE specifies a tuple. This cannot
	// be returned in a QueryResult, but it can
	// be sent as a bind var.
	// Properties: 28, None.
	Type_TUPLE Type = 28
	// GEOMETRY specifies a GEOMETRY type.
	// Properties: 29, IsQuoted.
	Type_GEOMETRY Type = 2077
	// JSON specifies a JSON type.
	// Properties: 30, IsQuoted.
	Type_JSON Type = 2078
	// EXPRESSION specifies a SQL expression.
	// This type is for internal use only.
	// Properties: 31, None.
	Type_EXPRESSION Type = 31
)

// Enum value maps for Type.
var (
	Type_name = map[int32]string{
		0:     "NULL_TYPE",
		257:   "INT8",
		770:   "UINT8",
		259:   "INT16",
		772:   "UINT16",
		261:   "INT24",
		774:   "UINT24",
		263:   "INT32",
		776:   "UINT32",
		265:   "INT64",
		778:   "UINT64",
		1035:  "FLOAT32",
		1036:  "FLOAT64",
		2061:  "TIMESTAMP",
		2062:  "DATE",
		2063:  "TIME",
		2064:  "DATETIME",
		785:   "YEAR",
		18:    "DECIMAL",
		6163:  "TEXT",
		10260: "BLOB",
		6165:  "VARCHAR",
		10262: "VARBINARY",
		6167:  "CHAR",
		10264: "BINARY",
		2073:  "BIT",
		2074:  "ENUM",
		2075:  "SET",
		28:    "TUPLE",
		2077:  "GEOMETRY",
		2078:  "JSON",
		31:    "EXPRESSION",
	}
	Type_value = map[string]int32{
		"NULL_TYPE":  0,
		"INT8":       257,
		"UINT8":      770,
		"INT16":      259,
		"UINT16":     772,
		"INT24":      261,
		"UINT24":     774,
		"INT32":      263,
		"UINT32":     776,
		"INT64":      265,
		"UINT64":     778,
		"FLOAT32":    1035,
		"FLOAT64":    1036,
		"TIMESTAMP":  2061,
		"DATE":       2062,
		"TIME":       2063,
		"DATETIME":   2064,
		"YEAR":       785,
		"DECIMAL":    18,
		"TEXT":       6163,
		"BLOB":       10260,
		"VARCHAR":    6165,
		"VARBINARY":  10262,
		"CHAR":       6167,
		"BINARY":     10264,
		"BIT":        2073,
		"ENUM":       2074,
		"SET":        2075,
		"TUPLE":      28,
		"GEOMETRY":   2077,
		"JSON":       2078,
		"EXPRESSION": 31,
	}
)

func (x Type) Enum() *Type {
	p := new(Type)
	*p = x
	return p
}

func (x Type) String() string {
	name, valid := Type_name[int32(x)]
	if valid {
		return name
	}
	return strconv.Itoa(int(x))
}

// TransactionState represents the state of a distributed transaction.
type TransactionState int32

const (
	TransactionState_UNKNOWN  TransactionState = 0
	TransactionState_PREPARE  TransactionState = 1
	TransactionState_COMMIT   TransactionState = 2
	TransactionState_ROLLBACK TransactionState = 3
)

// Enum value maps for TransactionState.
var (
	TransactionState_name = map[int32]string{
		0: "UNKNOWN",
		1: "PREPARE",
		2: "COMMIT",
		3: "ROLLBACK",
	}
	TransactionState_value = map[string]int32{
		"UNKNOWN":  0,
		"PREPARE":  1,
		"COMMIT":   2,
		"ROLLBACK": 3,
	}
)

func (x TransactionState) Enum() *TransactionState {
	p := new(TransactionState)
	*p = x
	return p
}

func (x TransactionState) String() string {
	name, valid := TransactionState_name[int32(x)]
	if valid {
		return name
	}
	return strconv.Itoa(int(x))
}

type ExecuteOptions_IncludedFields int32

const (
	ExecuteOptions_TYPE_AND_NAME ExecuteOptions_IncludedFields = 0
	ExecuteOptions_TYPE_ONLY     ExecuteOptions_IncludedFields = 1
	ExecuteOptions_ALL           ExecuteOptions_IncludedFields = 2
)

// Enum value maps for ExecuteOptions_IncludedFields.
var (
	ExecuteOptions_IncludedFields_name = map[int32]string{
		0: "TYPE_AND_NAME",
		1: "TYPE_ONLY",
		2: "ALL",
	}
	ExecuteOptions_IncludedFields_value = map[string]int32{
		"TYPE_AND_NAME": 0,
		"TYPE_ONLY":     1,
		"ALL":           2,
	}
)

func (x ExecuteOptions_IncludedFields) Enum() *ExecuteOptions_IncludedFields {
	p := new(ExecuteOptions_IncludedFields)
	*p = x
	return p
}

func (x ExecuteOptions_IncludedFields) String() string {
	name, valid := ExecuteOptions_IncludedFields_name[int32(x)]
	if valid {
		return name
	}
	return strconv.Itoa(int(x))
}

type ExecuteOptions_Workload int32

const (
	ExecuteOptions_UNSPECIFIED ExecuteOptions_Workload = 0
	ExecuteOptions_OLTP        ExecuteOptions_Workload = 1
	ExecuteOptions_OLAP        ExecuteOptions_Workload = 2
	ExecuteOptions_DBA         ExecuteOptions_Workload = 3
)

// Enum value maps for ExecuteOptions_Workload.
var (
	ExecuteOptions_Workload_name = map[int32]string{
		0: "UNSPECIFIED",
		1: "OLTP",
		2: "OLAP",
		3: "DBA",
	}
	ExecuteOptions_Workload_value = map[string]int32{
		"UNSPECIFIED": 0,
		"OLTP":        1,
		"OLAP":        2,
		"DBA":         3,
	}
)

func (x ExecuteOptions_Workload) Enum() *ExecuteOptions_Workload {
	p := new(ExecuteOptions_Workload)
	*p = x
	return p
}

func (x ExecuteOptions_Workload) String() string {
	name, valid := ExecuteOptions_Workload_name[int32(x)]
	if valid {
		return name
	}
	return strconv.Itoa(int(x))
}

type ExecuteOptions_TransactionIsolation int32

const (
	ExecuteOptions_DEFAULT          ExecuteOptions_TransactionIsolation = 0
	ExecuteOptions_REPEATABLE_READ  ExecuteOptions_TransactionIsolation = 1
	ExecuteOptions_READ_COMMITTED   ExecuteOptions_TransactionIsolation = 2
	ExecuteOptions_READ_UNCOMMITTED ExecuteOptions_TransactionIsolation = 3
	ExecuteOptions_SERIALIZABLE     ExecuteOptions_TransactionIsolation = 4
	// This is not an "official" transaction level but it will do a
	// START TRANSACTION WITH CONSISTENT SNAPSHOT, READ ONLY
	ExecuteOptions_CONSISTENT_SNAPSHOT_READ_ONLY ExecuteOptions_TransactionIsolation = 5
	// This not an "official" transaction level, it will send queries to mysql
	// without wrapping them in a transaction
	ExecuteOptions_AUTOCOMMIT ExecuteOptions_TransactionIsolation = 6
)

// Enum value maps for ExecuteOptions_TransactionIsolation.
var (
	ExecuteOptions_TransactionIsolation_name = map[int32]string{
		0: "DEFAULT",
		1: "REPEATABLE_READ",
		2: "READ_COMMITTED",
		3: "READ_UNCOMMITTED",
		4: "SERIALIZABLE",
		5: "CONSISTENT_SNAPSHOT_READ_ONLY",
		6: "AUTOCOMMIT",
	}
	ExecuteOptions_TransactionIsolation_value = map[string]int32{
		"DEFAULT":                       0,
		"REPEATABLE_READ":               1,
		"READ_COMMITTED":                2,
		"READ_UNCOMMITTED":              3,
		"SERIALIZABLE":                  4,
		"CONSISTENT_SNAPSHOT_READ_ONLY": 5,
		"AUTOCOMMIT":                    6,
	}
)

func (x ExecuteOptions_TransactionIsolation) Enum() *ExecuteOptions_TransactionIsolation {
	p := new(ExecuteOptions_TransactionIsolation)
	*p = x
	return p
}

func (x ExecuteOptions_TransactionIsolation) String() string {
	name, valid := ExecuteOptions_TransactionIsolation_name[int32(x)]
	if valid {
		return name
	}
	return strconv.Itoa(int(x))
}

// The category of one statement.
type StreamEvent_Statement_Category int32

const (
	StreamEvent_Statement_Error StreamEvent_Statement_Category = 0
	StreamEvent_Statement_DML   StreamEvent_Statement_Category = 1
	StreamEvent_Statement_DDL   StreamEvent_Statement_Category = 2
)

// Enum value maps for StreamEvent_Statement_Category.
var (
	StreamEvent_Statement_Category_name = map[int32]string{
		0: "Error",
		1: "DML",
		2: "DDL",
	}
	StreamEvent_Statement_Category_value = map[string]int32{
		"Error": 0,
		"DML":   1,
		"DDL":   2,
	}
)

func (x StreamEvent_Statement_Category) Enum() *StreamEvent_Statement_Category {
	p := new(StreamEvent_Statement_Category)
	*p = x
	return p
}

func (x StreamEvent_Statement_Category) String() string {
	name, valid := StreamEvent_Statement_Category_name[int32(x)]
	if valid {
		return name
	}
	return strconv.Itoa(int(x))
}

type SplitQueryRequest_Algorithm int32

const (
	SplitQueryRequest_EQUAL_SPLITS SplitQueryRequest_Algorithm = 0
	SplitQueryRequest_FULL_SCAN    SplitQueryRequest_Algorithm = 1
)

// Enum value maps for SplitQueryRequest_Algorithm.
var (
	SplitQueryRequest_Algorithm_name = map[int32]string{
		0: "EQUAL_SPLITS",
		1: "FULL_SCAN",
	}
	SplitQueryRequest_Algorithm_value = map[string]int32{
		"EQUAL_SPLITS": 0,
		"FULL_SCAN":    1,
	}
)

func (x SplitQueryRequest_Algorithm) Enum() *SplitQueryRequest_Algorithm {
	p := new(SplitQueryRequest_Algorithm)
	*p = x
	return p
}

func (x SplitQueryRequest_Algorithm) String() string {
	name, valid := SplitQueryRequest_Algorithm_name[int32(x)]
	if valid {
		return name
	}
	return strconv.Itoa(int(x))
}

// Target describes what the client expects the tablet is.
// If the tablet does not match, an error is returned.
type Target struct {
	unknownFields []byte
	Keyspace      string              `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Shard         string              `protobuf:"bytes,2,opt,name=shard,proto3" json:"shard,omitempty"`
	TabletType    topodata.TabletType `protobuf:"varint,3,opt,name=tablet_type,json=tabletType,proto3" json:"tabletType,omitempty"`
	// cell is used for routing queries between vtgate and vttablets. It
	// is not used when Target is part of the Session sent by the client.
	Cell string `protobuf:"bytes,4,opt,name=cell,proto3" json:"cell,omitempty"`
}

func (x *Target) Reset() {
	*x = Target{}
}

func (*Target) ProtoMessage() {}

func (x *Target) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *Target) GetShard() string {
	if x != nil {
		return x.Shard
	}
	return ""
}

func (x *Target) GetTabletType() topodata.TabletType {
	if x != nil {
		return x.TabletType
	}
	return topodata.TabletType(0)
}

func (x *Target) GetCell() string {
	if x != nil {
		return x.Cell
	}
	return ""
}

// VTGateCallerID is sent by VTGate to VTTablet to describe the
// caller. If possible, this information is secure. For instance,
// if using unique certificates that guarantee that VTGate->VTTablet
// traffic cannot be spoofed, then VTTablet can trust this information,
// and VTTablet will use it for tablet ACLs, for instance.
// Because of this security guarantee, this is different than the CallerID
// structure, which is not secure at all, because it is provided
// by the Vitess client.
type VTGateCallerID struct {
	unknownFields []byte
	Username      string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Groups        []string `protobuf:"bytes,2,rep,name=groups,proto3" json:"groups,omitempty"`
}

func (x *VTGateCallerID) Reset() {
	*x = VTGateCallerID{}
}

func (*VTGateCallerID) ProtoMessage() {}

func (x *VTGateCallerID) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *VTGateCallerID) GetGroups() []string {
	if x != nil {
		return x.Groups
	}
	return nil
}

// EventToken is a structure that describes a point in time in a
// replication stream on one shard. The most recent known replication
// position can be retrieved from vttablet when executing a query. It
// is also sent with the replication streams from the binlog service.
type EventToken struct {
	unknownFields []byte
	// timestamp is the MySQL timestamp of the statements. Seconds since Epoch.
	Timestamp int64 `protobuf:"varint,1,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	// The shard name that applied the statements. Note this is not set when
	// streaming from a vttablet. It is only used on the client -> vtgate link.
	Shard string `protobuf:"bytes,2,opt,name=shard,proto3" json:"shard,omitempty"`
	// The position on the replication stream after this statement was applied.
	// It is not the transaction ID / GTID, but the position / GTIDSet.
	Position string `protobuf:"bytes,3,opt,name=position,proto3" json:"position,omitempty"`
}

func (x *EventToken) Reset() {
	*x = EventToken{}
}

func (*EventToken) ProtoMessage() {}

func (x *EventToken) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *EventToken) GetShard() string {
	if x != nil {
		return x.Shard
	}
	return ""
}

func (x *EventToken) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

// Value represents a typed value.
type Value struct {
	unknownFields []byte
	Type          Type   `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Value         []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Value) Reset() {
	*x = Value{}
}

func (*Value) ProtoMessage() {}

func (x *Value) GetType() Type {
	if x != nil {
		return x.Type
	}
	return Type_NULL_TYPE
}

func (x *Value) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

// BindVariable represents a single bind variable in a Query.
type BindVariable struct {
	unknownFields []byte
	Type          Type   `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Value         []byte `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
	// values are set if type is TUPLE.
	Values []*Value `protobuf:"bytes,3,rep,name=values,proto3" json:"values,omitempty"`
}

func (x *BindVariable) Reset() {
	*x = BindVariable{}
}

func (*BindVariable) ProtoMessage() {}

func (x *BindVariable) GetType() Type {
	if x != nil {
		return x.Type
	}
	return Type_NULL_TYPE
}

func (x *BindVariable) GetValue() []byte {
	if x != nil {
		return x.Value
	}
	return nil
}

func (x *BindVariable) GetValues() []*Value {
	if x != nil {
		return x.Values
	}
	return nil
}

// BoundQuery is a query with its bind variables
type BoundQuery struct {
	unknownFields []byte
	// sql is the SQL query to execute
	Sql string `protobuf:"bytes,1,opt,name=sql,proto3" json:"sql,omitempty"`
	// bind_variables is a map of all bind variables to expand in the query.
	// nil values are not allowed. Use NULL_TYPE to express a NULL value.
	BindVariables map[string]*BindVariable `protobuf:"bytes,2,rep,name=bind_variables,json=bindVariables,proto3" json:"bindVariables,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (x *BoundQuery) Reset() {
	*x = BoundQuery{}
}

func (*BoundQuery) ProtoMessage() {}

func (x *BoundQuery) GetSql() string {
	if x != nil {
		return x.Sql
	}
	return ""
}

func (x *BoundQuery) GetBindVariables() map[string]*BindVariable {
	if x != nil {
		return x.BindVariables
	}
	return nil
}

// ExecuteOptions is passed around for all Execute calls.
type ExecuteOptions struct {
	unknownFields []byte
	// If set, we will try to include an EventToken with the responses.
	IncludeEventToken bool `protobuf:"varint,2,opt,name=include_event_token,json=includeEventToken,proto3" json:"includeEventToken,omitempty"`
	// If set, the fresher field may be set as a result comparison to this token.
	// This is a shortcut so the application doesn't need to care about
	// comparing EventTokens.
	CompareEventToken *EventToken `protobuf:"bytes,3,opt,name=compare_event_token,json=compareEventToken,proto3" json:"compareEventToken,omitempty"`
	// Controls what fields are returned in Field message responses from mysql, i.e.
	// field name, table name, etc. This is an optimization for high-QPS queries where
	// the client knows what it's getting
	IncludedFields ExecuteOptions_IncludedFields `protobuf:"varint,4,opt,name=included_fields,json=includedFields,proto3" json:"includedFields,omitempty"`
	// client_rows_found specifies if rows_affected should return
	// rows found instead of rows affected. Behavior is defined
	// by MySQL's CLIENT_FOUND_ROWS flag.
	ClientFoundRows bool `protobuf:"varint,5,opt,name=client_found_rows,json=clientFoundRows,proto3" json:"clientFoundRows,omitempty"`
	// workload specifies the type of workload:
	// OLTP: DMLs allowed, results have row count limit, and
	// query timeouts are shorter.
	// OLAP: DMLS not allowed, no limit on row count, timeouts
	// can be as high as desired.
	// DBA: no limit on rowcount or timeout, all queries allowed
	// but intended for long DMLs and DDLs.
	Workload ExecuteOptions_Workload `protobuf:"varint,6,opt,name=workload,proto3" json:"workload,omitempty"`
	// sql_select_limit sets an implicit limit on all select statements. Since
	// vitess also sets a rowcount limit on queries, the smallest value wins.
	SqlSelectLimit       int64                               `protobuf:"varint,8,opt,name=sql_select_limit,json=sqlSelectLimit,proto3" json:"sqlSelectLimit,omitempty"`
	TransactionIsolation ExecuteOptions_TransactionIsolation `protobuf:"varint,9,opt,name=transaction_isolation,json=transactionIsolation,proto3" json:"transactionIsolation,omitempty"`
	// skip_query_plan_cache specifies if the query plan should be cached by vitess.
	// By default all query plans are cached.
	SkipQueryPlanCache bool `protobuf:"varint,10,opt,name=skip_query_plan_cache,json=skipQueryPlanCache,proto3" json:"skipQueryPlanCache,omitempty"`
}

func (x *ExecuteOptions) Reset() {
	*x = ExecuteOptions{}
}

func (*ExecuteOptions) ProtoMessage() {}

func (x *ExecuteOptions) GetIncludeEventToken() bool {
	if x != nil {
		return x.IncludeEventToken
	}
	return false
}

func (x *ExecuteOptions) GetCompareEventToken() *EventToken {
	if x != nil {
		return x.CompareEventToken
	}
	return nil
}

func (x *ExecuteOptions) GetIncludedFields() ExecuteOptions_IncludedFields {
	if x != nil {
		return x.IncludedFields
	}
	return ExecuteOptions_TYPE_AND_NAME
}

func (x *ExecuteOptions) GetClientFoundRows() bool {
	if x != nil {
		return x.ClientFoundRows
	}
	return false
}

func (x *ExecuteOptions) GetWorkload() ExecuteOptions_Workload {
	if x != nil {
		return x.Workload
	}
	return ExecuteOptions_UNSPECIFIED
}

func (x *ExecuteOptions) GetSqlSelectLimit() int64 {
	if x != nil {
		return x.SqlSelectLimit
	}
	return 0
}

func (x *ExecuteOptions) GetTransactionIsolation() ExecuteOptions_TransactionIsolation {
	if x != nil {
		return x.TransactionIsolation
	}
	return ExecuteOptions_DEFAULT
}

func (x *ExecuteOptions) GetSkipQueryPlanCache() bool {
	if x != nil {
		return x.SkipQueryPlanCache
	}
	return false
}

// Field describes a single column returned by a query
type Field struct {
	unknownFields []byte
	// name of the field as returned by mysql C API
	Name string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	// vitess-defined type. Conversion function is in sqltypes package.
	Type Type `protobuf:"varint,2,opt,name=type,proto3" json:"type,omitempty"`
	// Remaining fields from mysql C API.
	// These fields are only populated when ExecuteOptions.included_fields
	// is set to IncludedFields.ALL.
	Table    string `protobuf:"bytes,3,opt,name=table,proto3" json:"table,omitempty"`
	OrgTable string `protobuf:"bytes,4,opt,name=org_table,json=orgTable,proto3" json:"orgTable,omitempty"`
	Database string `protobuf:"bytes,5,opt,name=database,proto3" json:"database,omitempty"`
	OrgName  string `protobuf:"bytes,6,opt,name=org_name,json=orgName,proto3" json:"orgName,omitempty"`
	// column_length is really a uint32. All 32 bits can be used.
	ColumnLength uint32 `protobuf:"varint,7,opt,name=column_length,json=columnLength,proto3" json:"columnLength,omitempty"`
	// charset is actually a uint16. Only the lower 16 bits are used.
	Charset uint32 `protobuf:"varint,8,opt,name=charset,proto3" json:"charset,omitempty"`
	// decimals is actually a uint8. Only the lower 8 bits are used.
	Decimals uint32 `protobuf:"varint,9,opt,name=decimals,proto3" json:"decimals,omitempty"`
	// flags is actually a uint16. Only the lower 16 bits are used.
	Flags uint32 `protobuf:"varint,10,opt,name=flags,proto3" json:"flags,omitempty"`
}

func (x *Field) Reset() {
	*x = Field{}
}

func (*Field) ProtoMessage() {}

func (x *Field) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Field) GetType() Type {
	if x != nil {
		return x.Type
	}
	return Type_NULL_TYPE
}

func (x *Field) GetTable() string {
	if x != nil {
		return x.Table
	}
	return ""
}

func (x *Field) GetOrgTable() string {
	if x != nil {
		return x.OrgTable
	}
	return ""
}

func (x *Field) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *Field) GetOrgName() string {
	if x != nil {
		return x.OrgName
	}
	return ""
}

func (x *Field) GetColumnLength() uint32 {
	if x != nil {
		return x.ColumnLength
	}
	return 0
}

func (x *Field) GetCharset() uint32 {
	if x != nil {
		return x.Charset
	}
	return 0
}

func (x *Field) GetDecimals() uint32 {
	if x != nil {
		return x.Decimals
	}
	return 0
}

func (x *Field) GetFlags() uint32 {
	if x != nil {
		return x.Flags
	}
	return 0
}

// Row is a database row.
type Row struct {
	unknownFields []byte
	// lengths contains the length of each value in values.
	// A length of -1 means that the field is NULL. While
	// reading values, you have to accummulate the length
	// to know the offset where the next value begins in values.
	Lengths []int64 `protobuf:"zigzag64,1,rep,packed,name=lengths,proto3" json:"lengths,omitempty"`
	// values contains a concatenation of all values in the row.
	Values []byte `protobuf:"bytes,2,opt,name=values,proto3" json:"values,omitempty"`
}

func (x *Row) Reset() {
	*x = Row{}
}

func (*Row) ProtoMessage() {}

func (x *Row) GetLengths() []int64 {
	if x != nil {
		return x.Lengths
	}
	return nil
}

func (x *Row) GetValues() []byte {
	if x != nil {
		return x.Values
	}
	return nil
}

// ResultExtras contains optional out-of-band information. Usually the
// extras are requested by adding ExecuteOptions flags.
type ResultExtras struct {
	unknownFields []byte
	// event_token is populated if the include_event_token flag is set
	// in ExecuteOptions.
	EventToken *EventToken `protobuf:"bytes,1,opt,name=event_token,json=eventToken,proto3" json:"eventToken,omitempty"`
	// If set, it means the data returned with this result is fresher
	// than the compare_token passed in the ExecuteOptions.
	Fresher bool `protobuf:"varint,2,opt,name=fresher,proto3" json:"fresher,omitempty"`
}

func (x *ResultExtras) Reset() {
	*x = ResultExtras{}
}

func (*ResultExtras) ProtoMessage() {}

func (x *ResultExtras) GetEventToken() *EventToken {
	if x != nil {
		return x.EventToken
	}
	return nil
}

func (x *ResultExtras) GetFresher() bool {
	if x != nil {
		return x.Fresher
	}
	return false
}

// QueryResult is returned by Execute and ExecuteStream.
//
// As returned by Execute, len(fields) is always equal to len(row)
// (for each row in rows).
//
// As returned by StreamExecute, the first QueryResult has the fields
// set, and subsequent QueryResult have rows set. And as Execute,
// len(QueryResult[0].fields) is always equal to len(row) (for each
// row in rows for each QueryResult in QueryResult[1:]).
type QueryResult struct {
	unknownFields []byte
	Fields        []*Field      `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	RowsAffected  uint64        `protobuf:"varint,2,opt,name=rows_affected,json=rowsAffected,proto3" json:"rowsAffected,omitempty"`
	InsertId      uint64        `protobuf:"varint,3,opt,name=insert_id,json=insertId,proto3" json:"insertId,omitempty"`
	Rows          []*Row        `protobuf:"bytes,4,rep,name=rows,proto3" json:"rows,omitempty"`
	Extras        *ResultExtras `protobuf:"bytes,5,opt,name=extras,proto3" json:"extras,omitempty"`
}

func (x *QueryResult) Reset() {
	*x = QueryResult{}
}

func (*QueryResult) ProtoMessage() {}

func (x *QueryResult) GetFields() []*Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *QueryResult) GetRowsAffected() uint64 {
	if x != nil {
		return x.RowsAffected
	}
	return 0
}

func (x *QueryResult) GetInsertId() uint64 {
	if x != nil {
		return x.InsertId
	}
	return 0
}

func (x *QueryResult) GetRows() []*Row {
	if x != nil {
		return x.Rows
	}
	return nil
}

func (x *QueryResult) GetExtras() *ResultExtras {
	if x != nil {
		return x.Extras
	}
	return nil
}

// QueryWarning is used to convey out of band query execution warnings
// by storing in the vtgate.Session
type QueryWarning struct {
	unknownFields []byte
	Code          uint32 `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message       string `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
}

func (x *QueryWarning) Reset() {
	*x = QueryWarning{}
}

func (*QueryWarning) ProtoMessage() {}

func (x *QueryWarning) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *QueryWarning) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

// StreamEvent describes a set of transformations that happened as a
// single transactional unit on a server. It is streamed back by the
// Update Stream calls.
type StreamEvent struct {
	unknownFields []byte
	// The statements in this transaction.
	Statements []*StreamEvent_Statement `protobuf:"bytes,1,rep,name=statements,proto3" json:"statements,omitempty"`
	// The Event Token for this event.
	EventToken *EventToken `protobuf:"bytes,2,opt,name=event_token,json=eventToken,proto3" json:"eventToken,omitempty"`
}

func (x *StreamEvent) Reset() {
	*x = StreamEvent{}
}

func (*StreamEvent) ProtoMessage() {}

func (x *StreamEvent) GetStatements() []*StreamEvent_Statement {
	if x != nil {
		return x.Statements
	}
	return nil
}

func (x *StreamEvent) GetEventToken() *EventToken {
	if x != nil {
		return x.EventToken
	}
	return nil
}

// ExecuteRequest is the payload to Execute
type ExecuteRequest struct {
	unknownFields     []byte
	EffectiveCallerId *vtrpc.CallerID `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId,proto3" json:"effectiveCallerId,omitempty"`
	ImmediateCallerId *VTGateCallerID `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId,proto3" json:"immediateCallerId,omitempty"`
	Target            *Target         `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	Query             *BoundQuery     `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
	TransactionId     int64           `protobuf:"varint,5,opt,name=transaction_id,json=transactionId,proto3" json:"transactionId,omitempty"`
	Options           *ExecuteOptions `protobuf:"bytes,6,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *ExecuteRequest) Reset() {
	*x = ExecuteRequest{}
}

func (*ExecuteRequest) ProtoMessage() {}

func (x *ExecuteRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if x != nil {
		return x.EffectiveCallerId
	}
	return nil
}

func (x *ExecuteRequest) GetImmediateCallerId() *VTGateCallerID {
	if x != nil {
		return x.ImmediateCallerId
	}
	return nil
}

func (x *ExecuteRequest) GetTarget() *Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *ExecuteRequest) GetQuery() *BoundQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *ExecuteRequest) GetTransactionId() int64 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

func (x *ExecuteRequest) GetOptions() *ExecuteOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

// ExecuteResponse is the returned value from Execute
type ExecuteResponse struct {
	unknownFields []byte
	Result        *QueryResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *ExecuteResponse) Reset() {
	*x = ExecuteResponse{}
}

func (*ExecuteResponse) ProtoMessage() {}

func (x *ExecuteResponse) GetResult() *QueryResult {
	if x != nil {
		return x.Result
	}
	return nil
}

// ResultWithError represents a query response
// in the form of result or error but not both.
// TODO: To be used in ExecuteBatchResponse and BeginExecuteBatchResponse.
type ResultWithError struct {
	unknownFields []byte
	// error contains an query level error, only set if result is unset.
	Error *vtrpc.RPCError `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	// result contains the query result, only set if error is unset.
	Result *QueryResult `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *ResultWithError) Reset() {
	*x = ResultWithError{}
}

func (*ResultWithError) ProtoMessage() {}

func (x *ResultWithError) GetError() *vtrpc.RPCError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *ResultWithError) GetResult() *QueryResult {
	if x != nil {
		return x.Result
	}
	return nil
}

// ExecuteBatchRequest is the payload to ExecuteBatch
type ExecuteBatchRequest struct {
	unknownFields     []byte
	EffectiveCallerId *vtrpc.CallerID `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId,proto3" json:"effectiveCallerId,omitempty"`
	ImmediateCallerId *VTGateCallerID `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId,proto3" json:"immediateCallerId,omitempty"`
	Target            *Target         `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	Queries           []*BoundQuery   `protobuf:"bytes,4,rep,name=queries,proto3" json:"queries,omitempty"`
	AsTransaction     bool            `protobuf:"varint,5,opt,name=as_transaction,json=asTransaction,proto3" json:"asTransaction,omitempty"`
	TransactionId     int64           `protobuf:"varint,6,opt,name=transaction_id,json=transactionId,proto3" json:"transactionId,omitempty"`
	Options           *ExecuteOptions `protobuf:"bytes,7,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *ExecuteBatchRequest) Reset() {
	*x = ExecuteBatchRequest{}
}

func (*ExecuteBatchRequest) ProtoMessage() {}

func (x *ExecuteBatchRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if x != nil {
		return x.EffectiveCallerId
	}
	return nil
}

func (x *ExecuteBatchRequest) GetImmediateCallerId() *VTGateCallerID {
	if x != nil {
		return x.ImmediateCallerId
	}
	return nil
}

func (x *ExecuteBatchRequest) GetTarget() *Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *ExecuteBatchRequest) GetQueries() []*BoundQuery {
	if x != nil {
		return x.Queries
	}
	return nil
}

func (x *ExecuteBatchRequest) GetAsTransaction() bool {
	if x != nil {
		return x.AsTransaction
	}
	return false
}

func (x *ExecuteBatchRequest) GetTransactionId() int64 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

func (x *ExecuteBatchRequest) GetOptions() *ExecuteOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

// ExecuteBatchResponse is the returned value from ExecuteBatch
type ExecuteBatchResponse struct {
	unknownFields []byte
	Results       []*QueryResult `protobuf:"bytes,1,rep,name=results,proto3" json:"results,omitempty"`
}

func (x *ExecuteBatchResponse) Reset() {
	*x = ExecuteBatchResponse{}
}

func (*ExecuteBatchResponse) ProtoMessage() {}

func (x *ExecuteBatchResponse) GetResults() []*QueryResult {
	if x != nil {
		return x.Results
	}
	return nil
}

// StreamExecuteRequest is the payload to StreamExecute
type StreamExecuteRequest struct {
	unknownFields     []byte
	EffectiveCallerId *vtrpc.CallerID `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId,proto3" json:"effectiveCallerId,omitempty"`
	ImmediateCallerId *VTGateCallerID `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId,proto3" json:"immediateCallerId,omitempty"`
	Target            *Target         `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	Query             *BoundQuery     `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
	Options           *ExecuteOptions `protobuf:"bytes,5,opt,name=options,proto3" json:"options,omitempty"`
	TransactionId     int64           `protobuf:"varint,6,opt,name=transaction_id,json=transactionId,proto3" json:"transactionId,omitempty"`
}

func (x *StreamExecuteRequest) Reset() {
	*x = StreamExecuteRequest{}
}

func (*StreamExecuteRequest) ProtoMessage() {}

func (x *StreamExecuteRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if x != nil {
		return x.EffectiveCallerId
	}
	return nil
}

func (x *StreamExecuteRequest) GetImmediateCallerId() *VTGateCallerID {
	if x != nil {
		return x.ImmediateCallerId
	}
	return nil
}

func (x *StreamExecuteRequest) GetTarget() *Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *StreamExecuteRequest) GetQuery() *BoundQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *StreamExecuteRequest) GetOptions() *ExecuteOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

func (x *StreamExecuteRequest) GetTransactionId() int64 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

// StreamExecuteResponse is the returned value from StreamExecute
type StreamExecuteResponse struct {
	unknownFields []byte
	Result        *QueryResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *StreamExecuteResponse) Reset() {
	*x = StreamExecuteResponse{}
}

func (*StreamExecuteResponse) ProtoMessage() {}

func (x *StreamExecuteResponse) GetResult() *QueryResult {
	if x != nil {
		return x.Result
	}
	return nil
}

// BeginRequest is the payload to Begin
type BeginRequest struct {
	unknownFields     []byte
	EffectiveCallerId *vtrpc.CallerID `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId,proto3" json:"effectiveCallerId,omitempty"`
	ImmediateCallerId *VTGateCallerID `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId,proto3" json:"immediateCallerId,omitempty"`
	Target            *Target         `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	Options           *ExecuteOptions `protobuf:"bytes,4,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *BeginRequest) Reset() {
	*x = BeginRequest{}
}

func (*BeginRequest) ProtoMessage() {}

func (x *BeginRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if x != nil {
		return x.EffectiveCallerId
	}
	return nil
}

func (x *BeginRequest) GetImmediateCallerId() *VTGateCallerID {
	if x != nil {
		return x.ImmediateCallerId
	}
	return nil
}

func (x *BeginRequest) GetTarget() *Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *BeginRequest) GetOptions() *ExecuteOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

// BeginResponse is the returned value from Begin
type BeginResponse struct {
	unknownFields []byte
	TransactionId int64 `protobuf:"varint,1,opt,name=transaction_id,json=transactionId,proto3" json:"transactionId,omitempty"`
}

func (x *BeginResponse) Reset() {
	*x = BeginResponse{}
}

func (*BeginResponse) ProtoMessage() {}

func (x *BeginResponse) GetTransactionId() int64 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

// CommitRequest is the payload to Commit
type CommitRequest struct {
	unknownFields     []byte
	EffectiveCallerId *vtrpc.CallerID `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId,proto3" json:"effectiveCallerId,omitempty"`
	ImmediateCallerId *VTGateCallerID `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId,proto3" json:"immediateCallerId,omitempty"`
	Target            *Target         `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	TransactionId     int64           `protobuf:"varint,4,opt,name=transaction_id,json=transactionId,proto3" json:"transactionId,omitempty"`
}

func (x *CommitRequest) Reset() {
	*x = CommitRequest{}
}

func (*CommitRequest) ProtoMessage() {}

func (x *CommitRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if x != nil {
		return x.EffectiveCallerId
	}
	return nil
}

func (x *CommitRequest) GetImmediateCallerId() *VTGateCallerID {
	if x != nil {
		return x.ImmediateCallerId
	}
	return nil
}

func (x *CommitRequest) GetTarget() *Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *CommitRequest) GetTransactionId() int64 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

// CommitResponse is the returned value from Commit
type CommitResponse struct {
	unknownFields []byte
}

func (x *CommitResponse) Reset() {
	*x = CommitResponse{}
}

func (*CommitResponse) ProtoMessage() {}

// RollbackRequest is the payload to Rollback
type RollbackRequest struct {
	unknownFields     []byte
	EffectiveCallerId *vtrpc.CallerID `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId,proto3" json:"effectiveCallerId,omitempty"`
	ImmediateCallerId *VTGateCallerID `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId,proto3" json:"immediateCallerId,omitempty"`
	Target            *Target         `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	TransactionId     int64           `protobuf:"varint,4,opt,name=transaction_id,json=transactionId,proto3" json:"transactionId,omitempty"`
}

func (x *RollbackRequest) Reset() {
	*x = RollbackRequest{}
}

func (*RollbackRequest) ProtoMessage() {}

func (x *RollbackRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if x != nil {
		return x.EffectiveCallerId
	}
	return nil
}

func (x *RollbackRequest) GetImmediateCallerId() *VTGateCallerID {
	if x != nil {
		return x.ImmediateCallerId
	}
	return nil
}

func (x *RollbackRequest) GetTarget() *Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *RollbackRequest) GetTransactionId() int64 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

// RollbackResponse is the returned value from Rollback
type RollbackResponse struct {
	unknownFields []byte
}

func (x *RollbackResponse) Reset() {
	*x = RollbackResponse{}
}

func (*RollbackResponse) ProtoMessage() {}

// PrepareRequest is the payload to Prepare
type PrepareRequest struct {
	unknownFields     []byte
	EffectiveCallerId *vtrpc.CallerID `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId,proto3" json:"effectiveCallerId,omitempty"`
	ImmediateCallerId *VTGateCallerID `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId,proto3" json:"immediateCallerId,omitempty"`
	Target            *Target         `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	TransactionId     int64           `protobuf:"varint,4,opt,name=transaction_id,json=transactionId,proto3" json:"transactionId,omitempty"`
	Dtid              string          `protobuf:"bytes,5,opt,name=dtid,proto3" json:"dtid,omitempty"`
}

func (x *PrepareRequest) Reset() {
	*x = PrepareRequest{}
}

func (*PrepareRequest) ProtoMessage() {}

func (x *PrepareRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if x != nil {
		return x.EffectiveCallerId
	}
	return nil
}

func (x *PrepareRequest) GetImmediateCallerId() *VTGateCallerID {
	if x != nil {
		return x.ImmediateCallerId
	}
	return nil
}

func (x *PrepareRequest) GetTarget() *Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *PrepareRequest) GetTransactionId() int64 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

func (x *PrepareRequest) GetDtid() string {
	if x != nil {
		return x.Dtid
	}
	return ""
}

// PrepareResponse is the returned value from Prepare
type PrepareResponse struct {
	unknownFields []byte
}

func (x *PrepareResponse) Reset() {
	*x = PrepareResponse{}
}

func (*PrepareResponse) ProtoMessage() {}

// CommitPreparedRequest is the payload to CommitPrepared
type CommitPreparedRequest struct {
	unknownFields     []byte
	EffectiveCallerId *vtrpc.CallerID `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId,proto3" json:"effectiveCallerId,omitempty"`
	ImmediateCallerId *VTGateCallerID `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId,proto3" json:"immediateCallerId,omitempty"`
	Target            *Target         `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	Dtid              string          `protobuf:"bytes,4,opt,name=dtid,proto3" json:"dtid,omitempty"`
}

func (x *CommitPreparedRequest) Reset() {
	*x = CommitPreparedRequest{}
}

func (*CommitPreparedRequest) ProtoMessage() {}

func (x *CommitPreparedRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if x != nil {
		return x.EffectiveCallerId
	}
	return nil
}

func (x *CommitPreparedRequest) GetImmediateCallerId() *VTGateCallerID {
	if x != nil {
		return x.ImmediateCallerId
	}
	return nil
}

func (x *CommitPreparedRequest) GetTarget() *Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *CommitPreparedRequest) GetDtid() string {
	if x != nil {
		return x.Dtid
	}
	return ""
}

// CommitPreparedResponse is the returned value from CommitPrepared
type CommitPreparedResponse struct {
	unknownFields []byte
}

func (x *CommitPreparedResponse) Reset() {
	*x = CommitPreparedResponse{}
}

func (*CommitPreparedResponse) ProtoMessage() {}

// RollbackPreparedRequest is the payload to RollbackPrepared
type RollbackPreparedRequest struct {
	unknownFields     []byte
	EffectiveCallerId *vtrpc.CallerID `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId,proto3" json:"effectiveCallerId,omitempty"`
	ImmediateCallerId *VTGateCallerID `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId,proto3" json:"immediateCallerId,omitempty"`
	Target            *Target         `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	TransactionId     int64           `protobuf:"varint,4,opt,name=transaction_id,json=transactionId,proto3" json:"transactionId,omitempty"`
	Dtid              string          `protobuf:"bytes,5,opt,name=dtid,proto3" json:"dtid,omitempty"`
}

func (x *RollbackPreparedRequest) Reset() {
	*x = RollbackPreparedRequest{}
}

func (*RollbackPreparedRequest) ProtoMessage() {}

func (x *RollbackPreparedRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if x != nil {
		return x.EffectiveCallerId
	}
	return nil
}

func (x *RollbackPreparedRequest) GetImmediateCallerId() *VTGateCallerID {
	if x != nil {
		return x.ImmediateCallerId
	}
	return nil
}

func (x *RollbackPreparedRequest) GetTarget() *Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *RollbackPreparedRequest) GetTransactionId() int64 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

func (x *RollbackPreparedRequest) GetDtid() string {
	if x != nil {
		return x.Dtid
	}
	return ""
}

// RollbackPreparedResponse is the returned value from RollbackPrepared
type RollbackPreparedResponse struct {
	unknownFields []byte
}

func (x *RollbackPreparedResponse) Reset() {
	*x = RollbackPreparedResponse{}
}

func (*RollbackPreparedResponse) ProtoMessage() {}

// CreateTransactionRequest is the payload to CreateTransaction
type CreateTransactionRequest struct {
	unknownFields     []byte
	EffectiveCallerId *vtrpc.CallerID `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId,proto3" json:"effectiveCallerId,omitempty"`
	ImmediateCallerId *VTGateCallerID `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId,proto3" json:"immediateCallerId,omitempty"`
	Target            *Target         `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	Dtid              string          `protobuf:"bytes,4,opt,name=dtid,proto3" json:"dtid,omitempty"`
	Participants      []*Target       `protobuf:"bytes,5,rep,name=participants,proto3" json:"participants,omitempty"`
}

func (x *CreateTransactionRequest) Reset() {
	*x = CreateTransactionRequest{}
}

func (*CreateTransactionRequest) ProtoMessage() {}

func (x *CreateTransactionRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if x != nil {
		return x.EffectiveCallerId
	}
	return nil
}

func (x *CreateTransactionRequest) GetImmediateCallerId() *VTGateCallerID {
	if x != nil {
		return x.ImmediateCallerId
	}
	return nil
}

func (x *CreateTransactionRequest) GetTarget() *Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *CreateTransactionRequest) GetDtid() string {
	if x != nil {
		return x.Dtid
	}
	return ""
}

func (x *CreateTransactionRequest) GetParticipants() []*Target {
	if x != nil {
		return x.Participants
	}
	return nil
}

// CreateTransactionResponse is the returned value from CreateTransaction
type CreateTransactionResponse struct {
	unknownFields []byte
}

func (x *CreateTransactionResponse) Reset() {
	*x = CreateTransactionResponse{}
}

func (*CreateTransactionResponse) ProtoMessage() {}

// StartCommitRequest is the payload to StartCommit
type StartCommitRequest struct {
	unknownFields     []byte
	EffectiveCallerId *vtrpc.CallerID `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId,proto3" json:"effectiveCallerId,omitempty"`
	ImmediateCallerId *VTGateCallerID `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId,proto3" json:"immediateCallerId,omitempty"`
	Target            *Target         `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	TransactionId     int64           `protobuf:"varint,4,opt,name=transaction_id,json=transactionId,proto3" json:"transactionId,omitempty"`
	Dtid              string          `protobuf:"bytes,5,opt,name=dtid,proto3" json:"dtid,omitempty"`
}

func (x *StartCommitRequest) Reset() {
	*x = StartCommitRequest{}
}

func (*StartCommitRequest) ProtoMessage() {}

func (x *StartCommitRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if x != nil {
		return x.EffectiveCallerId
	}
	return nil
}

func (x *StartCommitRequest) GetImmediateCallerId() *VTGateCallerID {
	if x != nil {
		return x.ImmediateCallerId
	}
	return nil
}

func (x *StartCommitRequest) GetTarget() *Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *StartCommitRequest) GetTransactionId() int64 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

func (x *StartCommitRequest) GetDtid() string {
	if x != nil {
		return x.Dtid
	}
	return ""
}

// StartCommitResponse is the returned value from StartCommit
type StartCommitResponse struct {
	unknownFields []byte
}

func (x *StartCommitResponse) Reset() {
	*x = StartCommitResponse{}
}

func (*StartCommitResponse) ProtoMessage() {}

// SetRollbackRequest is the payload to SetRollback
type SetRollbackRequest struct {
	unknownFields     []byte
	EffectiveCallerId *vtrpc.CallerID `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId,proto3" json:"effectiveCallerId,omitempty"`
	ImmediateCallerId *VTGateCallerID `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId,proto3" json:"immediateCallerId,omitempty"`
	Target            *Target         `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	TransactionId     int64           `protobuf:"varint,4,opt,name=transaction_id,json=transactionId,proto3" json:"transactionId,omitempty"`
	Dtid              string          `protobuf:"bytes,5,opt,name=dtid,proto3" json:"dtid,omitempty"`
}

func (x *SetRollbackRequest) Reset() {
	*x = SetRollbackRequest{}
}

func (*SetRollbackRequest) ProtoMessage() {}

func (x *SetRollbackRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if x != nil {
		return x.EffectiveCallerId
	}
	return nil
}

func (x *SetRollbackRequest) GetImmediateCallerId() *VTGateCallerID {
	if x != nil {
		return x.ImmediateCallerId
	}
	return nil
}

func (x *SetRollbackRequest) GetTarget() *Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *SetRollbackRequest) GetTransactionId() int64 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

func (x *SetRollbackRequest) GetDtid() string {
	if x != nil {
		return x.Dtid
	}
	return ""
}

// SetRollbackResponse is the returned value from SetRollback
type SetRollbackResponse struct {
	unknownFields []byte
}

func (x *SetRollbackResponse) Reset() {
	*x = SetRollbackResponse{}
}

func (*SetRollbackResponse) ProtoMessage() {}

// ConcludeTransactionRequest is the payload to ConcludeTransaction
type ConcludeTransactionRequest struct {
	unknownFields     []byte
	EffectiveCallerId *vtrpc.CallerID `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId,proto3" json:"effectiveCallerId,omitempty"`
	ImmediateCallerId *VTGateCallerID `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId,proto3" json:"immediateCallerId,omitempty"`
	Target            *Target         `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	Dtid              string          `protobuf:"bytes,4,opt,name=dtid,proto3" json:"dtid,omitempty"`
}

func (x *ConcludeTransactionRequest) Reset() {
	*x = ConcludeTransactionRequest{}
}

func (*ConcludeTransactionRequest) ProtoMessage() {}

func (x *ConcludeTransactionRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if x != nil {
		return x.EffectiveCallerId
	}
	return nil
}

func (x *ConcludeTransactionRequest) GetImmediateCallerId() *VTGateCallerID {
	if x != nil {
		return x.ImmediateCallerId
	}
	return nil
}

func (x *ConcludeTransactionRequest) GetTarget() *Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *ConcludeTransactionRequest) GetDtid() string {
	if x != nil {
		return x.Dtid
	}
	return ""
}

// ConcludeTransactionResponse is the returned value from ConcludeTransaction
type ConcludeTransactionResponse struct {
	unknownFields []byte
}

func (x *ConcludeTransactionResponse) Reset() {
	*x = ConcludeTransactionResponse{}
}

func (*ConcludeTransactionResponse) ProtoMessage() {}

// ReadTransactionRequest is the payload to ReadTransaction
type ReadTransactionRequest struct {
	unknownFields     []byte
	EffectiveCallerId *vtrpc.CallerID `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId,proto3" json:"effectiveCallerId,omitempty"`
	ImmediateCallerId *VTGateCallerID `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId,proto3" json:"immediateCallerId,omitempty"`
	Target            *Target         `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	Dtid              string          `protobuf:"bytes,4,opt,name=dtid,proto3" json:"dtid,omitempty"`
}

func (x *ReadTransactionRequest) Reset() {
	*x = ReadTransactionRequest{}
}

func (*ReadTransactionRequest) ProtoMessage() {}

func (x *ReadTransactionRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if x != nil {
		return x.EffectiveCallerId
	}
	return nil
}

func (x *ReadTransactionRequest) GetImmediateCallerId() *VTGateCallerID {
	if x != nil {
		return x.ImmediateCallerId
	}
	return nil
}

func (x *ReadTransactionRequest) GetTarget() *Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *ReadTransactionRequest) GetDtid() string {
	if x != nil {
		return x.Dtid
	}
	return ""
}

// ReadTransactionResponse is the returned value from ReadTransaction
type ReadTransactionResponse struct {
	unknownFields []byte
	Metadata      *TransactionMetadata `protobuf:"bytes,1,opt,name=metadata,proto3" json:"metadata,omitempty"`
}

func (x *ReadTransactionResponse) Reset() {
	*x = ReadTransactionResponse{}
}

func (*ReadTransactionResponse) ProtoMessage() {}

func (x *ReadTransactionResponse) GetMetadata() *TransactionMetadata {
	if x != nil {
		return x.Metadata
	}
	return nil
}

// BeginExecuteRequest is the payload to BeginExecute
type BeginExecuteRequest struct {
	unknownFields     []byte
	EffectiveCallerId *vtrpc.CallerID `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId,proto3" json:"effectiveCallerId,omitempty"`
	ImmediateCallerId *VTGateCallerID `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId,proto3" json:"immediateCallerId,omitempty"`
	Target            *Target         `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	Query             *BoundQuery     `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
	Options           *ExecuteOptions `protobuf:"bytes,5,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *BeginExecuteRequest) Reset() {
	*x = BeginExecuteRequest{}
}

func (*BeginExecuteRequest) ProtoMessage() {}

func (x *BeginExecuteRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if x != nil {
		return x.EffectiveCallerId
	}
	return nil
}

func (x *BeginExecuteRequest) GetImmediateCallerId() *VTGateCallerID {
	if x != nil {
		return x.ImmediateCallerId
	}
	return nil
}

func (x *BeginExecuteRequest) GetTarget() *Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *BeginExecuteRequest) GetQuery() *BoundQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *BeginExecuteRequest) GetOptions() *ExecuteOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

// BeginExecuteResponse is the returned value from BeginExecute
type BeginExecuteResponse struct {
	unknownFields []byte
	// error contains an application level error if necessary. Note the
	// transaction_id may be set, even when an error is returned, if the begin
	// worked but the execute failed.
	Error  *vtrpc.RPCError `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Result *QueryResult    `protobuf:"bytes,2,opt,name=result,proto3" json:"result,omitempty"`
	// transaction_id might be non-zero even if an error is present.
	TransactionId int64 `protobuf:"varint,3,opt,name=transaction_id,json=transactionId,proto3" json:"transactionId,omitempty"`
}

func (x *BeginExecuteResponse) Reset() {
	*x = BeginExecuteResponse{}
}

func (*BeginExecuteResponse) ProtoMessage() {}

func (x *BeginExecuteResponse) GetError() *vtrpc.RPCError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *BeginExecuteResponse) GetResult() *QueryResult {
	if x != nil {
		return x.Result
	}
	return nil
}

func (x *BeginExecuteResponse) GetTransactionId() int64 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

// BeginExecuteBatchRequest is the payload to BeginExecuteBatch
type BeginExecuteBatchRequest struct {
	unknownFields     []byte
	EffectiveCallerId *vtrpc.CallerID `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId,proto3" json:"effectiveCallerId,omitempty"`
	ImmediateCallerId *VTGateCallerID `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId,proto3" json:"immediateCallerId,omitempty"`
	Target            *Target         `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	Queries           []*BoundQuery   `protobuf:"bytes,4,rep,name=queries,proto3" json:"queries,omitempty"`
	AsTransaction     bool            `protobuf:"varint,5,opt,name=as_transaction,json=asTransaction,proto3" json:"asTransaction,omitempty"`
	Options           *ExecuteOptions `protobuf:"bytes,6,opt,name=options,proto3" json:"options,omitempty"`
}

func (x *BeginExecuteBatchRequest) Reset() {
	*x = BeginExecuteBatchRequest{}
}

func (*BeginExecuteBatchRequest) ProtoMessage() {}

func (x *BeginExecuteBatchRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if x != nil {
		return x.EffectiveCallerId
	}
	return nil
}

func (x *BeginExecuteBatchRequest) GetImmediateCallerId() *VTGateCallerID {
	if x != nil {
		return x.ImmediateCallerId
	}
	return nil
}

func (x *BeginExecuteBatchRequest) GetTarget() *Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *BeginExecuteBatchRequest) GetQueries() []*BoundQuery {
	if x != nil {
		return x.Queries
	}
	return nil
}

func (x *BeginExecuteBatchRequest) GetAsTransaction() bool {
	if x != nil {
		return x.AsTransaction
	}
	return false
}

func (x *BeginExecuteBatchRequest) GetOptions() *ExecuteOptions {
	if x != nil {
		return x.Options
	}
	return nil
}

// BeginExecuteBatchResponse is the returned value from BeginExecuteBatch
type BeginExecuteBatchResponse struct {
	unknownFields []byte
	// error contains an application level error if necessary. Note the
	// transaction_id may be set, even when an error is returned, if the begin
	// worked but the execute failed.
	Error   *vtrpc.RPCError `protobuf:"bytes,1,opt,name=error,proto3" json:"error,omitempty"`
	Results []*QueryResult  `protobuf:"bytes,2,rep,name=results,proto3" json:"results,omitempty"`
	// transaction_id might be non-zero even if an error is present.
	TransactionId int64 `protobuf:"varint,3,opt,name=transaction_id,json=transactionId,proto3" json:"transactionId,omitempty"`
}

func (x *BeginExecuteBatchResponse) Reset() {
	*x = BeginExecuteBatchResponse{}
}

func (*BeginExecuteBatchResponse) ProtoMessage() {}

func (x *BeginExecuteBatchResponse) GetError() *vtrpc.RPCError {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *BeginExecuteBatchResponse) GetResults() []*QueryResult {
	if x != nil {
		return x.Results
	}
	return nil
}

func (x *BeginExecuteBatchResponse) GetTransactionId() int64 {
	if x != nil {
		return x.TransactionId
	}
	return 0
}

// MessageStreamRequest is the request payload for MessageStream.
type MessageStreamRequest struct {
	unknownFields     []byte
	EffectiveCallerId *vtrpc.CallerID `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId,proto3" json:"effectiveCallerId,omitempty"`
	ImmediateCallerId *VTGateCallerID `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId,proto3" json:"immediateCallerId,omitempty"`
	Target            *Target         `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	// name is the message table name.
	Name string `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
}

func (x *MessageStreamRequest) Reset() {
	*x = MessageStreamRequest{}
}

func (*MessageStreamRequest) ProtoMessage() {}

func (x *MessageStreamRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if x != nil {
		return x.EffectiveCallerId
	}
	return nil
}

func (x *MessageStreamRequest) GetImmediateCallerId() *VTGateCallerID {
	if x != nil {
		return x.ImmediateCallerId
	}
	return nil
}

func (x *MessageStreamRequest) GetTarget() *Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *MessageStreamRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

// MessageStreamResponse is a response for MessageStream.
type MessageStreamResponse struct {
	unknownFields []byte
	Result        *QueryResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *MessageStreamResponse) Reset() {
	*x = MessageStreamResponse{}
}

func (*MessageStreamResponse) ProtoMessage() {}

func (x *MessageStreamResponse) GetResult() *QueryResult {
	if x != nil {
		return x.Result
	}
	return nil
}

// MessageAckRequest is the request payload for MessageAck.
type MessageAckRequest struct {
	unknownFields     []byte
	EffectiveCallerId *vtrpc.CallerID `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId,proto3" json:"effectiveCallerId,omitempty"`
	ImmediateCallerId *VTGateCallerID `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId,proto3" json:"immediateCallerId,omitempty"`
	Target            *Target         `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	// name is the message table name.
	Name string   `protobuf:"bytes,4,opt,name=name,proto3" json:"name,omitempty"`
	Ids  []*Value `protobuf:"bytes,5,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *MessageAckRequest) Reset() {
	*x = MessageAckRequest{}
}

func (*MessageAckRequest) ProtoMessage() {}

func (x *MessageAckRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if x != nil {
		return x.EffectiveCallerId
	}
	return nil
}

func (x *MessageAckRequest) GetImmediateCallerId() *VTGateCallerID {
	if x != nil {
		return x.ImmediateCallerId
	}
	return nil
}

func (x *MessageAckRequest) GetTarget() *Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *MessageAckRequest) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *MessageAckRequest) GetIds() []*Value {
	if x != nil {
		return x.Ids
	}
	return nil
}

// MessageAckResponse is the response for MessageAck.
type MessageAckResponse struct {
	unknownFields []byte
	// result contains the result of the ack operation.
	// Since this acts like a DML, only
	// RowsAffected is returned in the result.
	Result *QueryResult `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *MessageAckResponse) Reset() {
	*x = MessageAckResponse{}
}

func (*MessageAckResponse) ProtoMessage() {}

func (x *MessageAckResponse) GetResult() *QueryResult {
	if x != nil {
		return x.Result
	}
	return nil
}

// SplitQueryRequest is the payload for SplitQuery sent by VTGate to a VTTablet.
// See vtgate.SplitQueryRequest for more details.
type SplitQueryRequest struct {
	unknownFields     []byte
	EffectiveCallerId *vtrpc.CallerID `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId,proto3" json:"effectiveCallerId,omitempty"`
	ImmediateCallerId *VTGateCallerID `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId,proto3" json:"immediateCallerId,omitempty"`
	Target            *Target         `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	Query             *BoundQuery     `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
	SplitColumn       []string        `protobuf:"bytes,5,rep,name=split_column,json=splitColumn,proto3" json:"splitColumn,omitempty"`
	// Exactly one of the following must be nonzero.
	SplitCount          int64                       `protobuf:"varint,6,opt,name=split_count,json=splitCount,proto3" json:"splitCount,omitempty"`
	NumRowsPerQueryPart int64                       `protobuf:"varint,8,opt,name=num_rows_per_query_part,json=numRowsPerQueryPart,proto3" json:"numRowsPerQueryPart,omitempty"`
	Algorithm           SplitQueryRequest_Algorithm `protobuf:"varint,9,opt,name=algorithm,proto3" json:"algorithm,omitempty"`
}

func (x *SplitQueryRequest) Reset() {
	*x = SplitQueryRequest{}
}

func (*SplitQueryRequest) ProtoMessage() {}

func (x *SplitQueryRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if x != nil {
		return x.EffectiveCallerId
	}
	return nil
}

func (x *SplitQueryRequest) GetImmediateCallerId() *VTGateCallerID {
	if x != nil {
		return x.ImmediateCallerId
	}
	return nil
}

func (x *SplitQueryRequest) GetTarget() *Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *SplitQueryRequest) GetQuery() *BoundQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *SplitQueryRequest) GetSplitColumn() []string {
	if x != nil {
		return x.SplitColumn
	}
	return nil
}

func (x *SplitQueryRequest) GetSplitCount() int64 {
	if x != nil {
		return x.SplitCount
	}
	return 0
}

func (x *SplitQueryRequest) GetNumRowsPerQueryPart() int64 {
	if x != nil {
		return x.NumRowsPerQueryPart
	}
	return 0
}

func (x *SplitQueryRequest) GetAlgorithm() SplitQueryRequest_Algorithm {
	if x != nil {
		return x.Algorithm
	}
	return SplitQueryRequest_EQUAL_SPLITS
}

// QuerySplit represents one query to execute on the tablet
type QuerySplit struct {
	unknownFields []byte
	// query is the query to execute
	Query *BoundQuery `protobuf:"bytes,1,opt,name=query,proto3" json:"query,omitempty"`
	// row_count is the approximate row count the query will return
	RowCount int64 `protobuf:"varint,2,opt,name=row_count,json=rowCount,proto3" json:"rowCount,omitempty"`
}

func (x *QuerySplit) Reset() {
	*x = QuerySplit{}
}

func (*QuerySplit) ProtoMessage() {}

func (x *QuerySplit) GetQuery() *BoundQuery {
	if x != nil {
		return x.Query
	}
	return nil
}

func (x *QuerySplit) GetRowCount() int64 {
	if x != nil {
		return x.RowCount
	}
	return 0
}

// SplitQueryResponse is returned by SplitQuery and represents all the queries
// to execute in order to get the entire data set.
type SplitQueryResponse struct {
	unknownFields []byte
	Queries       []*QuerySplit `protobuf:"bytes,1,rep,name=queries,proto3" json:"queries,omitempty"`
}

func (x *SplitQueryResponse) Reset() {
	*x = SplitQueryResponse{}
}

func (*SplitQueryResponse) ProtoMessage() {}

func (x *SplitQueryResponse) GetQueries() []*QuerySplit {
	if x != nil {
		return x.Queries
	}
	return nil
}

// StreamHealthRequest is the payload for StreamHealth
type StreamHealthRequest struct {
	unknownFields []byte
}

func (x *StreamHealthRequest) Reset() {
	*x = StreamHealthRequest{}
}

func (*StreamHealthRequest) ProtoMessage() {}

// RealtimeStats contains information about the tablet status.
// It is only valid for a single tablet.
type RealtimeStats struct {
	unknownFields []byte
	// health_error is the last error we got from health check,
	// or empty is the server is healthy. This is used for subset selection,
	// we do not send queries to servers that are not healthy.
	HealthError string `protobuf:"bytes,1,opt,name=health_error,json=healthError,proto3" json:"healthError,omitempty"`
	// seconds_behind_master is populated for slaves only. It indicates
	// how far behind on (MySQL) replication a slave currently is.  It is used
	// by clients for subset selection (so we don't try to send traffic
	// to tablets that are too far behind).
	// NOTE: This field must not be evaluated if "health_error" is not empty.
	// TODO(mberlin): Let's switch it to int64 instead?
	SecondsBehindMaster uint32 `protobuf:"varint,2,opt,name=seconds_behind_master,json=secondsBehindMaster,proto3" json:"secondsBehindMaster,omitempty"`
	// bin_log_players_count is the number of currently running binlog players.
	// if the value is 0, it means that filtered replication is currently not
	// running on the tablet. If >0, filtered replication is running.
	// NOTE: This field must not be evaluated if "health_error" is not empty.
	BinlogPlayersCount int32 `protobuf:"varint,3,opt,name=binlog_players_count,json=binlogPlayersCount,proto3" json:"binlogPlayersCount,omitempty"`
	// seconds_behind_master_filtered_replication is populated for the receiving
	// master of an ongoing filtered replication only.
	// It specifies how far the receiving master lags behind the sending master.
	// NOTE: This field must not be evaluated if "health_error" is not empty.
	// NOTE: This field must not be evaluated if "bin_log_players_count" is 0.
	SecondsBehindMasterFilteredReplication int64 `protobuf:"varint,4,opt,name=seconds_behind_master_filtered_replication,json=secondsBehindMasterFilteredReplication,proto3" json:"secondsBehindMasterFilteredReplication,omitempty"`
	// cpu_usage is used for load-based balancing
	CpuUsage float64 `protobuf:"fixed64,5,opt,name=cpu_usage,json=cpuUsage,proto3" json:"cpuUsage,omitempty"`
	// qps is the average QPS (queries per second) rate in the last XX seconds
	// where XX is usually 60 (See query_service_stats.go).
	Qps float64 `protobuf:"fixed64,6,opt,name=qps,proto3" json:"qps,omitempty"`
}

func (x *RealtimeStats) Reset() {
	*x = RealtimeStats{}
}

func (*RealtimeStats) ProtoMessage() {}

func (x *RealtimeStats) GetHealthError() string {
	if x != nil {
		return x.HealthError
	}
	return ""
}

func (x *RealtimeStats) GetSecondsBehindMaster() uint32 {
	if x != nil {
		return x.SecondsBehindMaster
	}
	return 0
}

func (x *RealtimeStats) GetBinlogPlayersCount() int32 {
	if x != nil {
		return x.BinlogPlayersCount
	}
	return 0
}

func (x *RealtimeStats) GetSecondsBehindMasterFilteredReplication() int64 {
	if x != nil {
		return x.SecondsBehindMasterFilteredReplication
	}
	return 0
}

func (x *RealtimeStats) GetCpuUsage() float64 {
	if x != nil {
		return x.CpuUsage
	}
	return 0
}

func (x *RealtimeStats) GetQps() float64 {
	if x != nil {
		return x.Qps
	}
	return 0
}

// AggregateStats contains information about the health of a group of
// tablets for a Target.  It is used to propagate stats from a vtgate
// to another, or from the Gateway layer of a vtgate to the routing
// layer.
type AggregateStats struct {
	unknownFields []byte
	// healthy_tablet_count is the number of healthy tablets in the group.
	HealthyTabletCount int32 `protobuf:"varint,1,opt,name=healthy_tablet_count,json=healthyTabletCount,proto3" json:"healthyTabletCount,omitempty"`
	// unhealthy_tablet_count is the number of unhealthy tablets in the group.
	UnhealthyTabletCount int32 `protobuf:"varint,2,opt,name=unhealthy_tablet_count,json=unhealthyTabletCount,proto3" json:"unhealthyTabletCount,omitempty"`
	// seconds_behind_master_min is the minimum of the
	// seconds_behind_master values of the healthy tablets. It is unset
	// if the tablet type is master.
	SecondsBehindMasterMin uint32 `protobuf:"varint,3,opt,name=seconds_behind_master_min,json=secondsBehindMasterMin,proto3" json:"secondsBehindMasterMin,omitempty"`
	// seconds_behind_master_max is the maximum of the
	// seconds_behind_master values of the healthy tablets. It is unset
	// if the tablet type is master.
	SecondsBehindMasterMax uint32 `protobuf:"varint,4,opt,name=seconds_behind_master_max,json=secondsBehindMasterMax,proto3" json:"secondsBehindMasterMax,omitempty"`
}

func (x *AggregateStats) Reset() {
	*x = AggregateStats{}
}

func (*AggregateStats) ProtoMessage() {}

func (x *AggregateStats) GetHealthyTabletCount() int32 {
	if x != nil {
		return x.HealthyTabletCount
	}
	return 0
}

func (x *AggregateStats) GetUnhealthyTabletCount() int32 {
	if x != nil {
		return x.UnhealthyTabletCount
	}
	return 0
}

func (x *AggregateStats) GetSecondsBehindMasterMin() uint32 {
	if x != nil {
		return x.SecondsBehindMasterMin
	}
	return 0
}

func (x *AggregateStats) GetSecondsBehindMasterMax() uint32 {
	if x != nil {
		return x.SecondsBehindMasterMax
	}
	return 0
}

// StreamHealthResponse is streamed by StreamHealth on a regular basis.
// When StreamHealth is used between a vtgate and vttablet:
// - target describes the tablet.
// - realtime_stats is set.
// - aggregate_stats is not set.
// When StreamHealth is used between two vtgates:
// - target describes the group of tablets.
// - realtime_stats is not set.
// - aggregate_stats is set.
type StreamHealthResponse struct {
	unknownFields []byte
	// target is the current server type. Only queries with that exact Target
	// record will be accepted (the cell may not match, however).
	Target *Target `protobuf:"bytes,1,opt,name=target,proto3" json:"target,omitempty"`
	// serving is true iff the tablet is serving. A tablet may not be serving
	// if filtered replication is enabled on a master for instance,
	// or if a replica should not be used because the keyspace is being resharded.
	Serving bool `protobuf:"varint,2,opt,name=serving,proto3" json:"serving,omitempty"`
	// tablet_externally_reparented_timestamp can be interpreted as the
	// last time we knew that this tablet was the MASTER of this shard
	// (if StreamHealthResponse describes a group of tablets, between
	// two vtgates, only one master will be present in the group, and
	// this is this master's value).
	//
	// It is used by vtgate when determining the current MASTER of a shard.
	// If vtgate sees more than one MASTER tablet, this timestamp is used
	// as tiebreaker where the MASTER with the highest timestamp wins.
	// Another usage of this timestamp is in go/vt/vtgate/buffer to detect the end
	// of a reparent (failover) and stop buffering.
	//
	// In practice, this field is set to:
	// a) the last time the RPC tabletmanager.TabletExternallyReparented was
	//
	//	called on this tablet (usually done by an external failover tool e.g.
	//	Orchestrator). The failover tool can call this as long as we are the
	//	master i.e. even ages after the last reparent occurred.
	//
	// OR
	// b) the last time an active reparent was executed through a vtctl command
	//
	//	(InitShardMaster, PlannedReparentShard, EmergencyReparentShard)
	//
	// OR
	// c) the last time vttablet was started and it initialized its tablet type
	//
	//	as MASTER because it was recorded as the shard's current master in the
	//	topology (see go/vt/vttablet/tabletmanager/init_tablet.go)
	//
	// OR
	// d) 0 if the vttablet was never a MASTER.
	TabletExternallyReparentedTimestamp int64 `protobuf:"varint,3,opt,name=tablet_externally_reparented_timestamp,json=tabletExternallyReparentedTimestamp,proto3" json:"tabletExternallyReparentedTimestamp,omitempty"`
	// realtime_stats contains information about the tablet status.
	// It is only filled in if the information is about a tablet.
	RealtimeStats *RealtimeStats `protobuf:"bytes,4,opt,name=realtime_stats,json=realtimeStats,proto3" json:"realtimeStats,omitempty"`
	// AggregateStats constrains information about the group of tablet status.
	// It is only filled in if the information is about a group of tablets.
	AggregateStats *AggregateStats `protobuf:"bytes,6,opt,name=aggregate_stats,json=aggregateStats,proto3" json:"aggregateStats,omitempty"`
	// tablet_alias is the alias of the sending tablet. The discovery/healthcheck.go
	// code uses it to verify that it's talking to the correct tablet and that it
	// hasn't changed in the meantime e.g. due to tablet restarts where ports or
	// ips have been reused but assigned differently.
	TabletAlias *topodata.TabletAlias `protobuf:"bytes,5,opt,name=tablet_alias,json=tabletAlias,proto3" json:"tabletAlias,omitempty"`
}

func (x *StreamHealthResponse) Reset() {
	*x = StreamHealthResponse{}
}

func (*StreamHealthResponse) ProtoMessage() {}

func (x *StreamHealthResponse) GetTarget() *Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *StreamHealthResponse) GetServing() bool {
	if x != nil {
		return x.Serving
	}
	return false
}

func (x *StreamHealthResponse) GetTabletExternallyReparentedTimestamp() int64 {
	if x != nil {
		return x.TabletExternallyReparentedTimestamp
	}
	return 0
}

func (x *StreamHealthResponse) GetRealtimeStats() *RealtimeStats {
	if x != nil {
		return x.RealtimeStats
	}
	return nil
}

func (x *StreamHealthResponse) GetAggregateStats() *AggregateStats {
	if x != nil {
		return x.AggregateStats
	}
	return nil
}

func (x *StreamHealthResponse) GetTabletAlias() *topodata.TabletAlias {
	if x != nil {
		return x.TabletAlias
	}
	return nil
}

// UpdateStreamRequest is the payload for UpdateStream. At most one of
// position and timestamp can be set. If neither is set, we will start
// streaming from the current binlog position.
type UpdateStreamRequest struct {
	unknownFields     []byte
	EffectiveCallerId *vtrpc.CallerID `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId,proto3" json:"effectiveCallerId,omitempty"`
	ImmediateCallerId *VTGateCallerID `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId,proto3" json:"immediateCallerId,omitempty"`
	Target            *Target         `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	// If position is set, we will start the streaming from that replication
	// position. Incompatible with timestamp.
	Position string `protobuf:"bytes,4,opt,name=position,proto3" json:"position,omitempty"`
	// If timestamp is set, we will start the streaming from the first
	// event in the binlogs that have that timestamp. Incompatible with position.
	Timestamp int64 `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
}

func (x *UpdateStreamRequest) Reset() {
	*x = UpdateStreamRequest{}
}

func (*UpdateStreamRequest) ProtoMessage() {}

func (x *UpdateStreamRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if x != nil {
		return x.EffectiveCallerId
	}
	return nil
}

func (x *UpdateStreamRequest) GetImmediateCallerId() *VTGateCallerID {
	if x != nil {
		return x.ImmediateCallerId
	}
	return nil
}

func (x *UpdateStreamRequest) GetTarget() *Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *UpdateStreamRequest) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *UpdateStreamRequest) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

// UpdateStreamResponse is returned by UpdateStream
type UpdateStreamResponse struct {
	unknownFields []byte
	Event         *StreamEvent `protobuf:"bytes,1,opt,name=event,proto3" json:"event,omitempty"`
}

func (x *UpdateStreamResponse) Reset() {
	*x = UpdateStreamResponse{}
}

func (*UpdateStreamResponse) ProtoMessage() {}

func (x *UpdateStreamResponse) GetEvent() *StreamEvent {
	if x != nil {
		return x.Event
	}
	return nil
}

// TransactionMetadata contains the metadata for a distributed transaction.
type TransactionMetadata struct {
	unknownFields []byte
	Dtid          string           `protobuf:"bytes,1,opt,name=dtid,proto3" json:"dtid,omitempty"`
	State         TransactionState `protobuf:"varint,2,opt,name=state,proto3" json:"state,omitempty"`
	TimeCreated   int64            `protobuf:"varint,3,opt,name=time_created,json=timeCreated,proto3" json:"timeCreated,omitempty"`
	Participants  []*Target        `protobuf:"bytes,4,rep,name=participants,proto3" json:"participants,omitempty"`
}

func (x *TransactionMetadata) Reset() {
	*x = TransactionMetadata{}
}

func (*TransactionMetadata) ProtoMessage() {}

func (x *TransactionMetadata) GetDtid() string {
	if x != nil {
		return x.Dtid
	}
	return ""
}

func (x *TransactionMetadata) GetState() TransactionState {
	if x != nil {
		return x.State
	}
	return TransactionState_UNKNOWN
}

func (x *TransactionMetadata) GetTimeCreated() int64 {
	if x != nil {
		return x.TimeCreated
	}
	return 0
}

func (x *TransactionMetadata) GetParticipants() []*Target {
	if x != nil {
		return x.Participants
	}
	return nil
}

type BoundQuery_BindVariablesEntry struct {
	unknownFields []byte
	Key           string        `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value         *BindVariable `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *BoundQuery_BindVariablesEntry) Reset() {
	*x = BoundQuery_BindVariablesEntry{}
}

func (*BoundQuery_BindVariablesEntry) ProtoMessage() {}

func (x *BoundQuery_BindVariablesEntry) GetKey() string {
	if x != nil {
		return x.Key
	}
	return ""
}

func (x *BoundQuery_BindVariablesEntry) GetValue() *BindVariable {
	if x != nil {
		return x.Value
	}
	return nil
}

// One individual Statement in a transaction.
type StreamEvent_Statement struct {
	unknownFields []byte
	Category      StreamEvent_Statement_Category `protobuf:"varint,1,opt,name=category,proto3" json:"category,omitempty"`
	// table_name, primary_key_fields and primary_key_values are set for DML.
	TableName        string   `protobuf:"bytes,2,opt,name=table_name,json=tableName,proto3" json:"tableName,omitempty"`
	PrimaryKeyFields []*Field `protobuf:"bytes,3,rep,name=primary_key_fields,json=primaryKeyFields,proto3" json:"primaryKeyFields,omitempty"`
	PrimaryKeyValues []*Row   `protobuf:"bytes,4,rep,name=primary_key_values,json=primaryKeyValues,proto3" json:"primaryKeyValues,omitempty"`
	// sql is set for all queries.
	// FIXME(alainjobart) we may not need it for DMLs.
	Sql []byte `protobuf:"bytes,5,opt,name=sql,proto3" json:"sql,omitempty"`
}

func (x *StreamEvent_Statement) Reset() {
	*x = StreamEvent_Statement{}
}

func (*StreamEvent_Statement) ProtoMessage() {}

func (x *StreamEvent_Statement) GetCategory() StreamEvent_Statement_Category {
	if x != nil {
		return x.Category
	}
	return StreamEvent_Statement_Error
}

func (x *StreamEvent_Statement) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *StreamEvent_Statement) GetPrimaryKeyFields() []*Field {
	if x != nil {
		return x.PrimaryKeyFields
	}
	return nil
}

func (x *StreamEvent_Statement) GetPrimaryKeyValues() []*Row {
	if x != nil {
		return x.PrimaryKeyValues
	}
	return nil
}

func (x *StreamEvent_Statement) GetSql() []byte {
	if x != nil {
		return x.Sql
	}
	return nil
}

func (m *Target) CloneVT() *Target {
	if m == nil {
		return (*Target)(nil)
	}
	r := new(Target)
	r.Keyspace = m.Keyspace
	r.Shard = m.Shard
	r.TabletType = m.TabletType
	r.Cell = m.Cell
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Target) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *VTGateCallerID) CloneVT() *VTGateCallerID {
	if m == nil {
		return (*VTGateCallerID)(nil)
	}
	r := new(VTGateCallerID)
	r.Username = m.Username
	if rhs := m.Groups; rhs != nil {
		tmpContainer := make([]string, len(rhs))
		copy(tmpContainer, rhs)
		r.Groups = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *VTGateCallerID) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *EventToken) CloneVT() *EventToken {
	if m == nil {
		return (*EventToken)(nil)
	}
	r := new(EventToken)
	r.Timestamp = m.Timestamp
	r.Shard = m.Shard
	r.Position = m.Position
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *EventToken) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *Value) CloneVT() *Value {
	if m == nil {
		return (*Value)(nil)
	}
	r := new(Value)
	r.Type = m.Type
	if rhs := m.Value; rhs != nil {
		tmpBytes := make([]byte, len(rhs))
		copy(tmpBytes, rhs)
		r.Value = tmpBytes
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Value) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *BindVariable) CloneVT() *BindVariable {
	if m == nil {
		return (*BindVariable)(nil)
	}
	r := new(BindVariable)
	r.Type = m.Type
	if rhs := m.Value; rhs != nil {
		tmpBytes := make([]byte, len(rhs))
		copy(tmpBytes, rhs)
		r.Value = tmpBytes
	}
	if rhs := m.Values; rhs != nil {
		tmpContainer := make([]*Value, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Values = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *BindVariable) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *BoundQuery) CloneVT() *BoundQuery {
	if m == nil {
		return (*BoundQuery)(nil)
	}
	r := new(BoundQuery)
	r.Sql = m.Sql
	if rhs := m.BindVariables; rhs != nil {
		tmpContainer := make(map[string]*BindVariable, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.BindVariables = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *BoundQuery) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *ExecuteOptions) CloneVT() *ExecuteOptions {
	if m == nil {
		return (*ExecuteOptions)(nil)
	}
	r := new(ExecuteOptions)
	r.IncludeEventToken = m.IncludeEventToken
	r.CompareEventToken = m.CompareEventToken.CloneVT()
	r.IncludedFields = m.IncludedFields
	r.ClientFoundRows = m.ClientFoundRows
	r.Workload = m.Workload
	r.SqlSelectLimit = m.SqlSelectLimit
	r.TransactionIsolation = m.TransactionIsolation
	r.SkipQueryPlanCache = m.SkipQueryPlanCache
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ExecuteOptions) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *Field) CloneVT() *Field {
	if m == nil {
		return (*Field)(nil)
	}
	r := new(Field)
	r.Name = m.Name
	r.Type = m.Type
	r.Table = m.Table
	r.OrgTable = m.OrgTable
	r.Database = m.Database
	r.OrgName = m.OrgName
	r.ColumnLength = m.ColumnLength
	r.Charset = m.Charset
	r.Decimals = m.Decimals
	r.Flags = m.Flags
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Field) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *Row) CloneVT() *Row {
	if m == nil {
		return (*Row)(nil)
	}
	r := new(Row)
	if rhs := m.Lengths; rhs != nil {
		tmpContainer := make([]int64, len(rhs))
		copy(tmpContainer, rhs)
		r.Lengths = tmpContainer
	}
	if rhs := m.Values; rhs != nil {
		tmpBytes := make([]byte, len(rhs))
		copy(tmpBytes, rhs)
		r.Values = tmpBytes
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Row) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *ResultExtras) CloneVT() *ResultExtras {
	if m == nil {
		return (*ResultExtras)(nil)
	}
	r := new(ResultExtras)
	r.EventToken = m.EventToken.CloneVT()
	r.Fresher = m.Fresher
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ResultExtras) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *QueryResult) CloneVT() *QueryResult {
	if m == nil {
		return (*QueryResult)(nil)
	}
	r := new(QueryResult)
	r.RowsAffected = m.RowsAffected
	r.InsertId = m.InsertId
	r.Extras = m.Extras.CloneVT()
	if rhs := m.Fields; rhs != nil {
		tmpContainer := make([]*Field, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Fields = tmpContainer
	}
	if rhs := m.Rows; rhs != nil {
		tmpContainer := make([]*Row, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Rows = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *QueryResult) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *QueryWarning) CloneVT() *QueryWarning {
	if m == nil {
		return (*QueryWarning)(nil)
	}
	r := new(QueryWarning)
	r.Code = m.Code
	r.Message = m.Message
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *QueryWarning) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *StreamEvent_Statement) CloneVT() *StreamEvent_Statement {
	if m == nil {
		return (*StreamEvent_Statement)(nil)
	}
	r := new(StreamEvent_Statement)
	r.Category = m.Category
	r.TableName = m.TableName
	if rhs := m.PrimaryKeyFields; rhs != nil {
		tmpContainer := make([]*Field, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.PrimaryKeyFields = tmpContainer
	}
	if rhs := m.PrimaryKeyValues; rhs != nil {
		tmpContainer := make([]*Row, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.PrimaryKeyValues = tmpContainer
	}
	if rhs := m.Sql; rhs != nil {
		tmpBytes := make([]byte, len(rhs))
		copy(tmpBytes, rhs)
		r.Sql = tmpBytes
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *StreamEvent_Statement) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *StreamEvent) CloneVT() *StreamEvent {
	if m == nil {
		return (*StreamEvent)(nil)
	}
	r := new(StreamEvent)
	r.EventToken = m.EventToken.CloneVT()
	if rhs := m.Statements; rhs != nil {
		tmpContainer := make([]*StreamEvent_Statement, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Statements = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *StreamEvent) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *ExecuteRequest) CloneVT() *ExecuteRequest {
	if m == nil {
		return (*ExecuteRequest)(nil)
	}
	r := new(ExecuteRequest)
	r.ImmediateCallerId = m.ImmediateCallerId.CloneVT()
	r.Target = m.Target.CloneVT()
	r.Query = m.Query.CloneVT()
	r.TransactionId = m.TransactionId
	r.Options = m.Options.CloneVT()
	if rhs := m.EffectiveCallerId; rhs != nil {
		r.EffectiveCallerId = rhs.CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ExecuteRequest) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *ExecuteResponse) CloneVT() *ExecuteResponse {
	if m == nil {
		return (*ExecuteResponse)(nil)
	}
	r := new(ExecuteResponse)
	r.Result = m.Result.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ExecuteResponse) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *ResultWithError) CloneVT() *ResultWithError {
	if m == nil {
		return (*ResultWithError)(nil)
	}
	r := new(ResultWithError)
	r.Result = m.Result.CloneVT()
	if rhs := m.Error; rhs != nil {
		r.Error = rhs.CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ResultWithError) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *ExecuteBatchRequest) CloneVT() *ExecuteBatchRequest {
	if m == nil {
		return (*ExecuteBatchRequest)(nil)
	}
	r := new(ExecuteBatchRequest)
	r.ImmediateCallerId = m.ImmediateCallerId.CloneVT()
	r.Target = m.Target.CloneVT()
	r.AsTransaction = m.AsTransaction
	r.TransactionId = m.TransactionId
	r.Options = m.Options.CloneVT()
	if rhs := m.EffectiveCallerId; rhs != nil {
		r.EffectiveCallerId = rhs.CloneVT()
	}
	if rhs := m.Queries; rhs != nil {
		tmpContainer := make([]*BoundQuery, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Queries = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ExecuteBatchRequest) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *ExecuteBatchResponse) CloneVT() *ExecuteBatchResponse {
	if m == nil {
		return (*ExecuteBatchResponse)(nil)
	}
	r := new(ExecuteBatchResponse)
	if rhs := m.Results; rhs != nil {
		tmpContainer := make([]*QueryResult, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Results = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ExecuteBatchResponse) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *StreamExecuteRequest) CloneVT() *StreamExecuteRequest {
	if m == nil {
		return (*StreamExecuteRequest)(nil)
	}
	r := new(StreamExecuteRequest)
	r.ImmediateCallerId = m.ImmediateCallerId.CloneVT()
	r.Target = m.Target.CloneVT()
	r.Query = m.Query.CloneVT()
	r.Options = m.Options.CloneVT()
	r.TransactionId = m.TransactionId
	if rhs := m.EffectiveCallerId; rhs != nil {
		r.EffectiveCallerId = rhs.CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *StreamExecuteRequest) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *StreamExecuteResponse) CloneVT() *StreamExecuteResponse {
	if m == nil {
		return (*StreamExecuteResponse)(nil)
	}
	r := new(StreamExecuteResponse)
	r.Result = m.Result.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *StreamExecuteResponse) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *BeginRequest) CloneVT() *BeginRequest {
	if m == nil {
		return (*BeginRequest)(nil)
	}
	r := new(BeginRequest)
	r.ImmediateCallerId = m.ImmediateCallerId.CloneVT()
	r.Target = m.Target.CloneVT()
	r.Options = m.Options.CloneVT()
	if rhs := m.EffectiveCallerId; rhs != nil {
		r.EffectiveCallerId = rhs.CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *BeginRequest) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *BeginResponse) CloneVT() *BeginResponse {
	if m == nil {
		return (*BeginResponse)(nil)
	}
	r := new(BeginResponse)
	r.TransactionId = m.TransactionId
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *BeginResponse) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *CommitRequest) CloneVT() *CommitRequest {
	if m == nil {
		return (*CommitRequest)(nil)
	}
	r := new(CommitRequest)
	r.ImmediateCallerId = m.ImmediateCallerId.CloneVT()
	r.Target = m.Target.CloneVT()
	r.TransactionId = m.TransactionId
	if rhs := m.EffectiveCallerId; rhs != nil {
		r.EffectiveCallerId = rhs.CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CommitRequest) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *CommitResponse) CloneVT() *CommitResponse {
	if m == nil {
		return (*CommitResponse)(nil)
	}
	r := new(CommitResponse)
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CommitResponse) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *RollbackRequest) CloneVT() *RollbackRequest {
	if m == nil {
		return (*RollbackRequest)(nil)
	}
	r := new(RollbackRequest)
	r.ImmediateCallerId = m.ImmediateCallerId.CloneVT()
	r.Target = m.Target.CloneVT()
	r.TransactionId = m.TransactionId
	if rhs := m.EffectiveCallerId; rhs != nil {
		r.EffectiveCallerId = rhs.CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RollbackRequest) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *RollbackResponse) CloneVT() *RollbackResponse {
	if m == nil {
		return (*RollbackResponse)(nil)
	}
	r := new(RollbackResponse)
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RollbackResponse) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *PrepareRequest) CloneVT() *PrepareRequest {
	if m == nil {
		return (*PrepareRequest)(nil)
	}
	r := new(PrepareRequest)
	r.ImmediateCallerId = m.ImmediateCallerId.CloneVT()
	r.Target = m.Target.CloneVT()
	r.TransactionId = m.TransactionId
	r.Dtid = m.Dtid
	if rhs := m.EffectiveCallerId; rhs != nil {
		r.EffectiveCallerId = rhs.CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *PrepareRequest) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *PrepareResponse) CloneVT() *PrepareResponse {
	if m == nil {
		return (*PrepareResponse)(nil)
	}
	r := new(PrepareResponse)
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *PrepareResponse) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *CommitPreparedRequest) CloneVT() *CommitPreparedRequest {
	if m == nil {
		return (*CommitPreparedRequest)(nil)
	}
	r := new(CommitPreparedRequest)
	r.ImmediateCallerId = m.ImmediateCallerId.CloneVT()
	r.Target = m.Target.CloneVT()
	r.Dtid = m.Dtid
	if rhs := m.EffectiveCallerId; rhs != nil {
		r.EffectiveCallerId = rhs.CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CommitPreparedRequest) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *CommitPreparedResponse) CloneVT() *CommitPreparedResponse {
	if m == nil {
		return (*CommitPreparedResponse)(nil)
	}
	r := new(CommitPreparedResponse)
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CommitPreparedResponse) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *RollbackPreparedRequest) CloneVT() *RollbackPreparedRequest {
	if m == nil {
		return (*RollbackPreparedRequest)(nil)
	}
	r := new(RollbackPreparedRequest)
	r.ImmediateCallerId = m.ImmediateCallerId.CloneVT()
	r.Target = m.Target.CloneVT()
	r.TransactionId = m.TransactionId
	r.Dtid = m.Dtid
	if rhs := m.EffectiveCallerId; rhs != nil {
		r.EffectiveCallerId = rhs.CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RollbackPreparedRequest) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *RollbackPreparedResponse) CloneVT() *RollbackPreparedResponse {
	if m == nil {
		return (*RollbackPreparedResponse)(nil)
	}
	r := new(RollbackPreparedResponse)
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RollbackPreparedResponse) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *CreateTransactionRequest) CloneVT() *CreateTransactionRequest {
	if m == nil {
		return (*CreateTransactionRequest)(nil)
	}
	r := new(CreateTransactionRequest)
	r.ImmediateCallerId = m.ImmediateCallerId.CloneVT()
	r.Target = m.Target.CloneVT()
	r.Dtid = m.Dtid
	if rhs := m.EffectiveCallerId; rhs != nil {
		r.EffectiveCallerId = rhs.CloneVT()
	}
	if rhs := m.Participants; rhs != nil {
		tmpContainer := make([]*Target, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Participants = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CreateTransactionRequest) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *CreateTransactionResponse) CloneVT() *CreateTransactionResponse {
	if m == nil {
		return (*CreateTransactionResponse)(nil)
	}
	r := new(CreateTransactionResponse)
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *CreateTransactionResponse) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *StartCommitRequest) CloneVT() *StartCommitRequest {
	if m == nil {
		return (*StartCommitRequest)(nil)
	}
	r := new(StartCommitRequest)
	r.ImmediateCallerId = m.ImmediateCallerId.CloneVT()
	r.Target = m.Target.CloneVT()
	r.TransactionId = m.TransactionId
	r.Dtid = m.Dtid
	if rhs := m.EffectiveCallerId; rhs != nil {
		r.EffectiveCallerId = rhs.CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *StartCommitRequest) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *StartCommitResponse) CloneVT() *StartCommitResponse {
	if m == nil {
		return (*StartCommitResponse)(nil)
	}
	r := new(StartCommitResponse)
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *StartCommitResponse) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *SetRollbackRequest) CloneVT() *SetRollbackRequest {
	if m == nil {
		return (*SetRollbackRequest)(nil)
	}
	r := new(SetRollbackRequest)
	r.ImmediateCallerId = m.ImmediateCallerId.CloneVT()
	r.Target = m.Target.CloneVT()
	r.TransactionId = m.TransactionId
	r.Dtid = m.Dtid
	if rhs := m.EffectiveCallerId; rhs != nil {
		r.EffectiveCallerId = rhs.CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *SetRollbackRequest) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *SetRollbackResponse) CloneVT() *SetRollbackResponse {
	if m == nil {
		return (*SetRollbackResponse)(nil)
	}
	r := new(SetRollbackResponse)
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *SetRollbackResponse) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *ConcludeTransactionRequest) CloneVT() *ConcludeTransactionRequest {
	if m == nil {
		return (*ConcludeTransactionRequest)(nil)
	}
	r := new(ConcludeTransactionRequest)
	r.ImmediateCallerId = m.ImmediateCallerId.CloneVT()
	r.Target = m.Target.CloneVT()
	r.Dtid = m.Dtid
	if rhs := m.EffectiveCallerId; rhs != nil {
		r.EffectiveCallerId = rhs.CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ConcludeTransactionRequest) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *ConcludeTransactionResponse) CloneVT() *ConcludeTransactionResponse {
	if m == nil {
		return (*ConcludeTransactionResponse)(nil)
	}
	r := new(ConcludeTransactionResponse)
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ConcludeTransactionResponse) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *ReadTransactionRequest) CloneVT() *ReadTransactionRequest {
	if m == nil {
		return (*ReadTransactionRequest)(nil)
	}
	r := new(ReadTransactionRequest)
	r.ImmediateCallerId = m.ImmediateCallerId.CloneVT()
	r.Target = m.Target.CloneVT()
	r.Dtid = m.Dtid
	if rhs := m.EffectiveCallerId; rhs != nil {
		r.EffectiveCallerId = rhs.CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ReadTransactionRequest) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *ReadTransactionResponse) CloneVT() *ReadTransactionResponse {
	if m == nil {
		return (*ReadTransactionResponse)(nil)
	}
	r := new(ReadTransactionResponse)
	r.Metadata = m.Metadata.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ReadTransactionResponse) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *BeginExecuteRequest) CloneVT() *BeginExecuteRequest {
	if m == nil {
		return (*BeginExecuteRequest)(nil)
	}
	r := new(BeginExecuteRequest)
	r.ImmediateCallerId = m.ImmediateCallerId.CloneVT()
	r.Target = m.Target.CloneVT()
	r.Query = m.Query.CloneVT()
	r.Options = m.Options.CloneVT()
	if rhs := m.EffectiveCallerId; rhs != nil {
		r.EffectiveCallerId = rhs.CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *BeginExecuteRequest) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *BeginExecuteResponse) CloneVT() *BeginExecuteResponse {
	if m == nil {
		return (*BeginExecuteResponse)(nil)
	}
	r := new(BeginExecuteResponse)
	r.Result = m.Result.CloneVT()
	r.TransactionId = m.TransactionId
	if rhs := m.Error; rhs != nil {
		r.Error = rhs.CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *BeginExecuteResponse) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *BeginExecuteBatchRequest) CloneVT() *BeginExecuteBatchRequest {
	if m == nil {
		return (*BeginExecuteBatchRequest)(nil)
	}
	r := new(BeginExecuteBatchRequest)
	r.ImmediateCallerId = m.ImmediateCallerId.CloneVT()
	r.Target = m.Target.CloneVT()
	r.AsTransaction = m.AsTransaction
	r.Options = m.Options.CloneVT()
	if rhs := m.EffectiveCallerId; rhs != nil {
		r.EffectiveCallerId = rhs.CloneVT()
	}
	if rhs := m.Queries; rhs != nil {
		tmpContainer := make([]*BoundQuery, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Queries = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *BeginExecuteBatchRequest) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *BeginExecuteBatchResponse) CloneVT() *BeginExecuteBatchResponse {
	if m == nil {
		return (*BeginExecuteBatchResponse)(nil)
	}
	r := new(BeginExecuteBatchResponse)
	r.TransactionId = m.TransactionId
	if rhs := m.Error; rhs != nil {
		r.Error = rhs.CloneVT()
	}
	if rhs := m.Results; rhs != nil {
		tmpContainer := make([]*QueryResult, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Results = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *BeginExecuteBatchResponse) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *MessageStreamRequest) CloneVT() *MessageStreamRequest {
	if m == nil {
		return (*MessageStreamRequest)(nil)
	}
	r := new(MessageStreamRequest)
	r.ImmediateCallerId = m.ImmediateCallerId.CloneVT()
	r.Target = m.Target.CloneVT()
	r.Name = m.Name
	if rhs := m.EffectiveCallerId; rhs != nil {
		r.EffectiveCallerId = rhs.CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *MessageStreamRequest) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *MessageStreamResponse) CloneVT() *MessageStreamResponse {
	if m == nil {
		return (*MessageStreamResponse)(nil)
	}
	r := new(MessageStreamResponse)
	r.Result = m.Result.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *MessageStreamResponse) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *MessageAckRequest) CloneVT() *MessageAckRequest {
	if m == nil {
		return (*MessageAckRequest)(nil)
	}
	r := new(MessageAckRequest)
	r.ImmediateCallerId = m.ImmediateCallerId.CloneVT()
	r.Target = m.Target.CloneVT()
	r.Name = m.Name
	if rhs := m.EffectiveCallerId; rhs != nil {
		r.EffectiveCallerId = rhs.CloneVT()
	}
	if rhs := m.Ids; rhs != nil {
		tmpContainer := make([]*Value, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Ids = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *MessageAckRequest) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *MessageAckResponse) CloneVT() *MessageAckResponse {
	if m == nil {
		return (*MessageAckResponse)(nil)
	}
	r := new(MessageAckResponse)
	r.Result = m.Result.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *MessageAckResponse) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *SplitQueryRequest) CloneVT() *SplitQueryRequest {
	if m == nil {
		return (*SplitQueryRequest)(nil)
	}
	r := new(SplitQueryRequest)
	r.ImmediateCallerId = m.ImmediateCallerId.CloneVT()
	r.Target = m.Target.CloneVT()
	r.Query = m.Query.CloneVT()
	r.SplitCount = m.SplitCount
	r.NumRowsPerQueryPart = m.NumRowsPerQueryPart
	r.Algorithm = m.Algorithm
	if rhs := m.EffectiveCallerId; rhs != nil {
		r.EffectiveCallerId = rhs.CloneVT()
	}
	if rhs := m.SplitColumn; rhs != nil {
		tmpContainer := make([]string, len(rhs))
		copy(tmpContainer, rhs)
		r.SplitColumn = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *SplitQueryRequest) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *QuerySplit) CloneVT() *QuerySplit {
	if m == nil {
		return (*QuerySplit)(nil)
	}
	r := new(QuerySplit)
	r.Query = m.Query.CloneVT()
	r.RowCount = m.RowCount
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *QuerySplit) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *SplitQueryResponse) CloneVT() *SplitQueryResponse {
	if m == nil {
		return (*SplitQueryResponse)(nil)
	}
	r := new(SplitQueryResponse)
	if rhs := m.Queries; rhs != nil {
		tmpContainer := make([]*QuerySplit, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Queries = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *SplitQueryResponse) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *StreamHealthRequest) CloneVT() *StreamHealthRequest {
	if m == nil {
		return (*StreamHealthRequest)(nil)
	}
	r := new(StreamHealthRequest)
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *StreamHealthRequest) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *RealtimeStats) CloneVT() *RealtimeStats {
	if m == nil {
		return (*RealtimeStats)(nil)
	}
	r := new(RealtimeStats)
	r.HealthError = m.HealthError
	r.SecondsBehindMaster = m.SecondsBehindMaster
	r.BinlogPlayersCount = m.BinlogPlayersCount
	r.SecondsBehindMasterFilteredReplication = m.SecondsBehindMasterFilteredReplication
	r.CpuUsage = m.CpuUsage
	r.Qps = m.Qps
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RealtimeStats) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *AggregateStats) CloneVT() *AggregateStats {
	if m == nil {
		return (*AggregateStats)(nil)
	}
	r := new(AggregateStats)
	r.HealthyTabletCount = m.HealthyTabletCount
	r.UnhealthyTabletCount = m.UnhealthyTabletCount
	r.SecondsBehindMasterMin = m.SecondsBehindMasterMin
	r.SecondsBehindMasterMax = m.SecondsBehindMasterMax
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *AggregateStats) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *StreamHealthResponse) CloneVT() *StreamHealthResponse {
	if m == nil {
		return (*StreamHealthResponse)(nil)
	}
	r := new(StreamHealthResponse)
	r.Target = m.Target.CloneVT()
	r.Serving = m.Serving
	r.TabletExternallyReparentedTimestamp = m.TabletExternallyReparentedTimestamp
	r.RealtimeStats = m.RealtimeStats.CloneVT()
	r.AggregateStats = m.AggregateStats.CloneVT()
	if rhs := m.TabletAlias; rhs != nil {
		r.TabletAlias = rhs.CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *StreamHealthResponse) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *UpdateStreamRequest) CloneVT() *UpdateStreamRequest {
	if m == nil {
		return (*UpdateStreamRequest)(nil)
	}
	r := new(UpdateStreamRequest)
	r.ImmediateCallerId = m.ImmediateCallerId.CloneVT()
	r.Target = m.Target.CloneVT()
	r.Position = m.Position
	r.Timestamp = m.Timestamp
	if rhs := m.EffectiveCallerId; rhs != nil {
		r.EffectiveCallerId = rhs.CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *UpdateStreamRequest) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *UpdateStreamResponse) CloneVT() *UpdateStreamResponse {
	if m == nil {
		return (*UpdateStreamResponse)(nil)
	}
	r := new(UpdateStreamResponse)
	r.Event = m.Event.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *UpdateStreamResponse) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *TransactionMetadata) CloneVT() *TransactionMetadata {
	if m == nil {
		return (*TransactionMetadata)(nil)
	}
	r := new(TransactionMetadata)
	r.Dtid = m.Dtid
	r.State = m.State
	r.TimeCreated = m.TimeCreated
	if rhs := m.Participants; rhs != nil {
		tmpContainer := make([]*Target, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Participants = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *TransactionMetadata) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (this *Target) EqualVT(that *Target) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Keyspace != that.Keyspace {
		return false
	}
	if this.Shard != that.Shard {
		return false
	}
	if this.TabletType != that.TabletType {
		return false
	}
	if this.Cell != that.Cell {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Target) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*Target)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *VTGateCallerID) EqualVT(that *VTGateCallerID) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Username != that.Username {
		return false
	}
	if len(this.Groups) != len(that.Groups) {
		return false
	}
	for i, vx := range this.Groups {
		vy := that.Groups[i]
		if vx != vy {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *VTGateCallerID) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*VTGateCallerID)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *EventToken) EqualVT(that *EventToken) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Timestamp != that.Timestamp {
		return false
	}
	if this.Shard != that.Shard {
		return false
	}
	if this.Position != that.Position {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *EventToken) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*EventToken)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Value) EqualVT(that *Value) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Type != that.Type {
		return false
	}
	if string(this.Value) != string(that.Value) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Value) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*Value)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *BindVariable) EqualVT(that *BindVariable) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Type != that.Type {
		return false
	}
	if string(this.Value) != string(that.Value) {
		return false
	}
	if len(this.Values) != len(that.Values) {
		return false
	}
	for i, vx := range this.Values {
		vy := that.Values[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Value{}
			}
			if q == nil {
				q = &Value{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *BindVariable) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*BindVariable)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *BoundQuery) EqualVT(that *BoundQuery) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Sql != that.Sql {
		return false
	}
	if len(this.BindVariables) != len(that.BindVariables) {
		return false
	}
	for i, vx := range this.BindVariables {
		vy, ok := that.BindVariables[i]
		if !ok {
			return false
		}
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &BindVariable{}
			}
			if q == nil {
				q = &BindVariable{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *BoundQuery) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*BoundQuery)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ExecuteOptions) EqualVT(that *ExecuteOptions) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.IncludeEventToken != that.IncludeEventToken {
		return false
	}
	if !this.CompareEventToken.EqualVT(that.CompareEventToken) {
		return false
	}
	if this.IncludedFields != that.IncludedFields {
		return false
	}
	if this.ClientFoundRows != that.ClientFoundRows {
		return false
	}
	if this.Workload != that.Workload {
		return false
	}
	if this.SqlSelectLimit != that.SqlSelectLimit {
		return false
	}
	if this.TransactionIsolation != that.TransactionIsolation {
		return false
	}
	if this.SkipQueryPlanCache != that.SkipQueryPlanCache {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ExecuteOptions) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*ExecuteOptions)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Field) EqualVT(that *Field) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	if this.Type != that.Type {
		return false
	}
	if this.Table != that.Table {
		return false
	}
	if this.OrgTable != that.OrgTable {
		return false
	}
	if this.Database != that.Database {
		return false
	}
	if this.OrgName != that.OrgName {
		return false
	}
	if this.ColumnLength != that.ColumnLength {
		return false
	}
	if this.Charset != that.Charset {
		return false
	}
	if this.Decimals != that.Decimals {
		return false
	}
	if this.Flags != that.Flags {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Field) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*Field)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Row) EqualVT(that *Row) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Lengths) != len(that.Lengths) {
		return false
	}
	for i, vx := range this.Lengths {
		vy := that.Lengths[i]
		if vx != vy {
			return false
		}
	}
	if string(this.Values) != string(that.Values) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Row) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*Row)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ResultExtras) EqualVT(that *ResultExtras) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.EventToken.EqualVT(that.EventToken) {
		return false
	}
	if this.Fresher != that.Fresher {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ResultExtras) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*ResultExtras)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *QueryResult) EqualVT(that *QueryResult) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Fields) != len(that.Fields) {
		return false
	}
	for i, vx := range this.Fields {
		vy := that.Fields[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Field{}
			}
			if q == nil {
				q = &Field{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if this.RowsAffected != that.RowsAffected {
		return false
	}
	if this.InsertId != that.InsertId {
		return false
	}
	if len(this.Rows) != len(that.Rows) {
		return false
	}
	for i, vx := range this.Rows {
		vy := that.Rows[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Row{}
			}
			if q == nil {
				q = &Row{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if !this.Extras.EqualVT(that.Extras) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *QueryResult) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*QueryResult)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *QueryWarning) EqualVT(that *QueryWarning) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Code != that.Code {
		return false
	}
	if this.Message != that.Message {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *QueryWarning) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*QueryWarning)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *StreamEvent_Statement) EqualVT(that *StreamEvent_Statement) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Category != that.Category {
		return false
	}
	if this.TableName != that.TableName {
		return false
	}
	if len(this.PrimaryKeyFields) != len(that.PrimaryKeyFields) {
		return false
	}
	for i, vx := range this.PrimaryKeyFields {
		vy := that.PrimaryKeyFields[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Field{}
			}
			if q == nil {
				q = &Field{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if len(this.PrimaryKeyValues) != len(that.PrimaryKeyValues) {
		return false
	}
	for i, vx := range this.PrimaryKeyValues {
		vy := that.PrimaryKeyValues[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Row{}
			}
			if q == nil {
				q = &Row{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if string(this.Sql) != string(that.Sql) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *StreamEvent_Statement) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*StreamEvent_Statement)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *StreamEvent) EqualVT(that *StreamEvent) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Statements) != len(that.Statements) {
		return false
	}
	for i, vx := range this.Statements {
		vy := that.Statements[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &StreamEvent_Statement{}
			}
			if q == nil {
				q = &StreamEvent_Statement{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if !this.EventToken.EqualVT(that.EventToken) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *StreamEvent) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*StreamEvent)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ExecuteRequest) EqualVT(that *ExecuteRequest) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.EffectiveCallerId.EqualVT(that.EffectiveCallerId) {
		return false
	}
	if !this.ImmediateCallerId.EqualVT(that.ImmediateCallerId) {
		return false
	}
	if !this.Target.EqualVT(that.Target) {
		return false
	}
	if !this.Query.EqualVT(that.Query) {
		return false
	}
	if this.TransactionId != that.TransactionId {
		return false
	}
	if !this.Options.EqualVT(that.Options) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ExecuteRequest) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*ExecuteRequest)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ExecuteResponse) EqualVT(that *ExecuteResponse) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Result.EqualVT(that.Result) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ExecuteResponse) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*ExecuteResponse)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ResultWithError) EqualVT(that *ResultWithError) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Error.EqualVT(that.Error) {
		return false
	}
	if !this.Result.EqualVT(that.Result) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ResultWithError) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*ResultWithError)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ExecuteBatchRequest) EqualVT(that *ExecuteBatchRequest) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.EffectiveCallerId.EqualVT(that.EffectiveCallerId) {
		return false
	}
	if !this.ImmediateCallerId.EqualVT(that.ImmediateCallerId) {
		return false
	}
	if !this.Target.EqualVT(that.Target) {
		return false
	}
	if len(this.Queries) != len(that.Queries) {
		return false
	}
	for i, vx := range this.Queries {
		vy := that.Queries[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &BoundQuery{}
			}
			if q == nil {
				q = &BoundQuery{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if this.AsTransaction != that.AsTransaction {
		return false
	}
	if this.TransactionId != that.TransactionId {
		return false
	}
	if !this.Options.EqualVT(that.Options) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ExecuteBatchRequest) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*ExecuteBatchRequest)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ExecuteBatchResponse) EqualVT(that *ExecuteBatchResponse) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Results) != len(that.Results) {
		return false
	}
	for i, vx := range this.Results {
		vy := that.Results[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &QueryResult{}
			}
			if q == nil {
				q = &QueryResult{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ExecuteBatchResponse) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*ExecuteBatchResponse)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *StreamExecuteRequest) EqualVT(that *StreamExecuteRequest) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.EffectiveCallerId.EqualVT(that.EffectiveCallerId) {
		return false
	}
	if !this.ImmediateCallerId.EqualVT(that.ImmediateCallerId) {
		return false
	}
	if !this.Target.EqualVT(that.Target) {
		return false
	}
	if !this.Query.EqualVT(that.Query) {
		return false
	}
	if !this.Options.EqualVT(that.Options) {
		return false
	}
	if this.TransactionId != that.TransactionId {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *StreamExecuteRequest) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*StreamExecuteRequest)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *StreamExecuteResponse) EqualVT(that *StreamExecuteResponse) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Result.EqualVT(that.Result) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *StreamExecuteResponse) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*StreamExecuteResponse)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *BeginRequest) EqualVT(that *BeginRequest) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.EffectiveCallerId.EqualVT(that.EffectiveCallerId) {
		return false
	}
	if !this.ImmediateCallerId.EqualVT(that.ImmediateCallerId) {
		return false
	}
	if !this.Target.EqualVT(that.Target) {
		return false
	}
	if !this.Options.EqualVT(that.Options) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *BeginRequest) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*BeginRequest)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *BeginResponse) EqualVT(that *BeginResponse) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.TransactionId != that.TransactionId {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *BeginResponse) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*BeginResponse)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CommitRequest) EqualVT(that *CommitRequest) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.EffectiveCallerId.EqualVT(that.EffectiveCallerId) {
		return false
	}
	if !this.ImmediateCallerId.EqualVT(that.ImmediateCallerId) {
		return false
	}
	if !this.Target.EqualVT(that.Target) {
		return false
	}
	if this.TransactionId != that.TransactionId {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CommitRequest) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*CommitRequest)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CommitResponse) EqualVT(that *CommitResponse) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CommitResponse) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*CommitResponse)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RollbackRequest) EqualVT(that *RollbackRequest) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.EffectiveCallerId.EqualVT(that.EffectiveCallerId) {
		return false
	}
	if !this.ImmediateCallerId.EqualVT(that.ImmediateCallerId) {
		return false
	}
	if !this.Target.EqualVT(that.Target) {
		return false
	}
	if this.TransactionId != that.TransactionId {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RollbackRequest) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*RollbackRequest)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RollbackResponse) EqualVT(that *RollbackResponse) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RollbackResponse) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*RollbackResponse)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *PrepareRequest) EqualVT(that *PrepareRequest) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.EffectiveCallerId.EqualVT(that.EffectiveCallerId) {
		return false
	}
	if !this.ImmediateCallerId.EqualVT(that.ImmediateCallerId) {
		return false
	}
	if !this.Target.EqualVT(that.Target) {
		return false
	}
	if this.TransactionId != that.TransactionId {
		return false
	}
	if this.Dtid != that.Dtid {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *PrepareRequest) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*PrepareRequest)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *PrepareResponse) EqualVT(that *PrepareResponse) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *PrepareResponse) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*PrepareResponse)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CommitPreparedRequest) EqualVT(that *CommitPreparedRequest) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.EffectiveCallerId.EqualVT(that.EffectiveCallerId) {
		return false
	}
	if !this.ImmediateCallerId.EqualVT(that.ImmediateCallerId) {
		return false
	}
	if !this.Target.EqualVT(that.Target) {
		return false
	}
	if this.Dtid != that.Dtid {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CommitPreparedRequest) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*CommitPreparedRequest)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CommitPreparedResponse) EqualVT(that *CommitPreparedResponse) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CommitPreparedResponse) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*CommitPreparedResponse)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RollbackPreparedRequest) EqualVT(that *RollbackPreparedRequest) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.EffectiveCallerId.EqualVT(that.EffectiveCallerId) {
		return false
	}
	if !this.ImmediateCallerId.EqualVT(that.ImmediateCallerId) {
		return false
	}
	if !this.Target.EqualVT(that.Target) {
		return false
	}
	if this.TransactionId != that.TransactionId {
		return false
	}
	if this.Dtid != that.Dtid {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RollbackPreparedRequest) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*RollbackPreparedRequest)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RollbackPreparedResponse) EqualVT(that *RollbackPreparedResponse) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RollbackPreparedResponse) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*RollbackPreparedResponse)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CreateTransactionRequest) EqualVT(that *CreateTransactionRequest) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.EffectiveCallerId.EqualVT(that.EffectiveCallerId) {
		return false
	}
	if !this.ImmediateCallerId.EqualVT(that.ImmediateCallerId) {
		return false
	}
	if !this.Target.EqualVT(that.Target) {
		return false
	}
	if this.Dtid != that.Dtid {
		return false
	}
	if len(this.Participants) != len(that.Participants) {
		return false
	}
	for i, vx := range this.Participants {
		vy := that.Participants[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Target{}
			}
			if q == nil {
				q = &Target{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CreateTransactionRequest) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*CreateTransactionRequest)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *CreateTransactionResponse) EqualVT(that *CreateTransactionResponse) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *CreateTransactionResponse) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*CreateTransactionResponse)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *StartCommitRequest) EqualVT(that *StartCommitRequest) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.EffectiveCallerId.EqualVT(that.EffectiveCallerId) {
		return false
	}
	if !this.ImmediateCallerId.EqualVT(that.ImmediateCallerId) {
		return false
	}
	if !this.Target.EqualVT(that.Target) {
		return false
	}
	if this.TransactionId != that.TransactionId {
		return false
	}
	if this.Dtid != that.Dtid {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *StartCommitRequest) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*StartCommitRequest)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *StartCommitResponse) EqualVT(that *StartCommitResponse) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *StartCommitResponse) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*StartCommitResponse)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *SetRollbackRequest) EqualVT(that *SetRollbackRequest) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.EffectiveCallerId.EqualVT(that.EffectiveCallerId) {
		return false
	}
	if !this.ImmediateCallerId.EqualVT(that.ImmediateCallerId) {
		return false
	}
	if !this.Target.EqualVT(that.Target) {
		return false
	}
	if this.TransactionId != that.TransactionId {
		return false
	}
	if this.Dtid != that.Dtid {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *SetRollbackRequest) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*SetRollbackRequest)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *SetRollbackResponse) EqualVT(that *SetRollbackResponse) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *SetRollbackResponse) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*SetRollbackResponse)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ConcludeTransactionRequest) EqualVT(that *ConcludeTransactionRequest) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.EffectiveCallerId.EqualVT(that.EffectiveCallerId) {
		return false
	}
	if !this.ImmediateCallerId.EqualVT(that.ImmediateCallerId) {
		return false
	}
	if !this.Target.EqualVT(that.Target) {
		return false
	}
	if this.Dtid != that.Dtid {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ConcludeTransactionRequest) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*ConcludeTransactionRequest)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ConcludeTransactionResponse) EqualVT(that *ConcludeTransactionResponse) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ConcludeTransactionResponse) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*ConcludeTransactionResponse)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ReadTransactionRequest) EqualVT(that *ReadTransactionRequest) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.EffectiveCallerId.EqualVT(that.EffectiveCallerId) {
		return false
	}
	if !this.ImmediateCallerId.EqualVT(that.ImmediateCallerId) {
		return false
	}
	if !this.Target.EqualVT(that.Target) {
		return false
	}
	if this.Dtid != that.Dtid {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ReadTransactionRequest) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*ReadTransactionRequest)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ReadTransactionResponse) EqualVT(that *ReadTransactionResponse) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Metadata.EqualVT(that.Metadata) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ReadTransactionResponse) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*ReadTransactionResponse)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *BeginExecuteRequest) EqualVT(that *BeginExecuteRequest) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.EffectiveCallerId.EqualVT(that.EffectiveCallerId) {
		return false
	}
	if !this.ImmediateCallerId.EqualVT(that.ImmediateCallerId) {
		return false
	}
	if !this.Target.EqualVT(that.Target) {
		return false
	}
	if !this.Query.EqualVT(that.Query) {
		return false
	}
	if !this.Options.EqualVT(that.Options) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *BeginExecuteRequest) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*BeginExecuteRequest)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *BeginExecuteResponse) EqualVT(that *BeginExecuteResponse) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Error.EqualVT(that.Error) {
		return false
	}
	if !this.Result.EqualVT(that.Result) {
		return false
	}
	if this.TransactionId != that.TransactionId {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *BeginExecuteResponse) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*BeginExecuteResponse)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *BeginExecuteBatchRequest) EqualVT(that *BeginExecuteBatchRequest) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.EffectiveCallerId.EqualVT(that.EffectiveCallerId) {
		return false
	}
	if !this.ImmediateCallerId.EqualVT(that.ImmediateCallerId) {
		return false
	}
	if !this.Target.EqualVT(that.Target) {
		return false
	}
	if len(this.Queries) != len(that.Queries) {
		return false
	}
	for i, vx := range this.Queries {
		vy := that.Queries[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &BoundQuery{}
			}
			if q == nil {
				q = &BoundQuery{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if this.AsTransaction != that.AsTransaction {
		return false
	}
	if !this.Options.EqualVT(that.Options) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *BeginExecuteBatchRequest) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*BeginExecuteBatchRequest)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *BeginExecuteBatchResponse) EqualVT(that *BeginExecuteBatchResponse) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Error.EqualVT(that.Error) {
		return false
	}
	if len(this.Results) != len(that.Results) {
		return false
	}
	for i, vx := range this.Results {
		vy := that.Results[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &QueryResult{}
			}
			if q == nil {
				q = &QueryResult{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if this.TransactionId != that.TransactionId {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *BeginExecuteBatchResponse) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*BeginExecuteBatchResponse)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *MessageStreamRequest) EqualVT(that *MessageStreamRequest) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.EffectiveCallerId.EqualVT(that.EffectiveCallerId) {
		return false
	}
	if !this.ImmediateCallerId.EqualVT(that.ImmediateCallerId) {
		return false
	}
	if !this.Target.EqualVT(that.Target) {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *MessageStreamRequest) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*MessageStreamRequest)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *MessageStreamResponse) EqualVT(that *MessageStreamResponse) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Result.EqualVT(that.Result) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *MessageStreamResponse) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*MessageStreamResponse)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *MessageAckRequest) EqualVT(that *MessageAckRequest) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.EffectiveCallerId.EqualVT(that.EffectiveCallerId) {
		return false
	}
	if !this.ImmediateCallerId.EqualVT(that.ImmediateCallerId) {
		return false
	}
	if !this.Target.EqualVT(that.Target) {
		return false
	}
	if this.Name != that.Name {
		return false
	}
	if len(this.Ids) != len(that.Ids) {
		return false
	}
	for i, vx := range this.Ids {
		vy := that.Ids[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Value{}
			}
			if q == nil {
				q = &Value{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *MessageAckRequest) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*MessageAckRequest)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *MessageAckResponse) EqualVT(that *MessageAckResponse) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Result.EqualVT(that.Result) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *MessageAckResponse) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*MessageAckResponse)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *SplitQueryRequest) EqualVT(that *SplitQueryRequest) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.EffectiveCallerId.EqualVT(that.EffectiveCallerId) {
		return false
	}
	if !this.ImmediateCallerId.EqualVT(that.ImmediateCallerId) {
		return false
	}
	if !this.Target.EqualVT(that.Target) {
		return false
	}
	if !this.Query.EqualVT(that.Query) {
		return false
	}
	if len(this.SplitColumn) != len(that.SplitColumn) {
		return false
	}
	for i, vx := range this.SplitColumn {
		vy := that.SplitColumn[i]
		if vx != vy {
			return false
		}
	}
	if this.SplitCount != that.SplitCount {
		return false
	}
	if this.NumRowsPerQueryPart != that.NumRowsPerQueryPart {
		return false
	}
	if this.Algorithm != that.Algorithm {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *SplitQueryRequest) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*SplitQueryRequest)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *QuerySplit) EqualVT(that *QuerySplit) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Query.EqualVT(that.Query) {
		return false
	}
	if this.RowCount != that.RowCount {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *QuerySplit) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*QuerySplit)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *SplitQueryResponse) EqualVT(that *SplitQueryResponse) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Queries) != len(that.Queries) {
		return false
	}
	for i, vx := range this.Queries {
		vy := that.Queries[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &QuerySplit{}
			}
			if q == nil {
				q = &QuerySplit{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *SplitQueryResponse) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*SplitQueryResponse)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *StreamHealthRequest) EqualVT(that *StreamHealthRequest) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *StreamHealthRequest) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*StreamHealthRequest)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RealtimeStats) EqualVT(that *RealtimeStats) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.HealthError != that.HealthError {
		return false
	}
	if this.SecondsBehindMaster != that.SecondsBehindMaster {
		return false
	}
	if this.BinlogPlayersCount != that.BinlogPlayersCount {
		return false
	}
	if this.SecondsBehindMasterFilteredReplication != that.SecondsBehindMasterFilteredReplication {
		return false
	}
	if this.CpuUsage != that.CpuUsage {
		return false
	}
	if this.Qps != that.Qps {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RealtimeStats) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*RealtimeStats)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *AggregateStats) EqualVT(that *AggregateStats) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.HealthyTabletCount != that.HealthyTabletCount {
		return false
	}
	if this.UnhealthyTabletCount != that.UnhealthyTabletCount {
		return false
	}
	if this.SecondsBehindMasterMin != that.SecondsBehindMasterMin {
		return false
	}
	if this.SecondsBehindMasterMax != that.SecondsBehindMasterMax {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *AggregateStats) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*AggregateStats)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *StreamHealthResponse) EqualVT(that *StreamHealthResponse) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Target.EqualVT(that.Target) {
		return false
	}
	if this.Serving != that.Serving {
		return false
	}
	if this.TabletExternallyReparentedTimestamp != that.TabletExternallyReparentedTimestamp {
		return false
	}
	if !this.RealtimeStats.EqualVT(that.RealtimeStats) {
		return false
	}
	if !this.TabletAlias.EqualVT(that.TabletAlias) {
		return false
	}
	if !this.AggregateStats.EqualVT(that.AggregateStats) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *StreamHealthResponse) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*StreamHealthResponse)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *UpdateStreamRequest) EqualVT(that *UpdateStreamRequest) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.EffectiveCallerId.EqualVT(that.EffectiveCallerId) {
		return false
	}
	if !this.ImmediateCallerId.EqualVT(that.ImmediateCallerId) {
		return false
	}
	if !this.Target.EqualVT(that.Target) {
		return false
	}
	if this.Position != that.Position {
		return false
	}
	if this.Timestamp != that.Timestamp {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *UpdateStreamRequest) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*UpdateStreamRequest)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *UpdateStreamResponse) EqualVT(that *UpdateStreamResponse) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Event.EqualVT(that.Event) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *UpdateStreamResponse) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*UpdateStreamResponse)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *TransactionMetadata) EqualVT(that *TransactionMetadata) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Dtid != that.Dtid {
		return false
	}
	if this.State != that.State {
		return false
	}
	if this.TimeCreated != that.TimeCreated {
		return false
	}
	if len(this.Participants) != len(that.Participants) {
		return false
	}
	for i, vx := range this.Participants {
		vy := that.Participants[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Target{}
			}
			if q == nil {
				q = &Target{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *TransactionMetadata) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*TransactionMetadata)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}

// MarshalProtoJSON marshals the MySqlFlag to JSON.
func (x MySqlFlag) MarshalProtoJSON(s *json.MarshalState) {
	s.WriteEnumString(int32(x), MySqlFlag_name)
}

// MarshalText marshals the MySqlFlag to text.
func (x MySqlFlag) MarshalText() ([]byte, error) {
	return []byte(json.GetEnumString(int32(x), MySqlFlag_name)), nil
}

// MarshalJSON marshals the MySqlFlag to JSON.
func (x MySqlFlag) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the MySqlFlag from JSON.
func (x *MySqlFlag) UnmarshalProtoJSON(s *json.UnmarshalState) {
	v := s.ReadEnum(MySqlFlag_value)
	if err := s.Err(); err != nil {
		s.SetErrorf("could not read MySqlFlag enum: %v", err)
		return
	}
	*x = MySqlFlag(v)
}

// UnmarshalText unmarshals the MySqlFlag from text.
func (x *MySqlFlag) UnmarshalText(b []byte) error {
	i, err := json.ParseEnumString(string(b), MySqlFlag_value)
	if err != nil {
		return err
	}
	*x = MySqlFlag(i)
	return nil
}

// UnmarshalJSON unmarshals the MySqlFlag from JSON.
func (x *MySqlFlag) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the Flag to JSON.
func (x Flag) MarshalProtoJSON(s *json.MarshalState) {
	s.WriteEnumString(int32(x), Flag_name)
}

// MarshalText marshals the Flag to text.
func (x Flag) MarshalText() ([]byte, error) {
	return []byte(json.GetEnumString(int32(x), Flag_name)), nil
}

// MarshalJSON marshals the Flag to JSON.
func (x Flag) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the Flag from JSON.
func (x *Flag) UnmarshalProtoJSON(s *json.UnmarshalState) {
	v := s.ReadEnum(Flag_value)
	if err := s.Err(); err != nil {
		s.SetErrorf("could not read Flag enum: %v", err)
		return
	}
	*x = Flag(v)
}

// UnmarshalText unmarshals the Flag from text.
func (x *Flag) UnmarshalText(b []byte) error {
	i, err := json.ParseEnumString(string(b), Flag_value)
	if err != nil {
		return err
	}
	*x = Flag(i)
	return nil
}

// UnmarshalJSON unmarshals the Flag from JSON.
func (x *Flag) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the Type to JSON.
func (x Type) MarshalProtoJSON(s *json.MarshalState) {
	s.WriteEnumString(int32(x), Type_name)
}

// MarshalText marshals the Type to text.
func (x Type) MarshalText() ([]byte, error) {
	return []byte(json.GetEnumString(int32(x), Type_name)), nil
}

// MarshalJSON marshals the Type to JSON.
func (x Type) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the Type from JSON.
func (x *Type) UnmarshalProtoJSON(s *json.UnmarshalState) {
	v := s.ReadEnum(Type_value)
	if err := s.Err(); err != nil {
		s.SetErrorf("could not read Type enum: %v", err)
		return
	}
	*x = Type(v)
}

// UnmarshalText unmarshals the Type from text.
func (x *Type) UnmarshalText(b []byte) error {
	i, err := json.ParseEnumString(string(b), Type_value)
	if err != nil {
		return err
	}
	*x = Type(i)
	return nil
}

// UnmarshalJSON unmarshals the Type from JSON.
func (x *Type) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the TransactionState to JSON.
func (x TransactionState) MarshalProtoJSON(s *json.MarshalState) {
	s.WriteEnumString(int32(x), TransactionState_name)
}

// MarshalText marshals the TransactionState to text.
func (x TransactionState) MarshalText() ([]byte, error) {
	return []byte(json.GetEnumString(int32(x), TransactionState_name)), nil
}

// MarshalJSON marshals the TransactionState to JSON.
func (x TransactionState) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the TransactionState from JSON.
func (x *TransactionState) UnmarshalProtoJSON(s *json.UnmarshalState) {
	v := s.ReadEnum(TransactionState_value)
	if err := s.Err(); err != nil {
		s.SetErrorf("could not read TransactionState enum: %v", err)
		return
	}
	*x = TransactionState(v)
}

// UnmarshalText unmarshals the TransactionState from text.
func (x *TransactionState) UnmarshalText(b []byte) error {
	i, err := json.ParseEnumString(string(b), TransactionState_value)
	if err != nil {
		return err
	}
	*x = TransactionState(i)
	return nil
}

// UnmarshalJSON unmarshals the TransactionState from JSON.
func (x *TransactionState) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the Target message to JSON.
func (x *Target) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Keyspace != "" || s.HasField("keyspace") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("keyspace")
		s.WriteString(x.Keyspace)
	}
	if x.Shard != "" || s.HasField("shard") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("shard")
		s.WriteString(x.Shard)
	}
	if x.TabletType != 0 || s.HasField("tabletType") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("tabletType")
		x.TabletType.MarshalProtoJSON(s)
	}
	if x.Cell != "" || s.HasField("cell") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("cell")
		s.WriteString(x.Cell)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the Target to JSON.
func (x *Target) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the Target message from JSON.
func (x *Target) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "keyspace":
			s.AddField("keyspace")
			x.Keyspace = s.ReadString()
		case "shard":
			s.AddField("shard")
			x.Shard = s.ReadString()
		case "tablet_type", "tabletType":
			s.AddField("tablet_type")
			x.TabletType.UnmarshalProtoJSON(s)
		case "cell":
			s.AddField("cell")
			x.Cell = s.ReadString()
		}
	})
}

// UnmarshalJSON unmarshals the Target from JSON.
func (x *Target) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the VTGateCallerID message to JSON.
func (x *VTGateCallerID) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Username != "" || s.HasField("username") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("username")
		s.WriteString(x.Username)
	}
	if len(x.Groups) > 0 || s.HasField("groups") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("groups")
		s.WriteStringArray(x.Groups)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the VTGateCallerID to JSON.
func (x *VTGateCallerID) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the VTGateCallerID message from JSON.
func (x *VTGateCallerID) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "username":
			s.AddField("username")
			x.Username = s.ReadString()
		case "groups":
			s.AddField("groups")
			if s.ReadNil() {
				x.Groups = nil
				return
			}
			x.Groups = s.ReadStringArray()
		}
	})
}

// UnmarshalJSON unmarshals the VTGateCallerID from JSON.
func (x *VTGateCallerID) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the EventToken message to JSON.
func (x *EventToken) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Timestamp != 0 || s.HasField("timestamp") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("timestamp")
		s.WriteInt64(x.Timestamp)
	}
	if x.Shard != "" || s.HasField("shard") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("shard")
		s.WriteString(x.Shard)
	}
	if x.Position != "" || s.HasField("position") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("position")
		s.WriteString(x.Position)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the EventToken to JSON.
func (x *EventToken) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the EventToken message from JSON.
func (x *EventToken) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "timestamp":
			s.AddField("timestamp")
			x.Timestamp = s.ReadInt64()
		case "shard":
			s.AddField("shard")
			x.Shard = s.ReadString()
		case "position":
			s.AddField("position")
			x.Position = s.ReadString()
		}
	})
}

// UnmarshalJSON unmarshals the EventToken from JSON.
func (x *EventToken) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the Value message to JSON.
func (x *Value) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Type != 0 || s.HasField("type") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("type")
		x.Type.MarshalProtoJSON(s)
	}
	if len(x.Value) > 0 || s.HasField("value") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("value")
		s.WriteBytes(x.Value)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the Value to JSON.
func (x *Value) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the Value message from JSON.
func (x *Value) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "type":
			s.AddField("type")
			x.Type.UnmarshalProtoJSON(s)
		case "value":
			s.AddField("value")
			x.Value = s.ReadBytes()
		}
	})
}

// UnmarshalJSON unmarshals the Value from JSON.
func (x *Value) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the BindVariable message to JSON.
func (x *BindVariable) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Type != 0 || s.HasField("type") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("type")
		x.Type.MarshalProtoJSON(s)
	}
	if len(x.Value) > 0 || s.HasField("value") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("value")
		s.WriteBytes(x.Value)
	}
	if len(x.Values) > 0 || s.HasField("values") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("values")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.Values {
			s.WriteMoreIf(&wroteElement)
			element.MarshalProtoJSON(s.WithField("values"))
		}
		s.WriteArrayEnd()
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the BindVariable to JSON.
func (x *BindVariable) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the BindVariable message from JSON.
func (x *BindVariable) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "type":
			s.AddField("type")
			x.Type.UnmarshalProtoJSON(s)
		case "value":
			s.AddField("value")
			x.Value = s.ReadBytes()
		case "values":
			s.AddField("values")
			if s.ReadNil() {
				x.Values = nil
				return
			}
			s.ReadArray(func() {
				if s.ReadNil() {
					x.Values = append(x.Values, nil)
					return
				}
				v := &Value{}
				v.UnmarshalProtoJSON(s.WithField("values", false))
				if s.Err() != nil {
					return
				}
				x.Values = append(x.Values, v)
			})
		}
	})
}

// UnmarshalJSON unmarshals the BindVariable from JSON.
func (x *BindVariable) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the BoundQuery_BindVariablesEntry message to JSON.
func (x *BoundQuery_BindVariablesEntry) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Key != "" || s.HasField("key") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("key")
		s.WriteString(x.Key)
	}
	if x.Value != nil || s.HasField("value") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("value")
		x.Value.MarshalProtoJSON(s.WithField("value"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the BoundQuery_BindVariablesEntry to JSON.
func (x *BoundQuery_BindVariablesEntry) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the BoundQuery_BindVariablesEntry message from JSON.
func (x *BoundQuery_BindVariablesEntry) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "key":
			s.AddField("key")
			x.Key = s.ReadString()
		case "value":
			if s.ReadNil() {
				x.Value = nil
				return
			}
			x.Value = &BindVariable{}
			x.Value.UnmarshalProtoJSON(s.WithField("value", true))
		}
	})
}

// UnmarshalJSON unmarshals the BoundQuery_BindVariablesEntry from JSON.
func (x *BoundQuery_BindVariablesEntry) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the BoundQuery message to JSON.
func (x *BoundQuery) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Sql != "" || s.HasField("sql") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("sql")
		s.WriteString(x.Sql)
	}
	if x.BindVariables != nil || s.HasField("bindVariables") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("bindVariables")
		s.WriteObjectStart()
		var wroteElement bool
		for k, v := range x.BindVariables {
			s.WriteMoreIf(&wroteElement)
			s.WriteObjectStringField(k)
			v.MarshalProtoJSON(s.WithField("bindVariables"))
		}
		s.WriteObjectEnd()
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the BoundQuery to JSON.
func (x *BoundQuery) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the BoundQuery message from JSON.
func (x *BoundQuery) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "sql":
			s.AddField("sql")
			x.Sql = s.ReadString()
		case "bind_variables", "bindVariables":
			s.AddField("bind_variables")
			if s.ReadNil() {
				x.BindVariables = nil
				return
			}
			x.BindVariables = make(map[string]*BindVariable)
			s.ReadStringMap(func(key string) {
				var v BindVariable
				v.UnmarshalProtoJSON(s)
				x.BindVariables[key] = &v
			})
		}
	})
}

// UnmarshalJSON unmarshals the BoundQuery from JSON.
func (x *BoundQuery) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the ExecuteOptions_IncludedFields to JSON.
func (x ExecuteOptions_IncludedFields) MarshalProtoJSON(s *json.MarshalState) {
	s.WriteEnumString(int32(x), ExecuteOptions_IncludedFields_name)
}

// MarshalText marshals the ExecuteOptions_IncludedFields to text.
func (x ExecuteOptions_IncludedFields) MarshalText() ([]byte, error) {
	return []byte(json.GetEnumString(int32(x), ExecuteOptions_IncludedFields_name)), nil
}

// MarshalJSON marshals the ExecuteOptions_IncludedFields to JSON.
func (x ExecuteOptions_IncludedFields) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the ExecuteOptions_IncludedFields from JSON.
func (x *ExecuteOptions_IncludedFields) UnmarshalProtoJSON(s *json.UnmarshalState) {
	v := s.ReadEnum(ExecuteOptions_IncludedFields_value)
	if err := s.Err(); err != nil {
		s.SetErrorf("could not read IncludedFields enum: %v", err)
		return
	}
	*x = ExecuteOptions_IncludedFields(v)
}

// UnmarshalText unmarshals the ExecuteOptions_IncludedFields from text.
func (x *ExecuteOptions_IncludedFields) UnmarshalText(b []byte) error {
	i, err := json.ParseEnumString(string(b), ExecuteOptions_IncludedFields_value)
	if err != nil {
		return err
	}
	*x = ExecuteOptions_IncludedFields(i)
	return nil
}

// UnmarshalJSON unmarshals the ExecuteOptions_IncludedFields from JSON.
func (x *ExecuteOptions_IncludedFields) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the ExecuteOptions_Workload to JSON.
func (x ExecuteOptions_Workload) MarshalProtoJSON(s *json.MarshalState) {
	s.WriteEnumString(int32(x), ExecuteOptions_Workload_name)
}

// MarshalText marshals the ExecuteOptions_Workload to text.
func (x ExecuteOptions_Workload) MarshalText() ([]byte, error) {
	return []byte(json.GetEnumString(int32(x), ExecuteOptions_Workload_name)), nil
}

// MarshalJSON marshals the ExecuteOptions_Workload to JSON.
func (x ExecuteOptions_Workload) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the ExecuteOptions_Workload from JSON.
func (x *ExecuteOptions_Workload) UnmarshalProtoJSON(s *json.UnmarshalState) {
	v := s.ReadEnum(ExecuteOptions_Workload_value)
	if err := s.Err(); err != nil {
		s.SetErrorf("could not read Workload enum: %v", err)
		return
	}
	*x = ExecuteOptions_Workload(v)
}

// UnmarshalText unmarshals the ExecuteOptions_Workload from text.
func (x *ExecuteOptions_Workload) UnmarshalText(b []byte) error {
	i, err := json.ParseEnumString(string(b), ExecuteOptions_Workload_value)
	if err != nil {
		return err
	}
	*x = ExecuteOptions_Workload(i)
	return nil
}

// UnmarshalJSON unmarshals the ExecuteOptions_Workload from JSON.
func (x *ExecuteOptions_Workload) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the ExecuteOptions_TransactionIsolation to JSON.
func (x ExecuteOptions_TransactionIsolation) MarshalProtoJSON(s *json.MarshalState) {
	s.WriteEnumString(int32(x), ExecuteOptions_TransactionIsolation_name)
}

// MarshalText marshals the ExecuteOptions_TransactionIsolation to text.
func (x ExecuteOptions_TransactionIsolation) MarshalText() ([]byte, error) {
	return []byte(json.GetEnumString(int32(x), ExecuteOptions_TransactionIsolation_name)), nil
}

// MarshalJSON marshals the ExecuteOptions_TransactionIsolation to JSON.
func (x ExecuteOptions_TransactionIsolation) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the ExecuteOptions_TransactionIsolation from JSON.
func (x *ExecuteOptions_TransactionIsolation) UnmarshalProtoJSON(s *json.UnmarshalState) {
	v := s.ReadEnum(ExecuteOptions_TransactionIsolation_value)
	if err := s.Err(); err != nil {
		s.SetErrorf("could not read TransactionIsolation enum: %v", err)
		return
	}
	*x = ExecuteOptions_TransactionIsolation(v)
}

// UnmarshalText unmarshals the ExecuteOptions_TransactionIsolation from text.
func (x *ExecuteOptions_TransactionIsolation) UnmarshalText(b []byte) error {
	i, err := json.ParseEnumString(string(b), ExecuteOptions_TransactionIsolation_value)
	if err != nil {
		return err
	}
	*x = ExecuteOptions_TransactionIsolation(i)
	return nil
}

// UnmarshalJSON unmarshals the ExecuteOptions_TransactionIsolation from JSON.
func (x *ExecuteOptions_TransactionIsolation) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the ExecuteOptions message to JSON.
func (x *ExecuteOptions) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.IncludeEventToken || s.HasField("includeEventToken") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("includeEventToken")
		s.WriteBool(x.IncludeEventToken)
	}
	if x.CompareEventToken != nil || s.HasField("compareEventToken") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("compareEventToken")
		x.CompareEventToken.MarshalProtoJSON(s.WithField("compareEventToken"))
	}
	if x.IncludedFields != 0 || s.HasField("includedFields") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("includedFields")
		x.IncludedFields.MarshalProtoJSON(s)
	}
	if x.ClientFoundRows || s.HasField("clientFoundRows") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("clientFoundRows")
		s.WriteBool(x.ClientFoundRows)
	}
	if x.Workload != 0 || s.HasField("workload") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("workload")
		x.Workload.MarshalProtoJSON(s)
	}
	if x.SqlSelectLimit != 0 || s.HasField("sqlSelectLimit") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("sqlSelectLimit")
		s.WriteInt64(x.SqlSelectLimit)
	}
	if x.TransactionIsolation != 0 || s.HasField("transactionIsolation") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("transactionIsolation")
		x.TransactionIsolation.MarshalProtoJSON(s)
	}
	if x.SkipQueryPlanCache || s.HasField("skipQueryPlanCache") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("skipQueryPlanCache")
		s.WriteBool(x.SkipQueryPlanCache)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the ExecuteOptions to JSON.
func (x *ExecuteOptions) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the ExecuteOptions message from JSON.
func (x *ExecuteOptions) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "include_event_token", "includeEventToken":
			s.AddField("include_event_token")
			x.IncludeEventToken = s.ReadBool()
		case "compare_event_token", "compareEventToken":
			if s.ReadNil() {
				x.CompareEventToken = nil
				return
			}
			x.CompareEventToken = &EventToken{}
			x.CompareEventToken.UnmarshalProtoJSON(s.WithField("compare_event_token", true))
		case "included_fields", "includedFields":
			s.AddField("included_fields")
			x.IncludedFields.UnmarshalProtoJSON(s)
		case "client_found_rows", "clientFoundRows":
			s.AddField("client_found_rows")
			x.ClientFoundRows = s.ReadBool()
		case "workload":
			s.AddField("workload")
			x.Workload.UnmarshalProtoJSON(s)
		case "sql_select_limit", "sqlSelectLimit":
			s.AddField("sql_select_limit")
			x.SqlSelectLimit = s.ReadInt64()
		case "transaction_isolation", "transactionIsolation":
			s.AddField("transaction_isolation")
			x.TransactionIsolation.UnmarshalProtoJSON(s)
		case "skip_query_plan_cache", "skipQueryPlanCache":
			s.AddField("skip_query_plan_cache")
			x.SkipQueryPlanCache = s.ReadBool()
		}
	})
}

// UnmarshalJSON unmarshals the ExecuteOptions from JSON.
func (x *ExecuteOptions) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the Field message to JSON.
func (x *Field) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Name != "" || s.HasField("name") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("name")
		s.WriteString(x.Name)
	}
	if x.Type != 0 || s.HasField("type") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("type")
		x.Type.MarshalProtoJSON(s)
	}
	if x.Table != "" || s.HasField("table") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("table")
		s.WriteString(x.Table)
	}
	if x.OrgTable != "" || s.HasField("orgTable") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("orgTable")
		s.WriteString(x.OrgTable)
	}
	if x.Database != "" || s.HasField("database") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("database")
		s.WriteString(x.Database)
	}
	if x.OrgName != "" || s.HasField("orgName") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("orgName")
		s.WriteString(x.OrgName)
	}
	if x.ColumnLength != 0 || s.HasField("columnLength") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("columnLength")
		s.WriteUint32(x.ColumnLength)
	}
	if x.Charset != 0 || s.HasField("charset") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("charset")
		s.WriteUint32(x.Charset)
	}
	if x.Decimals != 0 || s.HasField("decimals") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("decimals")
		s.WriteUint32(x.Decimals)
	}
	if x.Flags != 0 || s.HasField("flags") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("flags")
		s.WriteUint32(x.Flags)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the Field to JSON.
func (x *Field) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the Field message from JSON.
func (x *Field) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "name":
			s.AddField("name")
			x.Name = s.ReadString()
		case "type":
			s.AddField("type")
			x.Type.UnmarshalProtoJSON(s)
		case "table":
			s.AddField("table")
			x.Table = s.ReadString()
		case "org_table", "orgTable":
			s.AddField("org_table")
			x.OrgTable = s.ReadString()
		case "database":
			s.AddField("database")
			x.Database = s.ReadString()
		case "org_name", "orgName":
			s.AddField("org_name")
			x.OrgName = s.ReadString()
		case "column_length", "columnLength":
			s.AddField("column_length")
			x.ColumnLength = s.ReadUint32()
		case "charset":
			s.AddField("charset")
			x.Charset = s.ReadUint32()
		case "decimals":
			s.AddField("decimals")
			x.Decimals = s.ReadUint32()
		case "flags":
			s.AddField("flags")
			x.Flags = s.ReadUint32()
		}
	})
}

// UnmarshalJSON unmarshals the Field from JSON.
func (x *Field) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the Row message to JSON.
func (x *Row) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if len(x.Lengths) > 0 || s.HasField("lengths") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("lengths")
		s.WriteInt64Array(x.Lengths)
	}
	if len(x.Values) > 0 || s.HasField("values") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("values")
		s.WriteBytes(x.Values)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the Row to JSON.
func (x *Row) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the Row message from JSON.
func (x *Row) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "lengths":
			s.AddField("lengths")
			if s.ReadNil() {
				x.Lengths = nil
				return
			}
			x.Lengths = s.ReadInt64Array()
		case "values":
			s.AddField("values")
			x.Values = s.ReadBytes()
		}
	})
}

// UnmarshalJSON unmarshals the Row from JSON.
func (x *Row) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the ResultExtras message to JSON.
func (x *ResultExtras) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.EventToken != nil || s.HasField("eventToken") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("eventToken")
		x.EventToken.MarshalProtoJSON(s.WithField("eventToken"))
	}
	if x.Fresher || s.HasField("fresher") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("fresher")
		s.WriteBool(x.Fresher)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the ResultExtras to JSON.
func (x *ResultExtras) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the ResultExtras message from JSON.
func (x *ResultExtras) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "event_token", "eventToken":
			if s.ReadNil() {
				x.EventToken = nil
				return
			}
			x.EventToken = &EventToken{}
			x.EventToken.UnmarshalProtoJSON(s.WithField("event_token", true))
		case "fresher":
			s.AddField("fresher")
			x.Fresher = s.ReadBool()
		}
	})
}

// UnmarshalJSON unmarshals the ResultExtras from JSON.
func (x *ResultExtras) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the QueryResult message to JSON.
func (x *QueryResult) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if len(x.Fields) > 0 || s.HasField("fields") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("fields")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.Fields {
			s.WriteMoreIf(&wroteElement)
			element.MarshalProtoJSON(s.WithField("fields"))
		}
		s.WriteArrayEnd()
	}
	if x.RowsAffected != 0 || s.HasField("rowsAffected") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("rowsAffected")
		s.WriteUint64(x.RowsAffected)
	}
	if x.InsertId != 0 || s.HasField("insertId") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("insertId")
		s.WriteUint64(x.InsertId)
	}
	if len(x.Rows) > 0 || s.HasField("rows") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("rows")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.Rows {
			s.WriteMoreIf(&wroteElement)
			element.MarshalProtoJSON(s.WithField("rows"))
		}
		s.WriteArrayEnd()
	}
	if x.Extras != nil || s.HasField("extras") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("extras")
		x.Extras.MarshalProtoJSON(s.WithField("extras"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the QueryResult to JSON.
func (x *QueryResult) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the QueryResult message from JSON.
func (x *QueryResult) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "fields":
			s.AddField("fields")
			if s.ReadNil() {
				x.Fields = nil
				return
			}
			s.ReadArray(func() {
				if s.ReadNil() {
					x.Fields = append(x.Fields, nil)
					return
				}
				v := &Field{}
				v.UnmarshalProtoJSON(s.WithField("fields", false))
				if s.Err() != nil {
					return
				}
				x.Fields = append(x.Fields, v)
			})
		case "rows_affected", "rowsAffected":
			s.AddField("rows_affected")
			x.RowsAffected = s.ReadUint64()
		case "insert_id", "insertId":
			s.AddField("insert_id")
			x.InsertId = s.ReadUint64()
		case "rows":
			s.AddField("rows")
			if s.ReadNil() {
				x.Rows = nil
				return
			}
			s.ReadArray(func() {
				if s.ReadNil() {
					x.Rows = append(x.Rows, nil)
					return
				}
				v := &Row{}
				v.UnmarshalProtoJSON(s.WithField("rows", false))
				if s.Err() != nil {
					return
				}
				x.Rows = append(x.Rows, v)
			})
		case "extras":
			if s.ReadNil() {
				x.Extras = nil
				return
			}
			x.Extras = &ResultExtras{}
			x.Extras.UnmarshalProtoJSON(s.WithField("extras", true))
		}
	})
}

// UnmarshalJSON unmarshals the QueryResult from JSON.
func (x *QueryResult) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the QueryWarning message to JSON.
func (x *QueryWarning) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Code != 0 || s.HasField("code") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("code")
		s.WriteUint32(x.Code)
	}
	if x.Message != "" || s.HasField("message") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("message")
		s.WriteString(x.Message)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the QueryWarning to JSON.
func (x *QueryWarning) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the QueryWarning message from JSON.
func (x *QueryWarning) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "code":
			s.AddField("code")
			x.Code = s.ReadUint32()
		case "message":
			s.AddField("message")
			x.Message = s.ReadString()
		}
	})
}

// UnmarshalJSON unmarshals the QueryWarning from JSON.
func (x *QueryWarning) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the StreamEvent_Statement_Category to JSON.
func (x StreamEvent_Statement_Category) MarshalProtoJSON(s *json.MarshalState) {
	s.WriteEnumString(int32(x), StreamEvent_Statement_Category_name)
}

// MarshalText marshals the StreamEvent_Statement_Category to text.
func (x StreamEvent_Statement_Category) MarshalText() ([]byte, error) {
	return []byte(json.GetEnumString(int32(x), StreamEvent_Statement_Category_name)), nil
}

// MarshalJSON marshals the StreamEvent_Statement_Category to JSON.
func (x StreamEvent_Statement_Category) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the StreamEvent_Statement_Category from JSON.
func (x *StreamEvent_Statement_Category) UnmarshalProtoJSON(s *json.UnmarshalState) {
	v := s.ReadEnum(StreamEvent_Statement_Category_value)
	if err := s.Err(); err != nil {
		s.SetErrorf("could not read Category enum: %v", err)
		return
	}
	*x = StreamEvent_Statement_Category(v)
}

// UnmarshalText unmarshals the StreamEvent_Statement_Category from text.
func (x *StreamEvent_Statement_Category) UnmarshalText(b []byte) error {
	i, err := json.ParseEnumString(string(b), StreamEvent_Statement_Category_value)
	if err != nil {
		return err
	}
	*x = StreamEvent_Statement_Category(i)
	return nil
}

// UnmarshalJSON unmarshals the StreamEvent_Statement_Category from JSON.
func (x *StreamEvent_Statement_Category) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the StreamEvent_Statement message to JSON.
func (x *StreamEvent_Statement) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Category != 0 || s.HasField("category") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("category")
		x.Category.MarshalProtoJSON(s)
	}
	if x.TableName != "" || s.HasField("tableName") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("tableName")
		s.WriteString(x.TableName)
	}
	if len(x.PrimaryKeyFields) > 0 || s.HasField("primaryKeyFields") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("primaryKeyFields")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.PrimaryKeyFields {
			s.WriteMoreIf(&wroteElement)
			element.MarshalProtoJSON(s.WithField("primaryKeyFields"))
		}
		s.WriteArrayEnd()
	}
	if len(x.PrimaryKeyValues) > 0 || s.HasField("primaryKeyValues") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("primaryKeyValues")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.PrimaryKeyValues {
			s.WriteMoreIf(&wroteElement)
			element.MarshalProtoJSON(s.WithField("primaryKeyValues"))
		}
		s.WriteArrayEnd()
	}
	if len(x.Sql) > 0 || s.HasField("sql") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("sql")
		s.WriteBytes(x.Sql)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the StreamEvent_Statement to JSON.
func (x *StreamEvent_Statement) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the StreamEvent_Statement message from JSON.
func (x *StreamEvent_Statement) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "category":
			s.AddField("category")
			x.Category.UnmarshalProtoJSON(s)
		case "table_name", "tableName":
			s.AddField("table_name")
			x.TableName = s.ReadString()
		case "primary_key_fields", "primaryKeyFields":
			s.AddField("primary_key_fields")
			if s.ReadNil() {
				x.PrimaryKeyFields = nil
				return
			}
			s.ReadArray(func() {
				if s.ReadNil() {
					x.PrimaryKeyFields = append(x.PrimaryKeyFields, nil)
					return
				}
				v := &Field{}
				v.UnmarshalProtoJSON(s.WithField("primary_key_fields", false))
				if s.Err() != nil {
					return
				}
				x.PrimaryKeyFields = append(x.PrimaryKeyFields, v)
			})
		case "primary_key_values", "primaryKeyValues":
			s.AddField("primary_key_values")
			if s.ReadNil() {
				x.PrimaryKeyValues = nil
				return
			}
			s.ReadArray(func() {
				if s.ReadNil() {
					x.PrimaryKeyValues = append(x.PrimaryKeyValues, nil)
					return
				}
				v := &Row{}
				v.UnmarshalProtoJSON(s.WithField("primary_key_values", false))
				if s.Err() != nil {
					return
				}
				x.PrimaryKeyValues = append(x.PrimaryKeyValues, v)
			})
		case "sql":
			s.AddField("sql")
			x.Sql = s.ReadBytes()
		}
	})
}

// UnmarshalJSON unmarshals the StreamEvent_Statement from JSON.
func (x *StreamEvent_Statement) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the StreamEvent message to JSON.
func (x *StreamEvent) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if len(x.Statements) > 0 || s.HasField("statements") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("statements")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.Statements {
			s.WriteMoreIf(&wroteElement)
			element.MarshalProtoJSON(s.WithField("statements"))
		}
		s.WriteArrayEnd()
	}
	if x.EventToken != nil || s.HasField("eventToken") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("eventToken")
		x.EventToken.MarshalProtoJSON(s.WithField("eventToken"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the StreamEvent to JSON.
func (x *StreamEvent) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the StreamEvent message from JSON.
func (x *StreamEvent) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "statements":
			s.AddField("statements")
			if s.ReadNil() {
				x.Statements = nil
				return
			}
			s.ReadArray(func() {
				if s.ReadNil() {
					x.Statements = append(x.Statements, nil)
					return
				}
				v := &StreamEvent_Statement{}
				v.UnmarshalProtoJSON(s.WithField("statements", false))
				if s.Err() != nil {
					return
				}
				x.Statements = append(x.Statements, v)
			})
		case "event_token", "eventToken":
			if s.ReadNil() {
				x.EventToken = nil
				return
			}
			x.EventToken = &EventToken{}
			x.EventToken.UnmarshalProtoJSON(s.WithField("event_token", true))
		}
	})
}

// UnmarshalJSON unmarshals the StreamEvent from JSON.
func (x *StreamEvent) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the ExecuteRequest message to JSON.
func (x *ExecuteRequest) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.EffectiveCallerId != nil || s.HasField("effectiveCallerId") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("effectiveCallerId")
		x.EffectiveCallerId.MarshalProtoJSON(s.WithField("effectiveCallerId"))
	}
	if x.ImmediateCallerId != nil || s.HasField("immediateCallerId") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("immediateCallerId")
		x.ImmediateCallerId.MarshalProtoJSON(s.WithField("immediateCallerId"))
	}
	if x.Target != nil || s.HasField("target") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("target")
		x.Target.MarshalProtoJSON(s.WithField("target"))
	}
	if x.Query != nil || s.HasField("query") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("query")
		x.Query.MarshalProtoJSON(s.WithField("query"))
	}
	if x.TransactionId != 0 || s.HasField("transactionId") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("transactionId")
		s.WriteInt64(x.TransactionId)
	}
	if x.Options != nil || s.HasField("options") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("options")
		x.Options.MarshalProtoJSON(s.WithField("options"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the ExecuteRequest to JSON.
func (x *ExecuteRequest) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the ExecuteRequest message from JSON.
func (x *ExecuteRequest) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "effective_caller_id", "effectiveCallerId":
			if s.ReadNil() {
				x.EffectiveCallerId = nil
				return
			}
			x.EffectiveCallerId = &vtrpc.CallerID{}
			x.EffectiveCallerId.UnmarshalProtoJSON(s.WithField("effective_caller_id", true))
		case "immediate_caller_id", "immediateCallerId":
			if s.ReadNil() {
				x.ImmediateCallerId = nil
				return
			}
			x.ImmediateCallerId = &VTGateCallerID{}
			x.ImmediateCallerId.UnmarshalProtoJSON(s.WithField("immediate_caller_id", true))
		case "target":
			if s.ReadNil() {
				x.Target = nil
				return
			}
			x.Target = &Target{}
			x.Target.UnmarshalProtoJSON(s.WithField("target", true))
		case "query":
			if s.ReadNil() {
				x.Query = nil
				return
			}
			x.Query = &BoundQuery{}
			x.Query.UnmarshalProtoJSON(s.WithField("query", true))
		case "transaction_id", "transactionId":
			s.AddField("transaction_id")
			x.TransactionId = s.ReadInt64()
		case "options":
			if s.ReadNil() {
				x.Options = nil
				return
			}
			x.Options = &ExecuteOptions{}
			x.Options.UnmarshalProtoJSON(s.WithField("options", true))
		}
	})
}

// UnmarshalJSON unmarshals the ExecuteRequest from JSON.
func (x *ExecuteRequest) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the ExecuteResponse message to JSON.
func (x *ExecuteResponse) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Result != nil || s.HasField("result") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("result")
		x.Result.MarshalProtoJSON(s.WithField("result"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the ExecuteResponse to JSON.
func (x *ExecuteResponse) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the ExecuteResponse message from JSON.
func (x *ExecuteResponse) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "result":
			if s.ReadNil() {
				x.Result = nil
				return
			}
			x.Result = &QueryResult{}
			x.Result.UnmarshalProtoJSON(s.WithField("result", true))
		}
	})
}

// UnmarshalJSON unmarshals the ExecuteResponse from JSON.
func (x *ExecuteResponse) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the ResultWithError message to JSON.
func (x *ResultWithError) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Error != nil || s.HasField("error") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("error")
		x.Error.MarshalProtoJSON(s.WithField("error"))
	}
	if x.Result != nil || s.HasField("result") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("result")
		x.Result.MarshalProtoJSON(s.WithField("result"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the ResultWithError to JSON.
func (x *ResultWithError) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the ResultWithError message from JSON.
func (x *ResultWithError) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "error":
			if s.ReadNil() {
				x.Error = nil
				return
			}
			x.Error = &vtrpc.RPCError{}
			x.Error.UnmarshalProtoJSON(s.WithField("error", true))
		case "result":
			if s.ReadNil() {
				x.Result = nil
				return
			}
			x.Result = &QueryResult{}
			x.Result.UnmarshalProtoJSON(s.WithField("result", true))
		}
	})
}

// UnmarshalJSON unmarshals the ResultWithError from JSON.
func (x *ResultWithError) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the ExecuteBatchRequest message to JSON.
func (x *ExecuteBatchRequest) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.EffectiveCallerId != nil || s.HasField("effectiveCallerId") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("effectiveCallerId")
		x.EffectiveCallerId.MarshalProtoJSON(s.WithField("effectiveCallerId"))
	}
	if x.ImmediateCallerId != nil || s.HasField("immediateCallerId") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("immediateCallerId")
		x.ImmediateCallerId.MarshalProtoJSON(s.WithField("immediateCallerId"))
	}
	if x.Target != nil || s.HasField("target") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("target")
		x.Target.MarshalProtoJSON(s.WithField("target"))
	}
	if len(x.Queries) > 0 || s.HasField("queries") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("queries")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.Queries {
			s.WriteMoreIf(&wroteElement)
			element.MarshalProtoJSON(s.WithField("queries"))
		}
		s.WriteArrayEnd()
	}
	if x.AsTransaction || s.HasField("asTransaction") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("asTransaction")
		s.WriteBool(x.AsTransaction)
	}
	if x.TransactionId != 0 || s.HasField("transactionId") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("transactionId")
		s.WriteInt64(x.TransactionId)
	}
	if x.Options != nil || s.HasField("options") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("options")
		x.Options.MarshalProtoJSON(s.WithField("options"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the ExecuteBatchRequest to JSON.
func (x *ExecuteBatchRequest) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the ExecuteBatchRequest message from JSON.
func (x *ExecuteBatchRequest) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "effective_caller_id", "effectiveCallerId":
			if s.ReadNil() {
				x.EffectiveCallerId = nil
				return
			}
			x.EffectiveCallerId = &vtrpc.CallerID{}
			x.EffectiveCallerId.UnmarshalProtoJSON(s.WithField("effective_caller_id", true))
		case "immediate_caller_id", "immediateCallerId":
			if s.ReadNil() {
				x.ImmediateCallerId = nil
				return
			}
			x.ImmediateCallerId = &VTGateCallerID{}
			x.ImmediateCallerId.UnmarshalProtoJSON(s.WithField("immediate_caller_id", true))
		case "target":
			if s.ReadNil() {
				x.Target = nil
				return
			}
			x.Target = &Target{}
			x.Target.UnmarshalProtoJSON(s.WithField("target", true))
		case "queries":
			s.AddField("queries")
			if s.ReadNil() {
				x.Queries = nil
				return
			}
			s.ReadArray(func() {
				if s.ReadNil() {
					x.Queries = append(x.Queries, nil)
					return
				}
				v := &BoundQuery{}
				v.UnmarshalProtoJSON(s.WithField("queries", false))
				if s.Err() != nil {
					return
				}
				x.Queries = append(x.Queries, v)
			})
		case "as_transaction", "asTransaction":
			s.AddField("as_transaction")
			x.AsTransaction = s.ReadBool()
		case "transaction_id", "transactionId":
			s.AddField("transaction_id")
			x.TransactionId = s.ReadInt64()
		case "options":
			if s.ReadNil() {
				x.Options = nil
				return
			}
			x.Options = &ExecuteOptions{}
			x.Options.UnmarshalProtoJSON(s.WithField("options", true))
		}
	})
}

// UnmarshalJSON unmarshals the ExecuteBatchRequest from JSON.
func (x *ExecuteBatchRequest) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the ExecuteBatchResponse message to JSON.
func (x *ExecuteBatchResponse) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if len(x.Results) > 0 || s.HasField("results") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("results")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.Results {
			s.WriteMoreIf(&wroteElement)
			element.MarshalProtoJSON(s.WithField("results"))
		}
		s.WriteArrayEnd()
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the ExecuteBatchResponse to JSON.
func (x *ExecuteBatchResponse) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the ExecuteBatchResponse message from JSON.
func (x *ExecuteBatchResponse) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "results":
			s.AddField("results")
			if s.ReadNil() {
				x.Results = nil
				return
			}
			s.ReadArray(func() {
				if s.ReadNil() {
					x.Results = append(x.Results, nil)
					return
				}
				v := &QueryResult{}
				v.UnmarshalProtoJSON(s.WithField("results", false))
				if s.Err() != nil {
					return
				}
				x.Results = append(x.Results, v)
			})
		}
	})
}

// UnmarshalJSON unmarshals the ExecuteBatchResponse from JSON.
func (x *ExecuteBatchResponse) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the StreamExecuteRequest message to JSON.
func (x *StreamExecuteRequest) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.EffectiveCallerId != nil || s.HasField("effectiveCallerId") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("effectiveCallerId")
		x.EffectiveCallerId.MarshalProtoJSON(s.WithField("effectiveCallerId"))
	}
	if x.ImmediateCallerId != nil || s.HasField("immediateCallerId") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("immediateCallerId")
		x.ImmediateCallerId.MarshalProtoJSON(s.WithField("immediateCallerId"))
	}
	if x.Target != nil || s.HasField("target") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("target")
		x.Target.MarshalProtoJSON(s.WithField("target"))
	}
	if x.Query != nil || s.HasField("query") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("query")
		x.Query.MarshalProtoJSON(s.WithField("query"))
	}
	if x.Options != nil || s.HasField("options") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("options")
		x.Options.MarshalProtoJSON(s.WithField("options"))
	}
	if x.TransactionId != 0 || s.HasField("transactionId") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("transactionId")
		s.WriteInt64(x.TransactionId)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the StreamExecuteRequest to JSON.
func (x *StreamExecuteRequest) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the StreamExecuteRequest message from JSON.
func (x *StreamExecuteRequest) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "effective_caller_id", "effectiveCallerId":
			if s.ReadNil() {
				x.EffectiveCallerId = nil
				return
			}
			x.EffectiveCallerId = &vtrpc.CallerID{}
			x.EffectiveCallerId.UnmarshalProtoJSON(s.WithField("effective_caller_id", true))
		case "immediate_caller_id", "immediateCallerId":
			if s.ReadNil() {
				x.ImmediateCallerId = nil
				return
			}
			x.ImmediateCallerId = &VTGateCallerID{}
			x.ImmediateCallerId.UnmarshalProtoJSON(s.WithField("immediate_caller_id", true))
		case "target":
			if s.ReadNil() {
				x.Target = nil
				return
			}
			x.Target = &Target{}
			x.Target.UnmarshalProtoJSON(s.WithField("target", true))
		case "query":
			if s.ReadNil() {
				x.Query = nil
				return
			}
			x.Query = &BoundQuery{}
			x.Query.UnmarshalProtoJSON(s.WithField("query", true))
		case "options":
			if s.ReadNil() {
				x.Options = nil
				return
			}
			x.Options = &ExecuteOptions{}
			x.Options.UnmarshalProtoJSON(s.WithField("options", true))
		case "transaction_id", "transactionId":
			s.AddField("transaction_id")
			x.TransactionId = s.ReadInt64()
		}
	})
}

// UnmarshalJSON unmarshals the StreamExecuteRequest from JSON.
func (x *StreamExecuteRequest) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the StreamExecuteResponse message to JSON.
func (x *StreamExecuteResponse) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Result != nil || s.HasField("result") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("result")
		x.Result.MarshalProtoJSON(s.WithField("result"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the StreamExecuteResponse to JSON.
func (x *StreamExecuteResponse) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the StreamExecuteResponse message from JSON.
func (x *StreamExecuteResponse) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "result":
			if s.ReadNil() {
				x.Result = nil
				return
			}
			x.Result = &QueryResult{}
			x.Result.UnmarshalProtoJSON(s.WithField("result", true))
		}
	})
}

// UnmarshalJSON unmarshals the StreamExecuteResponse from JSON.
func (x *StreamExecuteResponse) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the BeginRequest message to JSON.
func (x *BeginRequest) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.EffectiveCallerId != nil || s.HasField("effectiveCallerId") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("effectiveCallerId")
		x.EffectiveCallerId.MarshalProtoJSON(s.WithField("effectiveCallerId"))
	}
	if x.ImmediateCallerId != nil || s.HasField("immediateCallerId") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("immediateCallerId")
		x.ImmediateCallerId.MarshalProtoJSON(s.WithField("immediateCallerId"))
	}
	if x.Target != nil || s.HasField("target") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("target")
		x.Target.MarshalProtoJSON(s.WithField("target"))
	}
	if x.Options != nil || s.HasField("options") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("options")
		x.Options.MarshalProtoJSON(s.WithField("options"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the BeginRequest to JSON.
func (x *BeginRequest) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the BeginRequest message from JSON.
func (x *BeginRequest) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "effective_caller_id", "effectiveCallerId":
			if s.ReadNil() {
				x.EffectiveCallerId = nil
				return
			}
			x.EffectiveCallerId = &vtrpc.CallerID{}
			x.EffectiveCallerId.UnmarshalProtoJSON(s.WithField("effective_caller_id", true))
		case "immediate_caller_id", "immediateCallerId":
			if s.ReadNil() {
				x.ImmediateCallerId = nil
				return
			}
			x.ImmediateCallerId = &VTGateCallerID{}
			x.ImmediateCallerId.UnmarshalProtoJSON(s.WithField("immediate_caller_id", true))
		case "target":
			if s.ReadNil() {
				x.Target = nil
				return
			}
			x.Target = &Target{}
			x.Target.UnmarshalProtoJSON(s.WithField("target", true))
		case "options":
			if s.ReadNil() {
				x.Options = nil
				return
			}
			x.Options = &ExecuteOptions{}
			x.Options.UnmarshalProtoJSON(s.WithField("options", true))
		}
	})
}

// UnmarshalJSON unmarshals the BeginRequest from JSON.
func (x *BeginRequest) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the BeginResponse message to JSON.
func (x *BeginResponse) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.TransactionId != 0 || s.HasField("transactionId") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("transactionId")
		s.WriteInt64(x.TransactionId)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the BeginResponse to JSON.
func (x *BeginResponse) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the BeginResponse message from JSON.
func (x *BeginResponse) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "transaction_id", "transactionId":
			s.AddField("transaction_id")
			x.TransactionId = s.ReadInt64()
		}
	})
}

// UnmarshalJSON unmarshals the BeginResponse from JSON.
func (x *BeginResponse) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the CommitRequest message to JSON.
func (x *CommitRequest) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.EffectiveCallerId != nil || s.HasField("effectiveCallerId") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("effectiveCallerId")
		x.EffectiveCallerId.MarshalProtoJSON(s.WithField("effectiveCallerId"))
	}
	if x.ImmediateCallerId != nil || s.HasField("immediateCallerId") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("immediateCallerId")
		x.ImmediateCallerId.MarshalProtoJSON(s.WithField("immediateCallerId"))
	}
	if x.Target != nil || s.HasField("target") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("target")
		x.Target.MarshalProtoJSON(s.WithField("target"))
	}
	if x.TransactionId != 0 || s.HasField("transactionId") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("transactionId")
		s.WriteInt64(x.TransactionId)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the CommitRequest to JSON.
func (x *CommitRequest) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the CommitRequest message from JSON.
func (x *CommitRequest) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "effective_caller_id", "effectiveCallerId":
			if s.ReadNil() {
				x.EffectiveCallerId = nil
				return
			}
			x.EffectiveCallerId = &vtrpc.CallerID{}
			x.EffectiveCallerId.UnmarshalProtoJSON(s.WithField("effective_caller_id", true))
		case "immediate_caller_id", "immediateCallerId":
			if s.ReadNil() {
				x.ImmediateCallerId = nil
				return
			}
			x.ImmediateCallerId = &VTGateCallerID{}
			x.ImmediateCallerId.UnmarshalProtoJSON(s.WithField("immediate_caller_id", true))
		case "target":
			if s.ReadNil() {
				x.Target = nil
				return
			}
			x.Target = &Target{}
			x.Target.UnmarshalProtoJSON(s.WithField("target", true))
		case "transaction_id", "transactionId":
			s.AddField("transaction_id")
			x.TransactionId = s.ReadInt64()
		}
	})
}

// UnmarshalJSON unmarshals the CommitRequest from JSON.
func (x *CommitRequest) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the CommitResponse message to JSON.
func (x *CommitResponse) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	s.WriteObjectEnd()
}

// MarshalJSON marshals the CommitResponse to JSON.
func (x *CommitResponse) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the CommitResponse message from JSON.
func (x *CommitResponse) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
}

// UnmarshalJSON unmarshals the CommitResponse from JSON.
func (x *CommitResponse) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the RollbackRequest message to JSON.
func (x *RollbackRequest) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.EffectiveCallerId != nil || s.HasField("effectiveCallerId") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("effectiveCallerId")
		x.EffectiveCallerId.MarshalProtoJSON(s.WithField("effectiveCallerId"))
	}
	if x.ImmediateCallerId != nil || s.HasField("immediateCallerId") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("immediateCallerId")
		x.ImmediateCallerId.MarshalProtoJSON(s.WithField("immediateCallerId"))
	}
	if x.Target != nil || s.HasField("target") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("target")
		x.Target.MarshalProtoJSON(s.WithField("target"))
	}
	if x.TransactionId != 0 || s.HasField("transactionId") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("transactionId")
		s.WriteInt64(x.TransactionId)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the RollbackRequest to JSON.
func (x *RollbackRequest) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the RollbackRequest message from JSON.
func (x *RollbackRequest) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "effective_caller_id", "effectiveCallerId":
			if s.ReadNil() {
				x.EffectiveCallerId = nil
				return
			}
			x.EffectiveCallerId = &vtrpc.CallerID{}
			x.EffectiveCallerId.UnmarshalProtoJSON(s.WithField("effective_caller_id", true))
		case "immediate_caller_id", "immediateCallerId":
			if s.ReadNil() {
				x.ImmediateCallerId = nil
				return
			}
			x.ImmediateCallerId = &VTGateCallerID{}
			x.ImmediateCallerId.UnmarshalProtoJSON(s.WithField("immediate_caller_id", true))
		case "target":
			if s.ReadNil() {
				x.Target = nil
				return
			}
			x.Target = &Target{}
			x.Target.UnmarshalProtoJSON(s.WithField("target", true))
		case "transaction_id", "transactionId":
			s.AddField("transaction_id")
			x.TransactionId = s.ReadInt64()
		}
	})
}

// UnmarshalJSON unmarshals the RollbackRequest from JSON.
func (x *RollbackRequest) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the RollbackResponse message to JSON.
func (x *RollbackResponse) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	s.WriteObjectEnd()
}

// MarshalJSON marshals the RollbackResponse to JSON.
func (x *RollbackResponse) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the RollbackResponse message from JSON.
func (x *RollbackResponse) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
}

// UnmarshalJSON unmarshals the RollbackResponse from JSON.
func (x *RollbackResponse) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the PrepareRequest message to JSON.
func (x *PrepareRequest) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.EffectiveCallerId != nil || s.HasField("effectiveCallerId") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("effectiveCallerId")
		x.EffectiveCallerId.MarshalProtoJSON(s.WithField("effectiveCallerId"))
	}
	if x.ImmediateCallerId != nil || s.HasField("immediateCallerId") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("immediateCallerId")
		x.ImmediateCallerId.MarshalProtoJSON(s.WithField("immediateCallerId"))
	}
	if x.Target != nil || s.HasField("target") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("target")
		x.Target.MarshalProtoJSON(s.WithField("target"))
	}
	if x.TransactionId != 0 || s.HasField("transactionId") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("transactionId")
		s.WriteInt64(x.TransactionId)
	}
	if x.Dtid != "" || s.HasField("dtid") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("dtid")
		s.WriteString(x.Dtid)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the PrepareRequest to JSON.
func (x *PrepareRequest) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the PrepareRequest message from JSON.
func (x *PrepareRequest) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "effective_caller_id", "effectiveCallerId":
			if s.ReadNil() {
				x.EffectiveCallerId = nil
				return
			}
			x.EffectiveCallerId = &vtrpc.CallerID{}
			x.EffectiveCallerId.UnmarshalProtoJSON(s.WithField("effective_caller_id", true))
		case "immediate_caller_id", "immediateCallerId":
			if s.ReadNil() {
				x.ImmediateCallerId = nil
				return
			}
			x.ImmediateCallerId = &VTGateCallerID{}
			x.ImmediateCallerId.UnmarshalProtoJSON(s.WithField("immediate_caller_id", true))
		case "target":
			if s.ReadNil() {
				x.Target = nil
				return
			}
			x.Target = &Target{}
			x.Target.UnmarshalProtoJSON(s.WithField("target", true))
		case "transaction_id", "transactionId":
			s.AddField("transaction_id")
			x.TransactionId = s.ReadInt64()
		case "dtid":
			s.AddField("dtid")
			x.Dtid = s.ReadString()
		}
	})
}

// UnmarshalJSON unmarshals the PrepareRequest from JSON.
func (x *PrepareRequest) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the PrepareResponse message to JSON.
func (x *PrepareResponse) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	s.WriteObjectEnd()
}

// MarshalJSON marshals the PrepareResponse to JSON.
func (x *PrepareResponse) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the PrepareResponse message from JSON.
func (x *PrepareResponse) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
}

// UnmarshalJSON unmarshals the PrepareResponse from JSON.
func (x *PrepareResponse) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the CommitPreparedRequest message to JSON.
func (x *CommitPreparedRequest) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.EffectiveCallerId != nil || s.HasField("effectiveCallerId") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("effectiveCallerId")
		x.EffectiveCallerId.MarshalProtoJSON(s.WithField("effectiveCallerId"))
	}
	if x.ImmediateCallerId != nil || s.HasField("immediateCallerId") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("immediateCallerId")
		x.ImmediateCallerId.MarshalProtoJSON(s.WithField("immediateCallerId"))
	}
	if x.Target != nil || s.HasField("target") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("target")
		x.Target.MarshalProtoJSON(s.WithField("target"))
	}
	if x.Dtid != "" || s.HasField("dtid") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("dtid")
		s.WriteString(x.Dtid)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the CommitPreparedRequest to JSON.
func (x *CommitPreparedRequest) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the CommitPreparedRequest message from JSON.
func (x *CommitPreparedRequest) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "effective_caller_id", "effectiveCallerId":
			if s.ReadNil() {
				x.EffectiveCallerId = nil
				return
			}
			x.EffectiveCallerId = &vtrpc.CallerID{}
			x.EffectiveCallerId.UnmarshalProtoJSON(s.WithField("effective_caller_id", true))
		case "immediate_caller_id", "immediateCallerId":
			if s.ReadNil() {
				x.ImmediateCallerId = nil
				return
			}
			x.ImmediateCallerId = &VTGateCallerID{}
			x.ImmediateCallerId.UnmarshalProtoJSON(s.WithField("immediate_caller_id", true))
		case "target":
			if s.ReadNil() {
				x.Target = nil
				return
			}
			x.Target = &Target{}
			x.Target.UnmarshalProtoJSON(s.WithField("target", true))
		case "dtid":
			s.AddField("dtid")
			x.Dtid = s.ReadString()
		}
	})
}

// UnmarshalJSON unmarshals the CommitPreparedRequest from JSON.
func (x *CommitPreparedRequest) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the CommitPreparedResponse message to JSON.
func (x *CommitPreparedResponse) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	s.WriteObjectEnd()
}

// MarshalJSON marshals the CommitPreparedResponse to JSON.
func (x *CommitPreparedResponse) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the CommitPreparedResponse message from JSON.
func (x *CommitPreparedResponse) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
}

// UnmarshalJSON unmarshals the CommitPreparedResponse from JSON.
func (x *CommitPreparedResponse) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the RollbackPreparedRequest message to JSON.
func (x *RollbackPreparedRequest) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.EffectiveCallerId != nil || s.HasField("effectiveCallerId") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("effectiveCallerId")
		x.EffectiveCallerId.MarshalProtoJSON(s.WithField("effectiveCallerId"))
	}
	if x.ImmediateCallerId != nil || s.HasField("immediateCallerId") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("immediateCallerId")
		x.ImmediateCallerId.MarshalProtoJSON(s.WithField("immediateCallerId"))
	}
	if x.Target != nil || s.HasField("target") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("target")
		x.Target.MarshalProtoJSON(s.WithField("target"))
	}
	if x.TransactionId != 0 || s.HasField("transactionId") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("transactionId")
		s.WriteInt64(x.TransactionId)
	}
	if x.Dtid != "" || s.HasField("dtid") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("dtid")
		s.WriteString(x.Dtid)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the RollbackPreparedRequest to JSON.
func (x *RollbackPreparedRequest) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the RollbackPreparedRequest message from JSON.
func (x *RollbackPreparedRequest) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "effective_caller_id", "effectiveCallerId":
			if s.ReadNil() {
				x.EffectiveCallerId = nil
				return
			}
			x.EffectiveCallerId = &vtrpc.CallerID{}
			x.EffectiveCallerId.UnmarshalProtoJSON(s.WithField("effective_caller_id", true))
		case "immediate_caller_id", "immediateCallerId":
			if s.ReadNil() {
				x.ImmediateCallerId = nil
				return
			}
			x.ImmediateCallerId = &VTGateCallerID{}
			x.ImmediateCallerId.UnmarshalProtoJSON(s.WithField("immediate_caller_id", true))
		case "target":
			if s.ReadNil() {
				x.Target = nil
				return
			}
			x.Target = &Target{}
			x.Target.UnmarshalProtoJSON(s.WithField("target", true))
		case "transaction_id", "transactionId":
			s.AddField("transaction_id")
			x.TransactionId = s.ReadInt64()
		case "dtid":
			s.AddField("dtid")
			x.Dtid = s.ReadString()
		}
	})
}

// UnmarshalJSON unmarshals the RollbackPreparedRequest from JSON.
func (x *RollbackPreparedRequest) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the RollbackPreparedResponse message to JSON.
func (x *RollbackPreparedResponse) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	s.WriteObjectEnd()
}

// MarshalJSON marshals the RollbackPreparedResponse to JSON.
func (x *RollbackPreparedResponse) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the RollbackPreparedResponse message from JSON.
func (x *RollbackPreparedResponse) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
}

// UnmarshalJSON unmarshals the RollbackPreparedResponse from JSON.
func (x *RollbackPreparedResponse) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the CreateTransactionRequest message to JSON.
func (x *CreateTransactionRequest) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.EffectiveCallerId != nil || s.HasField("effectiveCallerId") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("effectiveCallerId")
		x.EffectiveCallerId.MarshalProtoJSON(s.WithField("effectiveCallerId"))
	}
	if x.ImmediateCallerId != nil || s.HasField("immediateCallerId") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("immediateCallerId")
		x.ImmediateCallerId.MarshalProtoJSON(s.WithField("immediateCallerId"))
	}
	if x.Target != nil || s.HasField("target") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("target")
		x.Target.MarshalProtoJSON(s.WithField("target"))
	}
	if x.Dtid != "" || s.HasField("dtid") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("dtid")
		s.WriteString(x.Dtid)
	}
	if len(x.Participants) > 0 || s.HasField("participants") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("participants")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.Participants {
			s.WriteMoreIf(&wroteElement)
			element.MarshalProtoJSON(s.WithField("participants"))
		}
		s.WriteArrayEnd()
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the CreateTransactionRequest to JSON.
func (x *CreateTransactionRequest) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the CreateTransactionRequest message from JSON.
func (x *CreateTransactionRequest) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "effective_caller_id", "effectiveCallerId":
			if s.ReadNil() {
				x.EffectiveCallerId = nil
				return
			}
			x.EffectiveCallerId = &vtrpc.CallerID{}
			x.EffectiveCallerId.UnmarshalProtoJSON(s.WithField("effective_caller_id", true))
		case "immediate_caller_id", "immediateCallerId":
			if s.ReadNil() {
				x.ImmediateCallerId = nil
				return
			}
			x.ImmediateCallerId = &VTGateCallerID{}
			x.ImmediateCallerId.UnmarshalProtoJSON(s.WithField("immediate_caller_id", true))
		case "target":
			if s.ReadNil() {
				x.Target = nil
				return
			}
			x.Target = &Target{}
			x.Target.UnmarshalProtoJSON(s.WithField("target", true))
		case "dtid":
			s.AddField("dtid")
			x.Dtid = s.ReadString()
		case "participants":
			s.AddField("participants")
			if s.ReadNil() {
				x.Participants = nil
				return
			}
			s.ReadArray(func() {
				if s.ReadNil() {
					x.Participants = append(x.Participants, nil)
					return
				}
				v := &Target{}
				v.UnmarshalProtoJSON(s.WithField("participants", false))
				if s.Err() != nil {
					return
				}
				x.Participants = append(x.Participants, v)
			})
		}
	})
}

// UnmarshalJSON unmarshals the CreateTransactionRequest from JSON.
func (x *CreateTransactionRequest) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the CreateTransactionResponse message to JSON.
func (x *CreateTransactionResponse) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	s.WriteObjectEnd()
}

// MarshalJSON marshals the CreateTransactionResponse to JSON.
func (x *CreateTransactionResponse) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the CreateTransactionResponse message from JSON.
func (x *CreateTransactionResponse) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
}

// UnmarshalJSON unmarshals the CreateTransactionResponse from JSON.
func (x *CreateTransactionResponse) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the StartCommitRequest message to JSON.
func (x *StartCommitRequest) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.EffectiveCallerId != nil || s.HasField("effectiveCallerId") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("effectiveCallerId")
		x.EffectiveCallerId.MarshalProtoJSON(s.WithField("effectiveCallerId"))
	}
	if x.ImmediateCallerId != nil || s.HasField("immediateCallerId") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("immediateCallerId")
		x.ImmediateCallerId.MarshalProtoJSON(s.WithField("immediateCallerId"))
	}
	if x.Target != nil || s.HasField("target") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("target")
		x.Target.MarshalProtoJSON(s.WithField("target"))
	}
	if x.TransactionId != 0 || s.HasField("transactionId") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("transactionId")
		s.WriteInt64(x.TransactionId)
	}
	if x.Dtid != "" || s.HasField("dtid") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("dtid")
		s.WriteString(x.Dtid)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the StartCommitRequest to JSON.
func (x *StartCommitRequest) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the StartCommitRequest message from JSON.
func (x *StartCommitRequest) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "effective_caller_id", "effectiveCallerId":
			if s.ReadNil() {
				x.EffectiveCallerId = nil
				return
			}
			x.EffectiveCallerId = &vtrpc.CallerID{}
			x.EffectiveCallerId.UnmarshalProtoJSON(s.WithField("effective_caller_id", true))
		case "immediate_caller_id", "immediateCallerId":
			if s.ReadNil() {
				x.ImmediateCallerId = nil
				return
			}
			x.ImmediateCallerId = &VTGateCallerID{}
			x.ImmediateCallerId.UnmarshalProtoJSON(s.WithField("immediate_caller_id", true))
		case "target":
			if s.ReadNil() {
				x.Target = nil
				return
			}
			x.Target = &Target{}
			x.Target.UnmarshalProtoJSON(s.WithField("target", true))
		case "transaction_id", "transactionId":
			s.AddField("transaction_id")
			x.TransactionId = s.ReadInt64()
		case "dtid":
			s.AddField("dtid")
			x.Dtid = s.ReadString()
		}
	})
}

// UnmarshalJSON unmarshals the StartCommitRequest from JSON.
func (x *StartCommitRequest) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the StartCommitResponse message to JSON.
func (x *StartCommitResponse) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	s.WriteObjectEnd()
}

// MarshalJSON marshals the StartCommitResponse to JSON.
func (x *StartCommitResponse) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the StartCommitResponse message from JSON.
func (x *StartCommitResponse) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
}

// UnmarshalJSON unmarshals the StartCommitResponse from JSON.
func (x *StartCommitResponse) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the SetRollbackRequest message to JSON.
func (x *SetRollbackRequest) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.EffectiveCallerId != nil || s.HasField("effectiveCallerId") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("effectiveCallerId")
		x.EffectiveCallerId.MarshalProtoJSON(s.WithField("effectiveCallerId"))
	}
	if x.ImmediateCallerId != nil || s.HasField("immediateCallerId") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("immediateCallerId")
		x.ImmediateCallerId.MarshalProtoJSON(s.WithField("immediateCallerId"))
	}
	if x.Target != nil || s.HasField("target") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("target")
		x.Target.MarshalProtoJSON(s.WithField("target"))
	}
	if x.TransactionId != 0 || s.HasField("transactionId") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("transactionId")
		s.WriteInt64(x.TransactionId)
	}
	if x.Dtid != "" || s.HasField("dtid") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("dtid")
		s.WriteString(x.Dtid)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the SetRollbackRequest to JSON.
func (x *SetRollbackRequest) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the SetRollbackRequest message from JSON.
func (x *SetRollbackRequest) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "effective_caller_id", "effectiveCallerId":
			if s.ReadNil() {
				x.EffectiveCallerId = nil
				return
			}
			x.EffectiveCallerId = &vtrpc.CallerID{}
			x.EffectiveCallerId.UnmarshalProtoJSON(s.WithField("effective_caller_id", true))
		case "immediate_caller_id", "immediateCallerId":
			if s.ReadNil() {
				x.ImmediateCallerId = nil
				return
			}
			x.ImmediateCallerId = &VTGateCallerID{}
			x.ImmediateCallerId.UnmarshalProtoJSON(s.WithField("immediate_caller_id", true))
		case "target":
			if s.ReadNil() {
				x.Target = nil
				return
			}
			x.Target = &Target{}
			x.Target.UnmarshalProtoJSON(s.WithField("target", true))
		case "transaction_id", "transactionId":
			s.AddField("transaction_id")
			x.TransactionId = s.ReadInt64()
		case "dtid":
			s.AddField("dtid")
			x.Dtid = s.ReadString()
		}
	})
}

// UnmarshalJSON unmarshals the SetRollbackRequest from JSON.
func (x *SetRollbackRequest) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the SetRollbackResponse message to JSON.
func (x *SetRollbackResponse) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	s.WriteObjectEnd()
}

// MarshalJSON marshals the SetRollbackResponse to JSON.
func (x *SetRollbackResponse) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the SetRollbackResponse message from JSON.
func (x *SetRollbackResponse) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
}

// UnmarshalJSON unmarshals the SetRollbackResponse from JSON.
func (x *SetRollbackResponse) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the ConcludeTransactionRequest message to JSON.
func (x *ConcludeTransactionRequest) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.EffectiveCallerId != nil || s.HasField("effectiveCallerId") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("effectiveCallerId")
		x.EffectiveCallerId.MarshalProtoJSON(s.WithField("effectiveCallerId"))
	}
	if x.ImmediateCallerId != nil || s.HasField("immediateCallerId") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("immediateCallerId")
		x.ImmediateCallerId.MarshalProtoJSON(s.WithField("immediateCallerId"))
	}
	if x.Target != nil || s.HasField("target") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("target")
		x.Target.MarshalProtoJSON(s.WithField("target"))
	}
	if x.Dtid != "" || s.HasField("dtid") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("dtid")
		s.WriteString(x.Dtid)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the ConcludeTransactionRequest to JSON.
func (x *ConcludeTransactionRequest) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the ConcludeTransactionRequest message from JSON.
func (x *ConcludeTransactionRequest) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "effective_caller_id", "effectiveCallerId":
			if s.ReadNil() {
				x.EffectiveCallerId = nil
				return
			}
			x.EffectiveCallerId = &vtrpc.CallerID{}
			x.EffectiveCallerId.UnmarshalProtoJSON(s.WithField("effective_caller_id", true))
		case "immediate_caller_id", "immediateCallerId":
			if s.ReadNil() {
				x.ImmediateCallerId = nil
				return
			}
			x.ImmediateCallerId = &VTGateCallerID{}
			x.ImmediateCallerId.UnmarshalProtoJSON(s.WithField("immediate_caller_id", true))
		case "target":
			if s.ReadNil() {
				x.Target = nil
				return
			}
			x.Target = &Target{}
			x.Target.UnmarshalProtoJSON(s.WithField("target", true))
		case "dtid":
			s.AddField("dtid")
			x.Dtid = s.ReadString()
		}
	})
}

// UnmarshalJSON unmarshals the ConcludeTransactionRequest from JSON.
func (x *ConcludeTransactionRequest) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the ConcludeTransactionResponse message to JSON.
func (x *ConcludeTransactionResponse) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	s.WriteObjectEnd()
}

// MarshalJSON marshals the ConcludeTransactionResponse to JSON.
func (x *ConcludeTransactionResponse) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the ConcludeTransactionResponse message from JSON.
func (x *ConcludeTransactionResponse) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
}

// UnmarshalJSON unmarshals the ConcludeTransactionResponse from JSON.
func (x *ConcludeTransactionResponse) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the ReadTransactionRequest message to JSON.
func (x *ReadTransactionRequest) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.EffectiveCallerId != nil || s.HasField("effectiveCallerId") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("effectiveCallerId")
		x.EffectiveCallerId.MarshalProtoJSON(s.WithField("effectiveCallerId"))
	}
	if x.ImmediateCallerId != nil || s.HasField("immediateCallerId") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("immediateCallerId")
		x.ImmediateCallerId.MarshalProtoJSON(s.WithField("immediateCallerId"))
	}
	if x.Target != nil || s.HasField("target") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("target")
		x.Target.MarshalProtoJSON(s.WithField("target"))
	}
	if x.Dtid != "" || s.HasField("dtid") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("dtid")
		s.WriteString(x.Dtid)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the ReadTransactionRequest to JSON.
func (x *ReadTransactionRequest) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the ReadTransactionRequest message from JSON.
func (x *ReadTransactionRequest) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "effective_caller_id", "effectiveCallerId":
			if s.ReadNil() {
				x.EffectiveCallerId = nil
				return
			}
			x.EffectiveCallerId = &vtrpc.CallerID{}
			x.EffectiveCallerId.UnmarshalProtoJSON(s.WithField("effective_caller_id", true))
		case "immediate_caller_id", "immediateCallerId":
			if s.ReadNil() {
				x.ImmediateCallerId = nil
				return
			}
			x.ImmediateCallerId = &VTGateCallerID{}
			x.ImmediateCallerId.UnmarshalProtoJSON(s.WithField("immediate_caller_id", true))
		case "target":
			if s.ReadNil() {
				x.Target = nil
				return
			}
			x.Target = &Target{}
			x.Target.UnmarshalProtoJSON(s.WithField("target", true))
		case "dtid":
			s.AddField("dtid")
			x.Dtid = s.ReadString()
		}
	})
}

// UnmarshalJSON unmarshals the ReadTransactionRequest from JSON.
func (x *ReadTransactionRequest) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the ReadTransactionResponse message to JSON.
func (x *ReadTransactionResponse) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Metadata != nil || s.HasField("metadata") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("metadata")
		x.Metadata.MarshalProtoJSON(s.WithField("metadata"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the ReadTransactionResponse to JSON.
func (x *ReadTransactionResponse) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the ReadTransactionResponse message from JSON.
func (x *ReadTransactionResponse) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "metadata":
			if s.ReadNil() {
				x.Metadata = nil
				return
			}
			x.Metadata = &TransactionMetadata{}
			x.Metadata.UnmarshalProtoJSON(s.WithField("metadata", true))
		}
	})
}

// UnmarshalJSON unmarshals the ReadTransactionResponse from JSON.
func (x *ReadTransactionResponse) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the BeginExecuteRequest message to JSON.
func (x *BeginExecuteRequest) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.EffectiveCallerId != nil || s.HasField("effectiveCallerId") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("effectiveCallerId")
		x.EffectiveCallerId.MarshalProtoJSON(s.WithField("effectiveCallerId"))
	}
	if x.ImmediateCallerId != nil || s.HasField("immediateCallerId") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("immediateCallerId")
		x.ImmediateCallerId.MarshalProtoJSON(s.WithField("immediateCallerId"))
	}
	if x.Target != nil || s.HasField("target") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("target")
		x.Target.MarshalProtoJSON(s.WithField("target"))
	}
	if x.Query != nil || s.HasField("query") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("query")
		x.Query.MarshalProtoJSON(s.WithField("query"))
	}
	if x.Options != nil || s.HasField("options") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("options")
		x.Options.MarshalProtoJSON(s.WithField("options"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the BeginExecuteRequest to JSON.
func (x *BeginExecuteRequest) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the BeginExecuteRequest message from JSON.
func (x *BeginExecuteRequest) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "effective_caller_id", "effectiveCallerId":
			if s.ReadNil() {
				x.EffectiveCallerId = nil
				return
			}
			x.EffectiveCallerId = &vtrpc.CallerID{}
			x.EffectiveCallerId.UnmarshalProtoJSON(s.WithField("effective_caller_id", true))
		case "immediate_caller_id", "immediateCallerId":
			if s.ReadNil() {
				x.ImmediateCallerId = nil
				return
			}
			x.ImmediateCallerId = &VTGateCallerID{}
			x.ImmediateCallerId.UnmarshalProtoJSON(s.WithField("immediate_caller_id", true))
		case "target":
			if s.ReadNil() {
				x.Target = nil
				return
			}
			x.Target = &Target{}
			x.Target.UnmarshalProtoJSON(s.WithField("target", true))
		case "query":
			if s.ReadNil() {
				x.Query = nil
				return
			}
			x.Query = &BoundQuery{}
			x.Query.UnmarshalProtoJSON(s.WithField("query", true))
		case "options":
			if s.ReadNil() {
				x.Options = nil
				return
			}
			x.Options = &ExecuteOptions{}
			x.Options.UnmarshalProtoJSON(s.WithField("options", true))
		}
	})
}

// UnmarshalJSON unmarshals the BeginExecuteRequest from JSON.
func (x *BeginExecuteRequest) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the BeginExecuteResponse message to JSON.
func (x *BeginExecuteResponse) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Error != nil || s.HasField("error") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("error")
		x.Error.MarshalProtoJSON(s.WithField("error"))
	}
	if x.Result != nil || s.HasField("result") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("result")
		x.Result.MarshalProtoJSON(s.WithField("result"))
	}
	if x.TransactionId != 0 || s.HasField("transactionId") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("transactionId")
		s.WriteInt64(x.TransactionId)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the BeginExecuteResponse to JSON.
func (x *BeginExecuteResponse) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the BeginExecuteResponse message from JSON.
func (x *BeginExecuteResponse) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "error":
			if s.ReadNil() {
				x.Error = nil
				return
			}
			x.Error = &vtrpc.RPCError{}
			x.Error.UnmarshalProtoJSON(s.WithField("error", true))
		case "result":
			if s.ReadNil() {
				x.Result = nil
				return
			}
			x.Result = &QueryResult{}
			x.Result.UnmarshalProtoJSON(s.WithField("result", true))
		case "transaction_id", "transactionId":
			s.AddField("transaction_id")
			x.TransactionId = s.ReadInt64()
		}
	})
}

// UnmarshalJSON unmarshals the BeginExecuteResponse from JSON.
func (x *BeginExecuteResponse) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the BeginExecuteBatchRequest message to JSON.
func (x *BeginExecuteBatchRequest) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.EffectiveCallerId != nil || s.HasField("effectiveCallerId") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("effectiveCallerId")
		x.EffectiveCallerId.MarshalProtoJSON(s.WithField("effectiveCallerId"))
	}
	if x.ImmediateCallerId != nil || s.HasField("immediateCallerId") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("immediateCallerId")
		x.ImmediateCallerId.MarshalProtoJSON(s.WithField("immediateCallerId"))
	}
	if x.Target != nil || s.HasField("target") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("target")
		x.Target.MarshalProtoJSON(s.WithField("target"))
	}
	if len(x.Queries) > 0 || s.HasField("queries") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("queries")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.Queries {
			s.WriteMoreIf(&wroteElement)
			element.MarshalProtoJSON(s.WithField("queries"))
		}
		s.WriteArrayEnd()
	}
	if x.AsTransaction || s.HasField("asTransaction") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("asTransaction")
		s.WriteBool(x.AsTransaction)
	}
	if x.Options != nil || s.HasField("options") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("options")
		x.Options.MarshalProtoJSON(s.WithField("options"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the BeginExecuteBatchRequest to JSON.
func (x *BeginExecuteBatchRequest) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the BeginExecuteBatchRequest message from JSON.
func (x *BeginExecuteBatchRequest) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "effective_caller_id", "effectiveCallerId":
			if s.ReadNil() {
				x.EffectiveCallerId = nil
				return
			}
			x.EffectiveCallerId = &vtrpc.CallerID{}
			x.EffectiveCallerId.UnmarshalProtoJSON(s.WithField("effective_caller_id", true))
		case "immediate_caller_id", "immediateCallerId":
			if s.ReadNil() {
				x.ImmediateCallerId = nil
				return
			}
			x.ImmediateCallerId = &VTGateCallerID{}
			x.ImmediateCallerId.UnmarshalProtoJSON(s.WithField("immediate_caller_id", true))
		case "target":
			if s.ReadNil() {
				x.Target = nil
				return
			}
			x.Target = &Target{}
			x.Target.UnmarshalProtoJSON(s.WithField("target", true))
		case "queries":
			s.AddField("queries")
			if s.ReadNil() {
				x.Queries = nil
				return
			}
			s.ReadArray(func() {
				if s.ReadNil() {
					x.Queries = append(x.Queries, nil)
					return
				}
				v := &BoundQuery{}
				v.UnmarshalProtoJSON(s.WithField("queries", false))
				if s.Err() != nil {
					return
				}
				x.Queries = append(x.Queries, v)
			})
		case "as_transaction", "asTransaction":
			s.AddField("as_transaction")
			x.AsTransaction = s.ReadBool()
		case "options":
			if s.ReadNil() {
				x.Options = nil
				return
			}
			x.Options = &ExecuteOptions{}
			x.Options.UnmarshalProtoJSON(s.WithField("options", true))
		}
	})
}

// UnmarshalJSON unmarshals the BeginExecuteBatchRequest from JSON.
func (x *BeginExecuteBatchRequest) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the BeginExecuteBatchResponse message to JSON.
func (x *BeginExecuteBatchResponse) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Error != nil || s.HasField("error") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("error")
		x.Error.MarshalProtoJSON(s.WithField("error"))
	}
	if len(x.Results) > 0 || s.HasField("results") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("results")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.Results {
			s.WriteMoreIf(&wroteElement)
			element.MarshalProtoJSON(s.WithField("results"))
		}
		s.WriteArrayEnd()
	}
	if x.TransactionId != 0 || s.HasField("transactionId") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("transactionId")
		s.WriteInt64(x.TransactionId)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the BeginExecuteBatchResponse to JSON.
func (x *BeginExecuteBatchResponse) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the BeginExecuteBatchResponse message from JSON.
func (x *BeginExecuteBatchResponse) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "error":
			if s.ReadNil() {
				x.Error = nil
				return
			}
			x.Error = &vtrpc.RPCError{}
			x.Error.UnmarshalProtoJSON(s.WithField("error", true))
		case "results":
			s.AddField("results")
			if s.ReadNil() {
				x.Results = nil
				return
			}
			s.ReadArray(func() {
				if s.ReadNil() {
					x.Results = append(x.Results, nil)
					return
				}
				v := &QueryResult{}
				v.UnmarshalProtoJSON(s.WithField("results", false))
				if s.Err() != nil {
					return
				}
				x.Results = append(x.Results, v)
			})
		case "transaction_id", "transactionId":
			s.AddField("transaction_id")
			x.TransactionId = s.ReadInt64()
		}
	})
}

// UnmarshalJSON unmarshals the BeginExecuteBatchResponse from JSON.
func (x *BeginExecuteBatchResponse) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the MessageStreamRequest message to JSON.
func (x *MessageStreamRequest) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.EffectiveCallerId != nil || s.HasField("effectiveCallerId") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("effectiveCallerId")
		x.EffectiveCallerId.MarshalProtoJSON(s.WithField("effectiveCallerId"))
	}
	if x.ImmediateCallerId != nil || s.HasField("immediateCallerId") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("immediateCallerId")
		x.ImmediateCallerId.MarshalProtoJSON(s.WithField("immediateCallerId"))
	}
	if x.Target != nil || s.HasField("target") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("target")
		x.Target.MarshalProtoJSON(s.WithField("target"))
	}
	if x.Name != "" || s.HasField("name") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("name")
		s.WriteString(x.Name)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the MessageStreamRequest to JSON.
func (x *MessageStreamRequest) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the MessageStreamRequest message from JSON.
func (x *MessageStreamRequest) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "effective_caller_id", "effectiveCallerId":
			if s.ReadNil() {
				x.EffectiveCallerId = nil
				return
			}
			x.EffectiveCallerId = &vtrpc.CallerID{}
			x.EffectiveCallerId.UnmarshalProtoJSON(s.WithField("effective_caller_id", true))
		case "immediate_caller_id", "immediateCallerId":
			if s.ReadNil() {
				x.ImmediateCallerId = nil
				return
			}
			x.ImmediateCallerId = &VTGateCallerID{}
			x.ImmediateCallerId.UnmarshalProtoJSON(s.WithField("immediate_caller_id", true))
		case "target":
			if s.ReadNil() {
				x.Target = nil
				return
			}
			x.Target = &Target{}
			x.Target.UnmarshalProtoJSON(s.WithField("target", true))
		case "name":
			s.AddField("name")
			x.Name = s.ReadString()
		}
	})
}

// UnmarshalJSON unmarshals the MessageStreamRequest from JSON.
func (x *MessageStreamRequest) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the MessageStreamResponse message to JSON.
func (x *MessageStreamResponse) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Result != nil || s.HasField("result") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("result")
		x.Result.MarshalProtoJSON(s.WithField("result"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the MessageStreamResponse to JSON.
func (x *MessageStreamResponse) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the MessageStreamResponse message from JSON.
func (x *MessageStreamResponse) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "result":
			if s.ReadNil() {
				x.Result = nil
				return
			}
			x.Result = &QueryResult{}
			x.Result.UnmarshalProtoJSON(s.WithField("result", true))
		}
	})
}

// UnmarshalJSON unmarshals the MessageStreamResponse from JSON.
func (x *MessageStreamResponse) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the MessageAckRequest message to JSON.
func (x *MessageAckRequest) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.EffectiveCallerId != nil || s.HasField("effectiveCallerId") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("effectiveCallerId")
		x.EffectiveCallerId.MarshalProtoJSON(s.WithField("effectiveCallerId"))
	}
	if x.ImmediateCallerId != nil || s.HasField("immediateCallerId") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("immediateCallerId")
		x.ImmediateCallerId.MarshalProtoJSON(s.WithField("immediateCallerId"))
	}
	if x.Target != nil || s.HasField("target") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("target")
		x.Target.MarshalProtoJSON(s.WithField("target"))
	}
	if x.Name != "" || s.HasField("name") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("name")
		s.WriteString(x.Name)
	}
	if len(x.Ids) > 0 || s.HasField("ids") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("ids")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.Ids {
			s.WriteMoreIf(&wroteElement)
			element.MarshalProtoJSON(s.WithField("ids"))
		}
		s.WriteArrayEnd()
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the MessageAckRequest to JSON.
func (x *MessageAckRequest) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the MessageAckRequest message from JSON.
func (x *MessageAckRequest) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "effective_caller_id", "effectiveCallerId":
			if s.ReadNil() {
				x.EffectiveCallerId = nil
				return
			}
			x.EffectiveCallerId = &vtrpc.CallerID{}
			x.EffectiveCallerId.UnmarshalProtoJSON(s.WithField("effective_caller_id", true))
		case "immediate_caller_id", "immediateCallerId":
			if s.ReadNil() {
				x.ImmediateCallerId = nil
				return
			}
			x.ImmediateCallerId = &VTGateCallerID{}
			x.ImmediateCallerId.UnmarshalProtoJSON(s.WithField("immediate_caller_id", true))
		case "target":
			if s.ReadNil() {
				x.Target = nil
				return
			}
			x.Target = &Target{}
			x.Target.UnmarshalProtoJSON(s.WithField("target", true))
		case "name":
			s.AddField("name")
			x.Name = s.ReadString()
		case "ids":
			s.AddField("ids")
			if s.ReadNil() {
				x.Ids = nil
				return
			}
			s.ReadArray(func() {
				if s.ReadNil() {
					x.Ids = append(x.Ids, nil)
					return
				}
				v := &Value{}
				v.UnmarshalProtoJSON(s.WithField("ids", false))
				if s.Err() != nil {
					return
				}
				x.Ids = append(x.Ids, v)
			})
		}
	})
}

// UnmarshalJSON unmarshals the MessageAckRequest from JSON.
func (x *MessageAckRequest) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the MessageAckResponse message to JSON.
func (x *MessageAckResponse) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Result != nil || s.HasField("result") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("result")
		x.Result.MarshalProtoJSON(s.WithField("result"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the MessageAckResponse to JSON.
func (x *MessageAckResponse) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the MessageAckResponse message from JSON.
func (x *MessageAckResponse) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "result":
			if s.ReadNil() {
				x.Result = nil
				return
			}
			x.Result = &QueryResult{}
			x.Result.UnmarshalProtoJSON(s.WithField("result", true))
		}
	})
}

// UnmarshalJSON unmarshals the MessageAckResponse from JSON.
func (x *MessageAckResponse) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the SplitQueryRequest_Algorithm to JSON.
func (x SplitQueryRequest_Algorithm) MarshalProtoJSON(s *json.MarshalState) {
	s.WriteEnumString(int32(x), SplitQueryRequest_Algorithm_name)
}

// MarshalText marshals the SplitQueryRequest_Algorithm to text.
func (x SplitQueryRequest_Algorithm) MarshalText() ([]byte, error) {
	return []byte(json.GetEnumString(int32(x), SplitQueryRequest_Algorithm_name)), nil
}

// MarshalJSON marshals the SplitQueryRequest_Algorithm to JSON.
func (x SplitQueryRequest_Algorithm) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the SplitQueryRequest_Algorithm from JSON.
func (x *SplitQueryRequest_Algorithm) UnmarshalProtoJSON(s *json.UnmarshalState) {
	v := s.ReadEnum(SplitQueryRequest_Algorithm_value)
	if err := s.Err(); err != nil {
		s.SetErrorf("could not read Algorithm enum: %v", err)
		return
	}
	*x = SplitQueryRequest_Algorithm(v)
}

// UnmarshalText unmarshals the SplitQueryRequest_Algorithm from text.
func (x *SplitQueryRequest_Algorithm) UnmarshalText(b []byte) error {
	i, err := json.ParseEnumString(string(b), SplitQueryRequest_Algorithm_value)
	if err != nil {
		return err
	}
	*x = SplitQueryRequest_Algorithm(i)
	return nil
}

// UnmarshalJSON unmarshals the SplitQueryRequest_Algorithm from JSON.
func (x *SplitQueryRequest_Algorithm) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the SplitQueryRequest message to JSON.
func (x *SplitQueryRequest) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.EffectiveCallerId != nil || s.HasField("effectiveCallerId") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("effectiveCallerId")
		x.EffectiveCallerId.MarshalProtoJSON(s.WithField("effectiveCallerId"))
	}
	if x.ImmediateCallerId != nil || s.HasField("immediateCallerId") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("immediateCallerId")
		x.ImmediateCallerId.MarshalProtoJSON(s.WithField("immediateCallerId"))
	}
	if x.Target != nil || s.HasField("target") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("target")
		x.Target.MarshalProtoJSON(s.WithField("target"))
	}
	if x.Query != nil || s.HasField("query") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("query")
		x.Query.MarshalProtoJSON(s.WithField("query"))
	}
	if len(x.SplitColumn) > 0 || s.HasField("splitColumn") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("splitColumn")
		s.WriteStringArray(x.SplitColumn)
	}
	if x.SplitCount != 0 || s.HasField("splitCount") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("splitCount")
		s.WriteInt64(x.SplitCount)
	}
	if x.NumRowsPerQueryPart != 0 || s.HasField("numRowsPerQueryPart") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("numRowsPerQueryPart")
		s.WriteInt64(x.NumRowsPerQueryPart)
	}
	if x.Algorithm != 0 || s.HasField("algorithm") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("algorithm")
		x.Algorithm.MarshalProtoJSON(s)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the SplitQueryRequest to JSON.
func (x *SplitQueryRequest) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the SplitQueryRequest message from JSON.
func (x *SplitQueryRequest) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "effective_caller_id", "effectiveCallerId":
			if s.ReadNil() {
				x.EffectiveCallerId = nil
				return
			}
			x.EffectiveCallerId = &vtrpc.CallerID{}
			x.EffectiveCallerId.UnmarshalProtoJSON(s.WithField("effective_caller_id", true))
		case "immediate_caller_id", "immediateCallerId":
			if s.ReadNil() {
				x.ImmediateCallerId = nil
				return
			}
			x.ImmediateCallerId = &VTGateCallerID{}
			x.ImmediateCallerId.UnmarshalProtoJSON(s.WithField("immediate_caller_id", true))
		case "target":
			if s.ReadNil() {
				x.Target = nil
				return
			}
			x.Target = &Target{}
			x.Target.UnmarshalProtoJSON(s.WithField("target", true))
		case "query":
			if s.ReadNil() {
				x.Query = nil
				return
			}
			x.Query = &BoundQuery{}
			x.Query.UnmarshalProtoJSON(s.WithField("query", true))
		case "split_column", "splitColumn":
			s.AddField("split_column")
			if s.ReadNil() {
				x.SplitColumn = nil
				return
			}
			x.SplitColumn = s.ReadStringArray()
		case "split_count", "splitCount":
			s.AddField("split_count")
			x.SplitCount = s.ReadInt64()
		case "num_rows_per_query_part", "numRowsPerQueryPart":
			s.AddField("num_rows_per_query_part")
			x.NumRowsPerQueryPart = s.ReadInt64()
		case "algorithm":
			s.AddField("algorithm")
			x.Algorithm.UnmarshalProtoJSON(s)
		}
	})
}

// UnmarshalJSON unmarshals the SplitQueryRequest from JSON.
func (x *SplitQueryRequest) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the QuerySplit message to JSON.
func (x *QuerySplit) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Query != nil || s.HasField("query") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("query")
		x.Query.MarshalProtoJSON(s.WithField("query"))
	}
	if x.RowCount != 0 || s.HasField("rowCount") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("rowCount")
		s.WriteInt64(x.RowCount)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the QuerySplit to JSON.
func (x *QuerySplit) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the QuerySplit message from JSON.
func (x *QuerySplit) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "query":
			if s.ReadNil() {
				x.Query = nil
				return
			}
			x.Query = &BoundQuery{}
			x.Query.UnmarshalProtoJSON(s.WithField("query", true))
		case "row_count", "rowCount":
			s.AddField("row_count")
			x.RowCount = s.ReadInt64()
		}
	})
}

// UnmarshalJSON unmarshals the QuerySplit from JSON.
func (x *QuerySplit) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the SplitQueryResponse message to JSON.
func (x *SplitQueryResponse) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if len(x.Queries) > 0 || s.HasField("queries") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("queries")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.Queries {
			s.WriteMoreIf(&wroteElement)
			element.MarshalProtoJSON(s.WithField("queries"))
		}
		s.WriteArrayEnd()
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the SplitQueryResponse to JSON.
func (x *SplitQueryResponse) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the SplitQueryResponse message from JSON.
func (x *SplitQueryResponse) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "queries":
			s.AddField("queries")
			if s.ReadNil() {
				x.Queries = nil
				return
			}
			s.ReadArray(func() {
				if s.ReadNil() {
					x.Queries = append(x.Queries, nil)
					return
				}
				v := &QuerySplit{}
				v.UnmarshalProtoJSON(s.WithField("queries", false))
				if s.Err() != nil {
					return
				}
				x.Queries = append(x.Queries, v)
			})
		}
	})
}

// UnmarshalJSON unmarshals the SplitQueryResponse from JSON.
func (x *SplitQueryResponse) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the StreamHealthRequest message to JSON.
func (x *StreamHealthRequest) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	s.WriteObjectEnd()
}

// MarshalJSON marshals the StreamHealthRequest to JSON.
func (x *StreamHealthRequest) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the StreamHealthRequest message from JSON.
func (x *StreamHealthRequest) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
}

// UnmarshalJSON unmarshals the StreamHealthRequest from JSON.
func (x *StreamHealthRequest) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the RealtimeStats message to JSON.
func (x *RealtimeStats) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.HealthError != "" || s.HasField("healthError") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("healthError")
		s.WriteString(x.HealthError)
	}
	if x.SecondsBehindMaster != 0 || s.HasField("secondsBehindMaster") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("secondsBehindMaster")
		s.WriteUint32(x.SecondsBehindMaster)
	}
	if x.BinlogPlayersCount != 0 || s.HasField("binlogPlayersCount") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("binlogPlayersCount")
		s.WriteInt32(x.BinlogPlayersCount)
	}
	if x.SecondsBehindMasterFilteredReplication != 0 || s.HasField("secondsBehindMasterFilteredReplication") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("secondsBehindMasterFilteredReplication")
		s.WriteInt64(x.SecondsBehindMasterFilteredReplication)
	}
	if x.CpuUsage != 0 || s.HasField("cpuUsage") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("cpuUsage")
		s.WriteFloat64(x.CpuUsage)
	}
	if x.Qps != 0 || s.HasField("qps") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("qps")
		s.WriteFloat64(x.Qps)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the RealtimeStats to JSON.
func (x *RealtimeStats) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the RealtimeStats message from JSON.
func (x *RealtimeStats) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "health_error", "healthError":
			s.AddField("health_error")
			x.HealthError = s.ReadString()
		case "seconds_behind_master", "secondsBehindMaster":
			s.AddField("seconds_behind_master")
			x.SecondsBehindMaster = s.ReadUint32()
		case "binlog_players_count", "binlogPlayersCount":
			s.AddField("binlog_players_count")
			x.BinlogPlayersCount = s.ReadInt32()
		case "seconds_behind_master_filtered_replication", "secondsBehindMasterFilteredReplication":
			s.AddField("seconds_behind_master_filtered_replication")
			x.SecondsBehindMasterFilteredReplication = s.ReadInt64()
		case "cpu_usage", "cpuUsage":
			s.AddField("cpu_usage")
			x.CpuUsage = s.ReadFloat64()
		case "qps":
			s.AddField("qps")
			x.Qps = s.ReadFloat64()
		}
	})
}

// UnmarshalJSON unmarshals the RealtimeStats from JSON.
func (x *RealtimeStats) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the AggregateStats message to JSON.
func (x *AggregateStats) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.HealthyTabletCount != 0 || s.HasField("healthyTabletCount") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("healthyTabletCount")
		s.WriteInt32(x.HealthyTabletCount)
	}
	if x.UnhealthyTabletCount != 0 || s.HasField("unhealthyTabletCount") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("unhealthyTabletCount")
		s.WriteInt32(x.UnhealthyTabletCount)
	}
	if x.SecondsBehindMasterMin != 0 || s.HasField("secondsBehindMasterMin") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("secondsBehindMasterMin")
		s.WriteUint32(x.SecondsBehindMasterMin)
	}
	if x.SecondsBehindMasterMax != 0 || s.HasField("secondsBehindMasterMax") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("secondsBehindMasterMax")
		s.WriteUint32(x.SecondsBehindMasterMax)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the AggregateStats to JSON.
func (x *AggregateStats) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the AggregateStats message from JSON.
func (x *AggregateStats) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "healthy_tablet_count", "healthyTabletCount":
			s.AddField("healthy_tablet_count")
			x.HealthyTabletCount = s.ReadInt32()
		case "unhealthy_tablet_count", "unhealthyTabletCount":
			s.AddField("unhealthy_tablet_count")
			x.UnhealthyTabletCount = s.ReadInt32()
		case "seconds_behind_master_min", "secondsBehindMasterMin":
			s.AddField("seconds_behind_master_min")
			x.SecondsBehindMasterMin = s.ReadUint32()
		case "seconds_behind_master_max", "secondsBehindMasterMax":
			s.AddField("seconds_behind_master_max")
			x.SecondsBehindMasterMax = s.ReadUint32()
		}
	})
}

// UnmarshalJSON unmarshals the AggregateStats from JSON.
func (x *AggregateStats) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the StreamHealthResponse message to JSON.
func (x *StreamHealthResponse) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Target != nil || s.HasField("target") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("target")
		x.Target.MarshalProtoJSON(s.WithField("target"))
	}
	if x.Serving || s.HasField("serving") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("serving")
		s.WriteBool(x.Serving)
	}
	if x.TabletExternallyReparentedTimestamp != 0 || s.HasField("tabletExternallyReparentedTimestamp") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("tabletExternallyReparentedTimestamp")
		s.WriteInt64(x.TabletExternallyReparentedTimestamp)
	}
	if x.RealtimeStats != nil || s.HasField("realtimeStats") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("realtimeStats")
		x.RealtimeStats.MarshalProtoJSON(s.WithField("realtimeStats"))
	}
	if x.TabletAlias != nil || s.HasField("tabletAlias") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("tabletAlias")
		x.TabletAlias.MarshalProtoJSON(s.WithField("tabletAlias"))
	}
	if x.AggregateStats != nil || s.HasField("aggregateStats") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("aggregateStats")
		x.AggregateStats.MarshalProtoJSON(s.WithField("aggregateStats"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the StreamHealthResponse to JSON.
func (x *StreamHealthResponse) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the StreamHealthResponse message from JSON.
func (x *StreamHealthResponse) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "target":
			if s.ReadNil() {
				x.Target = nil
				return
			}
			x.Target = &Target{}
			x.Target.UnmarshalProtoJSON(s.WithField("target", true))
		case "serving":
			s.AddField("serving")
			x.Serving = s.ReadBool()
		case "tablet_externally_reparented_timestamp", "tabletExternallyReparentedTimestamp":
			s.AddField("tablet_externally_reparented_timestamp")
			x.TabletExternallyReparentedTimestamp = s.ReadInt64()
		case "realtime_stats", "realtimeStats":
			if s.ReadNil() {
				x.RealtimeStats = nil
				return
			}
			x.RealtimeStats = &RealtimeStats{}
			x.RealtimeStats.UnmarshalProtoJSON(s.WithField("realtime_stats", true))
		case "tablet_alias", "tabletAlias":
			if s.ReadNil() {
				x.TabletAlias = nil
				return
			}
			x.TabletAlias = &topodata.TabletAlias{}
			x.TabletAlias.UnmarshalProtoJSON(s.WithField("tablet_alias", true))
		case "aggregate_stats", "aggregateStats":
			if s.ReadNil() {
				x.AggregateStats = nil
				return
			}
			x.AggregateStats = &AggregateStats{}
			x.AggregateStats.UnmarshalProtoJSON(s.WithField("aggregate_stats", true))
		}
	})
}

// UnmarshalJSON unmarshals the StreamHealthResponse from JSON.
func (x *StreamHealthResponse) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the UpdateStreamRequest message to JSON.
func (x *UpdateStreamRequest) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.EffectiveCallerId != nil || s.HasField("effectiveCallerId") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("effectiveCallerId")
		x.EffectiveCallerId.MarshalProtoJSON(s.WithField("effectiveCallerId"))
	}
	if x.ImmediateCallerId != nil || s.HasField("immediateCallerId") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("immediateCallerId")
		x.ImmediateCallerId.MarshalProtoJSON(s.WithField("immediateCallerId"))
	}
	if x.Target != nil || s.HasField("target") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("target")
		x.Target.MarshalProtoJSON(s.WithField("target"))
	}
	if x.Position != "" || s.HasField("position") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("position")
		s.WriteString(x.Position)
	}
	if x.Timestamp != 0 || s.HasField("timestamp") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("timestamp")
		s.WriteInt64(x.Timestamp)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the UpdateStreamRequest to JSON.
func (x *UpdateStreamRequest) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the UpdateStreamRequest message from JSON.
func (x *UpdateStreamRequest) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "effective_caller_id", "effectiveCallerId":
			if s.ReadNil() {
				x.EffectiveCallerId = nil
				return
			}
			x.EffectiveCallerId = &vtrpc.CallerID{}
			x.EffectiveCallerId.UnmarshalProtoJSON(s.WithField("effective_caller_id", true))
		case "immediate_caller_id", "immediateCallerId":
			if s.ReadNil() {
				x.ImmediateCallerId = nil
				return
			}
			x.ImmediateCallerId = &VTGateCallerID{}
			x.ImmediateCallerId.UnmarshalProtoJSON(s.WithField("immediate_caller_id", true))
		case "target":
			if s.ReadNil() {
				x.Target = nil
				return
			}
			x.Target = &Target{}
			x.Target.UnmarshalProtoJSON(s.WithField("target", true))
		case "position":
			s.AddField("position")
			x.Position = s.ReadString()
		case "timestamp":
			s.AddField("timestamp")
			x.Timestamp = s.ReadInt64()
		}
	})
}

// UnmarshalJSON unmarshals the UpdateStreamRequest from JSON.
func (x *UpdateStreamRequest) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the UpdateStreamResponse message to JSON.
func (x *UpdateStreamResponse) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Event != nil || s.HasField("event") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("event")
		x.Event.MarshalProtoJSON(s.WithField("event"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the UpdateStreamResponse to JSON.
func (x *UpdateStreamResponse) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the UpdateStreamResponse message from JSON.
func (x *UpdateStreamResponse) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "event":
			if s.ReadNil() {
				x.Event = nil
				return
			}
			x.Event = &StreamEvent{}
			x.Event.UnmarshalProtoJSON(s.WithField("event", true))
		}
	})
}

// UnmarshalJSON unmarshals the UpdateStreamResponse from JSON.
func (x *UpdateStreamResponse) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the TransactionMetadata message to JSON.
func (x *TransactionMetadata) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Dtid != "" || s.HasField("dtid") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("dtid")
		s.WriteString(x.Dtid)
	}
	if x.State != 0 || s.HasField("state") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("state")
		x.State.MarshalProtoJSON(s)
	}
	if x.TimeCreated != 0 || s.HasField("timeCreated") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("timeCreated")
		s.WriteInt64(x.TimeCreated)
	}
	if len(x.Participants) > 0 || s.HasField("participants") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("participants")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.Participants {
			s.WriteMoreIf(&wroteElement)
			element.MarshalProtoJSON(s.WithField("participants"))
		}
		s.WriteArrayEnd()
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the TransactionMetadata to JSON.
func (x *TransactionMetadata) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the TransactionMetadata message from JSON.
func (x *TransactionMetadata) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "dtid":
			s.AddField("dtid")
			x.Dtid = s.ReadString()
		case "state":
			s.AddField("state")
			x.State.UnmarshalProtoJSON(s)
		case "time_created", "timeCreated":
			s.AddField("time_created")
			x.TimeCreated = s.ReadInt64()
		case "participants":
			s.AddField("participants")
			if s.ReadNil() {
				x.Participants = nil
				return
			}
			s.ReadArray(func() {
				if s.ReadNil() {
					x.Participants = append(x.Participants, nil)
					return
				}
				v := &Target{}
				v.UnmarshalProtoJSON(s.WithField("participants", false))
				if s.Err() != nil {
					return
				}
				x.Participants = append(x.Participants, v)
			})
		}
	})
}

// UnmarshalJSON unmarshals the TransactionMetadata from JSON.
func (x *TransactionMetadata) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

func (m *Target) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Target) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *Target) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.Cell) > 0 {
		i -= len(m.Cell)
		copy(dAtA[i:], m.Cell)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Cell)))
		i--
		dAtA[i] = 0x22
	}
	if m.TabletType != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.TabletType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Shard) > 0 {
		i -= len(m.Shard)
		copy(dAtA[i:], m.Shard)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Shard)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Keyspace) > 0 {
		i -= len(m.Keyspace)
		copy(dAtA[i:], m.Keyspace)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Keyspace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VTGateCallerID) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VTGateCallerID) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *VTGateCallerID) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.Groups) > 0 {
		for iNdEx := len(m.Groups) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Groups[iNdEx])
			copy(dAtA[i:], m.Groups[iNdEx])
			i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Groups[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EventToken) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EventToken) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *EventToken) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.Position) > 0 {
		i -= len(m.Position)
		copy(dAtA[i:], m.Position)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Position)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Shard) > 0 {
		i -= len(m.Shard)
		copy(dAtA[i:], m.Shard)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Shard)))
		i--
		dAtA[i] = 0x12
	}
	if m.Timestamp != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Value) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Value) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *Value) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BindVariable) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BindVariable) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *BindVariable) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.Values) > 0 {
		for iNdEx := len(m.Values) - 1; iNdEx >= 0; iNdEx-- {
			size, err := m.Values[iNdEx].MarshalToSizedBufferVT(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.Value) > 0 {
		i -= len(m.Value)
		copy(dAtA[i:], m.Value)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Value)))
		i--
		dAtA[i] = 0x12
	}
	if m.Type != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BoundQuery) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BoundQuery) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *BoundQuery) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.BindVariables) > 0 {
		for k := range m.BindVariables {
			v := m.BindVariables[k]
			baseI := i
			size, err := v.MarshalToSizedBufferVT(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x12
			i -= len(k)
			copy(dAtA[i:], k)
			i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(k)))
			i--
			dAtA[i] = 0xa
			i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(baseI-i))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Sql) > 0 {
		i -= len(m.Sql)
		copy(dAtA[i:], m.Sql)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Sql)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExecuteOptions) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecuteOptions) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *ExecuteOptions) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.SkipQueryPlanCache {
		i--
		if m.SkipQueryPlanCache {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.TransactionIsolation != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.TransactionIsolation))
		i--
		dAtA[i] = 0x48
	}
	if m.SqlSelectLimit != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.SqlSelectLimit))
		i--
		dAtA[i] = 0x40
	}
	if m.Workload != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.Workload))
		i--
		dAtA[i] = 0x30
	}
	if m.ClientFoundRows {
		i--
		if m.ClientFoundRows {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if m.IncludedFields != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.IncludedFields))
		i--
		dAtA[i] = 0x20
	}
	if m.CompareEventToken != nil {
		size, err := m.CompareEventToken.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1a
	}
	if m.IncludeEventToken {
		i--
		if m.IncludeEventToken {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	return len(dAtA) - i, nil
}

func (m *Field) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Field) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *Field) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.Flags != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.Flags))
		i--
		dAtA[i] = 0x50
	}
	if m.Decimals != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.Decimals))
		i--
		dAtA[i] = 0x48
	}
	if m.Charset != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.Charset))
		i--
		dAtA[i] = 0x40
	}
	if m.ColumnLength != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.ColumnLength))
		i--
		dAtA[i] = 0x38
	}
	if len(m.OrgName) > 0 {
		i -= len(m.OrgName)
		copy(dAtA[i:], m.OrgName)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.OrgName)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Database) > 0 {
		i -= len(m.Database)
		copy(dAtA[i:], m.Database)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Database)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.OrgTable) > 0 {
		i -= len(m.OrgTable)
		copy(dAtA[i:], m.OrgTable)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.OrgTable)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Table) > 0 {
		i -= len(m.Table)
		copy(dAtA[i:], m.Table)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Table)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Type != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Row) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Row) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *Row) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.Values) > 0 {
		i -= len(m.Values)
		copy(dAtA[i:], m.Values)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Values)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Lengths) > 0 {
		var pksize2 int
		for _, num := range m.Lengths {
			pksize2 += protobuf_go_lite.SizeOfZigzag(uint64(num))
		}
		i -= pksize2
		j1 := i
		for _, num := range m.Lengths {
			x3 := (uint64(num) << 1) ^ uint64((num >> 63))
			for x3 >= 1<<7 {
				dAtA[j1] = uint8(uint64(x3)&0x7f | 0x80)
				j1++
				x3 >>= 7
			}
			dAtA[j1] = uint8(x3)
			j1++
		}
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(pksize2))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResultExtras) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResultExtras) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *ResultExtras) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.Fresher {
		i--
		if m.Fresher {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.EventToken != nil {
		size, err := m.EventToken.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QueryResult) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryResult) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *QueryResult) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.Extras != nil {
		size, err := m.Extras.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Rows) > 0 {
		for iNdEx := len(m.Rows) - 1; iNdEx >= 0; iNdEx-- {
			size, err := m.Rows[iNdEx].MarshalToSizedBufferVT(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.InsertId != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.InsertId))
		i--
		dAtA[i] = 0x18
	}
	if m.RowsAffected != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.RowsAffected))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Fields) > 0 {
		for iNdEx := len(m.Fields) - 1; iNdEx >= 0; iNdEx-- {
			size, err := m.Fields[iNdEx].MarshalToSizedBufferVT(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *QueryWarning) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QueryWarning) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *QueryWarning) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.Message) > 0 {
		i -= len(m.Message)
		copy(dAtA[i:], m.Message)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Message)))
		i--
		dAtA[i] = 0x12
	}
	if m.Code != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.Code))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StreamEvent_Statement) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamEvent_Statement) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *StreamEvent_Statement) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.Sql) > 0 {
		i -= len(m.Sql)
		copy(dAtA[i:], m.Sql)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Sql)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.PrimaryKeyValues) > 0 {
		for iNdEx := len(m.PrimaryKeyValues) - 1; iNdEx >= 0; iNdEx-- {
			size, err := m.PrimaryKeyValues[iNdEx].MarshalToSizedBufferVT(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.PrimaryKeyFields) > 0 {
		for iNdEx := len(m.PrimaryKeyFields) - 1; iNdEx >= 0; iNdEx-- {
			size, err := m.PrimaryKeyFields[iNdEx].MarshalToSizedBufferVT(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x1a
		}
	}
	if len(m.TableName) > 0 {
		i -= len(m.TableName)
		copy(dAtA[i:], m.TableName)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.TableName)))
		i--
		dAtA[i] = 0x12
	}
	if m.Category != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.Category))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StreamEvent) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamEvent) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *StreamEvent) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.EventToken != nil {
		size, err := m.EventToken.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Statements) > 0 {
		for iNdEx := len(m.Statements) - 1; iNdEx >= 0; iNdEx-- {
			size, err := m.Statements[iNdEx].MarshalToSizedBufferVT(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *ExecuteRequest) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecuteRequest) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *ExecuteRequest) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.Options != nil {
		size, err := m.Options.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x32
	}
	if m.TransactionId != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.TransactionId))
		i--
		dAtA[i] = 0x28
	}
	if m.Query != nil {
		size, err := m.Query.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x22
	}
	if m.Target != nil {
		size, err := m.Target.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1a
	}
	if m.ImmediateCallerId != nil {
		size, err := m.ImmediateCallerId.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x12
	}
	if m.EffectiveCallerId != nil {
		size, err := m.EffectiveCallerId.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExecuteResponse) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecuteResponse) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *ExecuteResponse) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.Result != nil {
		size, err := m.Result.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ResultWithError) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ResultWithError) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *ResultWithError) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.Result != nil {
		size, err := m.Result.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x12
	}
	if m.Error != nil {
		size, err := m.Error.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExecuteBatchRequest) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecuteBatchRequest) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *ExecuteBatchRequest) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.Options != nil {
		size, err := m.Options.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x3a
	}
	if m.TransactionId != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.TransactionId))
		i--
		dAtA[i] = 0x30
	}
	if m.AsTransaction {
		i--
		if m.AsTransaction {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.Queries) > 0 {
		for iNdEx := len(m.Queries) - 1; iNdEx >= 0; iNdEx-- {
			size, err := m.Queries[iNdEx].MarshalToSizedBufferVT(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Target != nil {
		size, err := m.Target.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1a
	}
	if m.ImmediateCallerId != nil {
		size, err := m.ImmediateCallerId.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x12
	}
	if m.EffectiveCallerId != nil {
		size, err := m.EffectiveCallerId.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ExecuteBatchResponse) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ExecuteBatchResponse) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *ExecuteBatchResponse) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.Results) > 0 {
		for iNdEx := len(m.Results) - 1; iNdEx >= 0; iNdEx-- {
			size, err := m.Results[iNdEx].MarshalToSizedBufferVT(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *StreamExecuteRequest) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamExecuteRequest) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *StreamExecuteRequest) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.TransactionId != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.TransactionId))
		i--
		dAtA[i] = 0x30
	}
	if m.Options != nil {
		size, err := m.Options.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x2a
	}
	if m.Query != nil {
		size, err := m.Query.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x22
	}
	if m.Target != nil {
		size, err := m.Target.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1a
	}
	if m.ImmediateCallerId != nil {
		size, err := m.ImmediateCallerId.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x12
	}
	if m.EffectiveCallerId != nil {
		size, err := m.EffectiveCallerId.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StreamExecuteResponse) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamExecuteResponse) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *StreamExecuteResponse) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.Result != nil {
		size, err := m.Result.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BeginRequest) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BeginRequest) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *BeginRequest) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.Options != nil {
		size, err := m.Options.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x22
	}
	if m.Target != nil {
		size, err := m.Target.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1a
	}
	if m.ImmediateCallerId != nil {
		size, err := m.ImmediateCallerId.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x12
	}
	if m.EffectiveCallerId != nil {
		size, err := m.EffectiveCallerId.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BeginResponse) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BeginResponse) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *BeginResponse) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.TransactionId != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.TransactionId))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CommitRequest) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommitRequest) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *CommitRequest) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.TransactionId != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.TransactionId))
		i--
		dAtA[i] = 0x20
	}
	if m.Target != nil {
		size, err := m.Target.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1a
	}
	if m.ImmediateCallerId != nil {
		size, err := m.ImmediateCallerId.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x12
	}
	if m.EffectiveCallerId != nil {
		size, err := m.EffectiveCallerId.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CommitResponse) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommitResponse) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *CommitResponse) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	return len(dAtA) - i, nil
}

func (m *RollbackRequest) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RollbackRequest) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RollbackRequest) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.TransactionId != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.TransactionId))
		i--
		dAtA[i] = 0x20
	}
	if m.Target != nil {
		size, err := m.Target.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1a
	}
	if m.ImmediateCallerId != nil {
		size, err := m.ImmediateCallerId.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x12
	}
	if m.EffectiveCallerId != nil {
		size, err := m.EffectiveCallerId.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RollbackResponse) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RollbackResponse) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RollbackResponse) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	return len(dAtA) - i, nil
}

func (m *PrepareRequest) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrepareRequest) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *PrepareRequest) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.Dtid) > 0 {
		i -= len(m.Dtid)
		copy(dAtA[i:], m.Dtid)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Dtid)))
		i--
		dAtA[i] = 0x2a
	}
	if m.TransactionId != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.TransactionId))
		i--
		dAtA[i] = 0x20
	}
	if m.Target != nil {
		size, err := m.Target.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1a
	}
	if m.ImmediateCallerId != nil {
		size, err := m.ImmediateCallerId.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x12
	}
	if m.EffectiveCallerId != nil {
		size, err := m.EffectiveCallerId.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *PrepareResponse) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PrepareResponse) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *PrepareResponse) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	return len(dAtA) - i, nil
}

func (m *CommitPreparedRequest) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommitPreparedRequest) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *CommitPreparedRequest) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.Dtid) > 0 {
		i -= len(m.Dtid)
		copy(dAtA[i:], m.Dtid)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Dtid)))
		i--
		dAtA[i] = 0x22
	}
	if m.Target != nil {
		size, err := m.Target.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1a
	}
	if m.ImmediateCallerId != nil {
		size, err := m.ImmediateCallerId.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x12
	}
	if m.EffectiveCallerId != nil {
		size, err := m.EffectiveCallerId.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CommitPreparedResponse) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CommitPreparedResponse) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *CommitPreparedResponse) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	return len(dAtA) - i, nil
}

func (m *RollbackPreparedRequest) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RollbackPreparedRequest) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RollbackPreparedRequest) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.Dtid) > 0 {
		i -= len(m.Dtid)
		copy(dAtA[i:], m.Dtid)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Dtid)))
		i--
		dAtA[i] = 0x2a
	}
	if m.TransactionId != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.TransactionId))
		i--
		dAtA[i] = 0x20
	}
	if m.Target != nil {
		size, err := m.Target.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1a
	}
	if m.ImmediateCallerId != nil {
		size, err := m.ImmediateCallerId.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x12
	}
	if m.EffectiveCallerId != nil {
		size, err := m.EffectiveCallerId.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RollbackPreparedResponse) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RollbackPreparedResponse) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RollbackPreparedResponse) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	return len(dAtA) - i, nil
}

func (m *CreateTransactionRequest) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateTransactionRequest) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *CreateTransactionRequest) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.Participants) > 0 {
		for iNdEx := len(m.Participants) - 1; iNdEx >= 0; iNdEx-- {
			size, err := m.Participants[iNdEx].MarshalToSizedBufferVT(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Dtid) > 0 {
		i -= len(m.Dtid)
		copy(dAtA[i:], m.Dtid)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Dtid)))
		i--
		dAtA[i] = 0x22
	}
	if m.Target != nil {
		size, err := m.Target.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1a
	}
	if m.ImmediateCallerId != nil {
		size, err := m.ImmediateCallerId.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x12
	}
	if m.EffectiveCallerId != nil {
		size, err := m.EffectiveCallerId.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *CreateTransactionResponse) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateTransactionResponse) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *CreateTransactionResponse) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	return len(dAtA) - i, nil
}

func (m *StartCommitRequest) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartCommitRequest) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *StartCommitRequest) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.Dtid) > 0 {
		i -= len(m.Dtid)
		copy(dAtA[i:], m.Dtid)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Dtid)))
		i--
		dAtA[i] = 0x2a
	}
	if m.TransactionId != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.TransactionId))
		i--
		dAtA[i] = 0x20
	}
	if m.Target != nil {
		size, err := m.Target.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1a
	}
	if m.ImmediateCallerId != nil {
		size, err := m.ImmediateCallerId.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x12
	}
	if m.EffectiveCallerId != nil {
		size, err := m.EffectiveCallerId.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StartCommitResponse) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StartCommitResponse) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *StartCommitResponse) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	return len(dAtA) - i, nil
}

func (m *SetRollbackRequest) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetRollbackRequest) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *SetRollbackRequest) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.Dtid) > 0 {
		i -= len(m.Dtid)
		copy(dAtA[i:], m.Dtid)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Dtid)))
		i--
		dAtA[i] = 0x2a
	}
	if m.TransactionId != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.TransactionId))
		i--
		dAtA[i] = 0x20
	}
	if m.Target != nil {
		size, err := m.Target.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1a
	}
	if m.ImmediateCallerId != nil {
		size, err := m.ImmediateCallerId.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x12
	}
	if m.EffectiveCallerId != nil {
		size, err := m.EffectiveCallerId.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SetRollbackResponse) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SetRollbackResponse) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *SetRollbackResponse) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	return len(dAtA) - i, nil
}

func (m *ConcludeTransactionRequest) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConcludeTransactionRequest) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *ConcludeTransactionRequest) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.Dtid) > 0 {
		i -= len(m.Dtid)
		copy(dAtA[i:], m.Dtid)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Dtid)))
		i--
		dAtA[i] = 0x22
	}
	if m.Target != nil {
		size, err := m.Target.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1a
	}
	if m.ImmediateCallerId != nil {
		size, err := m.ImmediateCallerId.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x12
	}
	if m.EffectiveCallerId != nil {
		size, err := m.EffectiveCallerId.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ConcludeTransactionResponse) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ConcludeTransactionResponse) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *ConcludeTransactionResponse) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	return len(dAtA) - i, nil
}

func (m *ReadTransactionRequest) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReadTransactionRequest) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *ReadTransactionRequest) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.Dtid) > 0 {
		i -= len(m.Dtid)
		copy(dAtA[i:], m.Dtid)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Dtid)))
		i--
		dAtA[i] = 0x22
	}
	if m.Target != nil {
		size, err := m.Target.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1a
	}
	if m.ImmediateCallerId != nil {
		size, err := m.ImmediateCallerId.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x12
	}
	if m.EffectiveCallerId != nil {
		size, err := m.EffectiveCallerId.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ReadTransactionResponse) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReadTransactionResponse) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *ReadTransactionResponse) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.Metadata != nil {
		size, err := m.Metadata.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BeginExecuteRequest) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BeginExecuteRequest) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *BeginExecuteRequest) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.Options != nil {
		size, err := m.Options.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x2a
	}
	if m.Query != nil {
		size, err := m.Query.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x22
	}
	if m.Target != nil {
		size, err := m.Target.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1a
	}
	if m.ImmediateCallerId != nil {
		size, err := m.ImmediateCallerId.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x12
	}
	if m.EffectiveCallerId != nil {
		size, err := m.EffectiveCallerId.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BeginExecuteResponse) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BeginExecuteResponse) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *BeginExecuteResponse) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.TransactionId != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.TransactionId))
		i--
		dAtA[i] = 0x18
	}
	if m.Result != nil {
		size, err := m.Result.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x12
	}
	if m.Error != nil {
		size, err := m.Error.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BeginExecuteBatchRequest) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BeginExecuteBatchRequest) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *BeginExecuteBatchRequest) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.Options != nil {
		size, err := m.Options.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x32
	}
	if m.AsTransaction {
		i--
		if m.AsTransaction {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x28
	}
	if len(m.Queries) > 0 {
		for iNdEx := len(m.Queries) - 1; iNdEx >= 0; iNdEx-- {
			size, err := m.Queries[iNdEx].MarshalToSizedBufferVT(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.Target != nil {
		size, err := m.Target.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1a
	}
	if m.ImmediateCallerId != nil {
		size, err := m.ImmediateCallerId.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x12
	}
	if m.EffectiveCallerId != nil {
		size, err := m.EffectiveCallerId.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BeginExecuteBatchResponse) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BeginExecuteBatchResponse) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *BeginExecuteBatchResponse) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.TransactionId != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.TransactionId))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Results) > 0 {
		for iNdEx := len(m.Results) - 1; iNdEx >= 0; iNdEx-- {
			size, err := m.Results[iNdEx].MarshalToSizedBufferVT(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x12
		}
	}
	if m.Error != nil {
		size, err := m.Error.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MessageStreamRequest) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageStreamRequest) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *MessageStreamRequest) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if m.Target != nil {
		size, err := m.Target.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1a
	}
	if m.ImmediateCallerId != nil {
		size, err := m.ImmediateCallerId.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x12
	}
	if m.EffectiveCallerId != nil {
		size, err := m.EffectiveCallerId.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MessageStreamResponse) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageStreamResponse) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *MessageStreamResponse) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.Result != nil {
		size, err := m.Result.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MessageAckRequest) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageAckRequest) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *MessageAckRequest) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.Ids) > 0 {
		for iNdEx := len(m.Ids) - 1; iNdEx >= 0; iNdEx-- {
			size, err := m.Ids[iNdEx].MarshalToSizedBufferVT(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.Name) > 0 {
		i -= len(m.Name)
		copy(dAtA[i:], m.Name)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Name)))
		i--
		dAtA[i] = 0x22
	}
	if m.Target != nil {
		size, err := m.Target.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1a
	}
	if m.ImmediateCallerId != nil {
		size, err := m.ImmediateCallerId.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x12
	}
	if m.EffectiveCallerId != nil {
		size, err := m.EffectiveCallerId.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MessageAckResponse) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MessageAckResponse) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *MessageAckResponse) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.Result != nil {
		size, err := m.Result.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SplitQueryRequest) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SplitQueryRequest) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *SplitQueryRequest) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.Algorithm != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.Algorithm))
		i--
		dAtA[i] = 0x48
	}
	if m.NumRowsPerQueryPart != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.NumRowsPerQueryPart))
		i--
		dAtA[i] = 0x40
	}
	if m.SplitCount != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.SplitCount))
		i--
		dAtA[i] = 0x30
	}
	if len(m.SplitColumn) > 0 {
		for iNdEx := len(m.SplitColumn) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SplitColumn[iNdEx])
			copy(dAtA[i:], m.SplitColumn[iNdEx])
			i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.SplitColumn[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.Query != nil {
		size, err := m.Query.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x22
	}
	if m.Target != nil {
		size, err := m.Target.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1a
	}
	if m.ImmediateCallerId != nil {
		size, err := m.ImmediateCallerId.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x12
	}
	if m.EffectiveCallerId != nil {
		size, err := m.EffectiveCallerId.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *QuerySplit) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *QuerySplit) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *QuerySplit) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.RowCount != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.RowCount))
		i--
		dAtA[i] = 0x10
	}
	if m.Query != nil {
		size, err := m.Query.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *SplitQueryResponse) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *SplitQueryResponse) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *SplitQueryResponse) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.Queries) > 0 {
		for iNdEx := len(m.Queries) - 1; iNdEx >= 0; iNdEx-- {
			size, err := m.Queries[iNdEx].MarshalToSizedBufferVT(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *StreamHealthRequest) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamHealthRequest) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *StreamHealthRequest) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	return len(dAtA) - i, nil
}

func (m *RealtimeStats) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RealtimeStats) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RealtimeStats) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.Qps != 0 {
		i -= 8
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.Qps))))
		i--
		dAtA[i] = 0x31
	}
	if m.CpuUsage != 0 {
		i -= 8
		binary.LittleEndian.PutUint64(dAtA[i:], uint64(math.Float64bits(float64(m.CpuUsage))))
		i--
		dAtA[i] = 0x29
	}
	if m.SecondsBehindMasterFilteredReplication != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.SecondsBehindMasterFilteredReplication))
		i--
		dAtA[i] = 0x20
	}
	if m.BinlogPlayersCount != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.BinlogPlayersCount))
		i--
		dAtA[i] = 0x18
	}
	if m.SecondsBehindMaster != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.SecondsBehindMaster))
		i--
		dAtA[i] = 0x10
	}
	if len(m.HealthError) > 0 {
		i -= len(m.HealthError)
		copy(dAtA[i:], m.HealthError)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.HealthError)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *AggregateStats) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *AggregateStats) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *AggregateStats) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.SecondsBehindMasterMax != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.SecondsBehindMasterMax))
		i--
		dAtA[i] = 0x20
	}
	if m.SecondsBehindMasterMin != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.SecondsBehindMasterMin))
		i--
		dAtA[i] = 0x18
	}
	if m.UnhealthyTabletCount != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.UnhealthyTabletCount))
		i--
		dAtA[i] = 0x10
	}
	if m.HealthyTabletCount != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.HealthyTabletCount))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *StreamHealthResponse) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamHealthResponse) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *StreamHealthResponse) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.AggregateStats != nil {
		size, err := m.AggregateStats.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x32
	}
	if m.TabletAlias != nil {
		size, err := m.TabletAlias.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x2a
	}
	if m.RealtimeStats != nil {
		size, err := m.RealtimeStats.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x22
	}
	if m.TabletExternallyReparentedTimestamp != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.TabletExternallyReparentedTimestamp))
		i--
		dAtA[i] = 0x18
	}
	if m.Serving {
		i--
		if m.Serving {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x10
	}
	if m.Target != nil {
		size, err := m.Target.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateStreamRequest) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateStreamRequest) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *UpdateStreamRequest) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.Timestamp != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x28
	}
	if len(m.Position) > 0 {
		i -= len(m.Position)
		copy(dAtA[i:], m.Position)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Position)))
		i--
		dAtA[i] = 0x22
	}
	if m.Target != nil {
		size, err := m.Target.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1a
	}
	if m.ImmediateCallerId != nil {
		size, err := m.ImmediateCallerId.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x12
	}
	if m.EffectiveCallerId != nil {
		size, err := m.EffectiveCallerId.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *UpdateStreamResponse) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *UpdateStreamResponse) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *UpdateStreamResponse) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.Event != nil {
		size, err := m.Event.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TransactionMetadata) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TransactionMetadata) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *TransactionMetadata) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.Participants) > 0 {
		for iNdEx := len(m.Participants) - 1; iNdEx >= 0; iNdEx-- {
			size, err := m.Participants[iNdEx].MarshalToSizedBufferVT(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x22
		}
	}
	if m.TimeCreated != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.TimeCreated))
		i--
		dAtA[i] = 0x18
	}
	if m.State != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.State))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Dtid) > 0 {
		i -= len(m.Dtid)
		copy(dAtA[i:], m.Dtid)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Dtid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Target) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Keyspace)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	l = len(m.Shard)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.TabletType != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.TabletType))
	}
	l = len(m.Cell)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *VTGateCallerID) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if len(m.Groups) > 0 {
		for _, s := range m.Groups {
			l = len(s)
			n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
		}
	}
	n += len(m.unknownFields)
	return n
}

func (m *EventToken) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Timestamp != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.Timestamp))
	}
	l = len(m.Shard)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	l = len(m.Position)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *Value) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.Type))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *BindVariable) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.Type))
	}
	l = len(m.Value)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if len(m.Values) > 0 {
		for _, e := range m.Values {
			l = e.SizeVT()
			n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
		}
	}
	n += len(m.unknownFields)
	return n
}

func (m *BoundQuery) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sql)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if len(m.BindVariables) > 0 {
		for k, v := range m.BindVariables {
			_ = k
			_ = v
			l = 0
			if v != nil {
				l = v.SizeVT()
			}
			l += 1 + protobuf_go_lite.SizeOfVarint(uint64(l))
			mapEntrySize := 1 + len(k) + protobuf_go_lite.SizeOfVarint(uint64(len(k))) + l
			n += mapEntrySize + 1 + protobuf_go_lite.SizeOfVarint(uint64(mapEntrySize))
		}
	}
	n += len(m.unknownFields)
	return n
}

func (m *ExecuteOptions) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.IncludeEventToken {
		n += 2
	}
	if m.CompareEventToken != nil {
		l = m.CompareEventToken.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.IncludedFields != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.IncludedFields))
	}
	if m.ClientFoundRows {
		n += 2
	}
	if m.Workload != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.Workload))
	}
	if m.SqlSelectLimit != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.SqlSelectLimit))
	}
	if m.TransactionIsolation != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.TransactionIsolation))
	}
	if m.SkipQueryPlanCache {
		n += 2
	}
	n += len(m.unknownFields)
	return n
}

func (m *Field) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.Type != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.Type))
	}
	l = len(m.Table)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	l = len(m.OrgTable)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	l = len(m.Database)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	l = len(m.OrgName)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.ColumnLength != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.ColumnLength))
	}
	if m.Charset != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.Charset))
	}
	if m.Decimals != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.Decimals))
	}
	if m.Flags != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.Flags))
	}
	n += len(m.unknownFields)
	return n
}

func (m *Row) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Lengths) > 0 {
		l = 0
		for _, e := range m.Lengths {
			l += protobuf_go_lite.SizeOfZigzag(uint64(e))
		}
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(l)) + l
	}
	l = len(m.Values)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *ResultExtras) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EventToken != nil {
		l = m.EventToken.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.Fresher {
		n += 2
	}
	n += len(m.unknownFields)
	return n
}

func (m *QueryResult) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, e := range m.Fields {
			l = e.SizeVT()
			n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
		}
	}
	if m.RowsAffected != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.RowsAffected))
	}
	if m.InsertId != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.InsertId))
	}
	if len(m.Rows) > 0 {
		for _, e := range m.Rows {
			l = e.SizeVT()
			n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
		}
	}
	if m.Extras != nil {
		l = m.Extras.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *QueryWarning) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *StreamEvent_Statement) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Category != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.Category))
	}
	l = len(m.TableName)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if len(m.PrimaryKeyFields) > 0 {
		for _, e := range m.PrimaryKeyFields {
			l = e.SizeVT()
			n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
		}
	}
	if len(m.PrimaryKeyValues) > 0 {
		for _, e := range m.PrimaryKeyValues {
			l = e.SizeVT()
			n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
		}
	}
	l = len(m.Sql)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *StreamEvent) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Statements) > 0 {
		for _, e := range m.Statements {
			l = e.SizeVT()
			n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
		}
	}
	if m.EventToken != nil {
		l = m.EventToken.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *ExecuteRequest) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EffectiveCallerId != nil {
		l = m.EffectiveCallerId.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.ImmediateCallerId != nil {
		l = m.ImmediateCallerId.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.Target != nil {
		l = m.Target.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.Query != nil {
		l = m.Query.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.TransactionId != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.TransactionId))
	}
	if m.Options != nil {
		l = m.Options.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *ExecuteResponse) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *ResultWithError) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.Result != nil {
		l = m.Result.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *ExecuteBatchRequest) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EffectiveCallerId != nil {
		l = m.EffectiveCallerId.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.ImmediateCallerId != nil {
		l = m.ImmediateCallerId.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.Target != nil {
		l = m.Target.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if len(m.Queries) > 0 {
		for _, e := range m.Queries {
			l = e.SizeVT()
			n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
		}
	}
	if m.AsTransaction {
		n += 2
	}
	if m.TransactionId != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.TransactionId))
	}
	if m.Options != nil {
		l = m.Options.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *ExecuteBatchResponse) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Results) > 0 {
		for _, e := range m.Results {
			l = e.SizeVT()
			n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
		}
	}
	n += len(m.unknownFields)
	return n
}

func (m *StreamExecuteRequest) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EffectiveCallerId != nil {
		l = m.EffectiveCallerId.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.ImmediateCallerId != nil {
		l = m.ImmediateCallerId.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.Target != nil {
		l = m.Target.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.Query != nil {
		l = m.Query.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.Options != nil {
		l = m.Options.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.TransactionId != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.TransactionId))
	}
	n += len(m.unknownFields)
	return n
}

func (m *StreamExecuteResponse) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *BeginRequest) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EffectiveCallerId != nil {
		l = m.EffectiveCallerId.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.ImmediateCallerId != nil {
		l = m.ImmediateCallerId.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.Target != nil {
		l = m.Target.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.Options != nil {
		l = m.Options.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *BeginResponse) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.TransactionId != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.TransactionId))
	}
	n += len(m.unknownFields)
	return n
}

func (m *CommitRequest) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EffectiveCallerId != nil {
		l = m.EffectiveCallerId.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.ImmediateCallerId != nil {
		l = m.ImmediateCallerId.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.Target != nil {
		l = m.Target.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.TransactionId != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.TransactionId))
	}
	n += len(m.unknownFields)
	return n
}

func (m *CommitResponse) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += len(m.unknownFields)
	return n
}

func (m *RollbackRequest) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EffectiveCallerId != nil {
		l = m.EffectiveCallerId.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.ImmediateCallerId != nil {
		l = m.ImmediateCallerId.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.Target != nil {
		l = m.Target.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.TransactionId != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.TransactionId))
	}
	n += len(m.unknownFields)
	return n
}

func (m *RollbackResponse) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += len(m.unknownFields)
	return n
}

func (m *PrepareRequest) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EffectiveCallerId != nil {
		l = m.EffectiveCallerId.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.ImmediateCallerId != nil {
		l = m.ImmediateCallerId.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.Target != nil {
		l = m.Target.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.TransactionId != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.TransactionId))
	}
	l = len(m.Dtid)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *PrepareResponse) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += len(m.unknownFields)
	return n
}

func (m *CommitPreparedRequest) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EffectiveCallerId != nil {
		l = m.EffectiveCallerId.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.ImmediateCallerId != nil {
		l = m.ImmediateCallerId.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.Target != nil {
		l = m.Target.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	l = len(m.Dtid)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *CommitPreparedResponse) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += len(m.unknownFields)
	return n
}

func (m *RollbackPreparedRequest) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EffectiveCallerId != nil {
		l = m.EffectiveCallerId.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.ImmediateCallerId != nil {
		l = m.ImmediateCallerId.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.Target != nil {
		l = m.Target.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.TransactionId != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.TransactionId))
	}
	l = len(m.Dtid)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *RollbackPreparedResponse) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += len(m.unknownFields)
	return n
}

func (m *CreateTransactionRequest) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EffectiveCallerId != nil {
		l = m.EffectiveCallerId.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.ImmediateCallerId != nil {
		l = m.ImmediateCallerId.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.Target != nil {
		l = m.Target.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	l = len(m.Dtid)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if len(m.Participants) > 0 {
		for _, e := range m.Participants {
			l = e.SizeVT()
			n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
		}
	}
	n += len(m.unknownFields)
	return n
}

func (m *CreateTransactionResponse) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += len(m.unknownFields)
	return n
}

func (m *StartCommitRequest) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EffectiveCallerId != nil {
		l = m.EffectiveCallerId.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.ImmediateCallerId != nil {
		l = m.ImmediateCallerId.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.Target != nil {
		l = m.Target.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.TransactionId != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.TransactionId))
	}
	l = len(m.Dtid)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *StartCommitResponse) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += len(m.unknownFields)
	return n
}

func (m *SetRollbackRequest) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EffectiveCallerId != nil {
		l = m.EffectiveCallerId.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.ImmediateCallerId != nil {
		l = m.ImmediateCallerId.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.Target != nil {
		l = m.Target.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.TransactionId != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.TransactionId))
	}
	l = len(m.Dtid)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *SetRollbackResponse) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += len(m.unknownFields)
	return n
}

func (m *ConcludeTransactionRequest) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EffectiveCallerId != nil {
		l = m.EffectiveCallerId.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.ImmediateCallerId != nil {
		l = m.ImmediateCallerId.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.Target != nil {
		l = m.Target.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	l = len(m.Dtid)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *ConcludeTransactionResponse) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += len(m.unknownFields)
	return n
}

func (m *ReadTransactionRequest) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EffectiveCallerId != nil {
		l = m.EffectiveCallerId.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.ImmediateCallerId != nil {
		l = m.ImmediateCallerId.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.Target != nil {
		l = m.Target.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	l = len(m.Dtid)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *ReadTransactionResponse) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metadata != nil {
		l = m.Metadata.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *BeginExecuteRequest) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EffectiveCallerId != nil {
		l = m.EffectiveCallerId.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.ImmediateCallerId != nil {
		l = m.ImmediateCallerId.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.Target != nil {
		l = m.Target.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.Query != nil {
		l = m.Query.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.Options != nil {
		l = m.Options.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *BeginExecuteResponse) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.Result != nil {
		l = m.Result.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.TransactionId != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.TransactionId))
	}
	n += len(m.unknownFields)
	return n
}

func (m *BeginExecuteBatchRequest) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EffectiveCallerId != nil {
		l = m.EffectiveCallerId.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.ImmediateCallerId != nil {
		l = m.ImmediateCallerId.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.Target != nil {
		l = m.Target.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if len(m.Queries) > 0 {
		for _, e := range m.Queries {
			l = e.SizeVT()
			n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
		}
	}
	if m.AsTransaction {
		n += 2
	}
	if m.Options != nil {
		l = m.Options.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *BeginExecuteBatchResponse) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Error != nil {
		l = m.Error.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if len(m.Results) > 0 {
		for _, e := range m.Results {
			l = e.SizeVT()
			n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
		}
	}
	if m.TransactionId != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.TransactionId))
	}
	n += len(m.unknownFields)
	return n
}

func (m *MessageStreamRequest) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EffectiveCallerId != nil {
		l = m.EffectiveCallerId.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.ImmediateCallerId != nil {
		l = m.ImmediateCallerId.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.Target != nil {
		l = m.Target.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *MessageStreamResponse) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *MessageAckRequest) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EffectiveCallerId != nil {
		l = m.EffectiveCallerId.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.ImmediateCallerId != nil {
		l = m.ImmediateCallerId.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.Target != nil {
		l = m.Target.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if len(m.Ids) > 0 {
		for _, e := range m.Ids {
			l = e.SizeVT()
			n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
		}
	}
	n += len(m.unknownFields)
	return n
}

func (m *MessageAckResponse) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Result != nil {
		l = m.Result.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *SplitQueryRequest) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EffectiveCallerId != nil {
		l = m.EffectiveCallerId.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.ImmediateCallerId != nil {
		l = m.ImmediateCallerId.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.Target != nil {
		l = m.Target.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.Query != nil {
		l = m.Query.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if len(m.SplitColumn) > 0 {
		for _, s := range m.SplitColumn {
			l = len(s)
			n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
		}
	}
	if m.SplitCount != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.SplitCount))
	}
	if m.NumRowsPerQueryPart != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.NumRowsPerQueryPart))
	}
	if m.Algorithm != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.Algorithm))
	}
	n += len(m.unknownFields)
	return n
}

func (m *QuerySplit) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Query != nil {
		l = m.Query.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.RowCount != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.RowCount))
	}
	n += len(m.unknownFields)
	return n
}

func (m *SplitQueryResponse) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Queries) > 0 {
		for _, e := range m.Queries {
			l = e.SizeVT()
			n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
		}
	}
	n += len(m.unknownFields)
	return n
}

func (m *StreamHealthRequest) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	n += len(m.unknownFields)
	return n
}

func (m *RealtimeStats) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.HealthError)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.SecondsBehindMaster != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.SecondsBehindMaster))
	}
	if m.BinlogPlayersCount != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.BinlogPlayersCount))
	}
	if m.SecondsBehindMasterFilteredReplication != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.SecondsBehindMasterFilteredReplication))
	}
	if m.CpuUsage != 0 {
		n += 9
	}
	if m.Qps != 0 {
		n += 9
	}
	n += len(m.unknownFields)
	return n
}

func (m *AggregateStats) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.HealthyTabletCount != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.HealthyTabletCount))
	}
	if m.UnhealthyTabletCount != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.UnhealthyTabletCount))
	}
	if m.SecondsBehindMasterMin != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.SecondsBehindMasterMin))
	}
	if m.SecondsBehindMasterMax != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.SecondsBehindMasterMax))
	}
	n += len(m.unknownFields)
	return n
}

func (m *StreamHealthResponse) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Target != nil {
		l = m.Target.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.Serving {
		n += 2
	}
	if m.TabletExternallyReparentedTimestamp != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.TabletExternallyReparentedTimestamp))
	}
	if m.RealtimeStats != nil {
		l = m.RealtimeStats.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.TabletAlias != nil {
		l = m.TabletAlias.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.AggregateStats != nil {
		l = m.AggregateStats.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *UpdateStreamRequest) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EffectiveCallerId != nil {
		l = m.EffectiveCallerId.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.ImmediateCallerId != nil {
		l = m.ImmediateCallerId.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.Target != nil {
		l = m.Target.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	l = len(m.Position)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.Timestamp != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.Timestamp))
	}
	n += len(m.unknownFields)
	return n
}

func (m *UpdateStreamResponse) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Event != nil {
		l = m.Event.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *TransactionMetadata) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Dtid)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.State != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.State))
	}
	if m.TimeCreated != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.TimeCreated))
	}
	if len(m.Participants) > 0 {
		for _, e := range m.Participants {
			l = e.SizeVT()
			n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
		}
	}
	n += len(m.unknownFields)
	return n
}

func (x MySqlFlag) MarshalProtoText() string {
	return x.String()
}
func (x Flag) MarshalProtoText() string {
	return x.String()
}
func (x Type) MarshalProtoText() string {
	return x.String()
}
func (x TransactionState) MarshalProtoText() string {
	return x.String()
}
func (x *Target) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("Target { ")
	if x.Keyspace != "" {
		sb.WriteString(" keyspace: ")
		sb.WriteString(strconv.Quote(x.Keyspace))
	}
	if x.Shard != "" {
		sb.WriteString(" shard: ")
		sb.WriteString(strconv.Quote(x.Shard))
	}
	if x.TabletType != 0 {
		sb.WriteString(" tablet_type: ")
		sb.WriteString(topodata.TabletType(x.TabletType).String())
	}
	if x.Cell != "" {
		sb.WriteString(" cell: ")
		sb.WriteString(strconv.Quote(x.Cell))
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *Target) String() string {
	return x.MarshalProtoText()
}
func (x *VTGateCallerID) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("VTGateCallerID { ")
	if x.Username != "" {
		sb.WriteString(" username: ")
		sb.WriteString(strconv.Quote(x.Username))
	}
	if len(x.Groups) > 0 {
		sb.WriteString(" groups: [")
		for i, v := range x.Groups {
			if i > 0 {
				sb.WriteString(", ")
			}
			sb.WriteString(strconv.Quote(v))
		}
		sb.WriteString("]")
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *VTGateCallerID) String() string {
	return x.MarshalProtoText()
}
func (x *EventToken) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("EventToken { ")
	if x.Timestamp != 0 {
		sb.WriteString(" timestamp: ")
		sb.WriteString(strconv.FormatInt(int64(x.Timestamp), 10))
	}
	if x.Shard != "" {
		sb.WriteString(" shard: ")
		sb.WriteString(strconv.Quote(x.Shard))
	}
	if x.Position != "" {
		sb.WriteString(" position: ")
		sb.WriteString(strconv.Quote(x.Position))
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *EventToken) String() string {
	return x.MarshalProtoText()
}
func (x *Value) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("Value { ")
	if x.Type != 0 {
		sb.WriteString(" type: ")
		sb.WriteString(Type(x.Type).String())
	}
	if len(x.Value) > 0 {
		sb.WriteString(" value: ")
		sb.WriteString("\"")
		sb.WriteString(base64.StdEncoding.EncodeToString(x.Value))
		sb.WriteString("\"")
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *Value) String() string {
	return x.MarshalProtoText()
}
func (x *BindVariable) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("BindVariable { ")
	if x.Type != 0 {
		sb.WriteString(" type: ")
		sb.WriteString(Type(x.Type).String())
	}
	if len(x.Value) > 0 {
		sb.WriteString(" value: ")
		sb.WriteString("\"")
		sb.WriteString(base64.StdEncoding.EncodeToString(x.Value))
		sb.WriteString("\"")
	}
	if len(x.Values) > 0 {
		sb.WriteString(" values: [")
		for i, v := range x.Values {
			if i > 0 {
				sb.WriteString(", ")
			}
			sb.WriteString(v.MarshalProtoText())
		}
		sb.WriteString("]")
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *BindVariable) String() string {
	return x.MarshalProtoText()
}
func (x *BoundQuery_BindVariablesEntry) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("BindVariablesEntry { ")
	if x.Key != "" {
		sb.WriteString(" key: ")
		sb.WriteString(strconv.Quote(x.Key))
	}
	if x.Value != nil {
		sb.WriteString(" value: ")
		sb.WriteString(x.Value.MarshalProtoText())
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *BoundQuery_BindVariablesEntry) String() string {
	return x.MarshalProtoText()
}
func (x *BoundQuery) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("BoundQuery { ")
	if x.Sql != "" {
		sb.WriteString(" sql: ")
		sb.WriteString(strconv.Quote(x.Sql))
	}
	if len(x.BindVariables) > 0 {
		sb.WriteString(" bind_variables: {")
		for k, v := range x.BindVariables {
			sb.WriteString(" ")
			sb.WriteString(strconv.Quote(k))
			sb.WriteString(": ")
			sb.WriteString(v.MarshalProtoText())
		}
		sb.WriteString(" }")
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *BoundQuery) String() string {
	return x.MarshalProtoText()
}
func (x ExecuteOptions_IncludedFields) MarshalProtoText() string {
	return x.String()
}
func (x ExecuteOptions_Workload) MarshalProtoText() string {
	return x.String()
}
func (x ExecuteOptions_TransactionIsolation) MarshalProtoText() string {
	return x.String()
}
func (x *ExecuteOptions) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("ExecuteOptions { ")
	if x.IncludeEventToken {
		sb.WriteString(" include_event_token: ")
		sb.WriteString(strconv.FormatBool(x.IncludeEventToken))
	}
	if x.CompareEventToken != nil {
		sb.WriteString(" compare_event_token: ")
		sb.WriteString(x.CompareEventToken.MarshalProtoText())
	}
	if x.IncludedFields != 0 {
		sb.WriteString(" included_fields: ")
		sb.WriteString(ExecuteOptions_IncludedFields(x.IncludedFields).String())
	}
	if x.ClientFoundRows {
		sb.WriteString(" client_found_rows: ")
		sb.WriteString(strconv.FormatBool(x.ClientFoundRows))
	}
	if x.Workload != 0 {
		sb.WriteString(" workload: ")
		sb.WriteString(ExecuteOptions_Workload(x.Workload).String())
	}
	if x.SqlSelectLimit != 0 {
		sb.WriteString(" sql_select_limit: ")
		sb.WriteString(strconv.FormatInt(int64(x.SqlSelectLimit), 10))
	}
	if x.TransactionIsolation != 0 {
		sb.WriteString(" transaction_isolation: ")
		sb.WriteString(ExecuteOptions_TransactionIsolation(x.TransactionIsolation).String())
	}
	if x.SkipQueryPlanCache {
		sb.WriteString(" skip_query_plan_cache: ")
		sb.WriteString(strconv.FormatBool(x.SkipQueryPlanCache))
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *ExecuteOptions) String() string {
	return x.MarshalProtoText()
}
func (x *Field) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("Field { ")
	if x.Name != "" {
		sb.WriteString(" name: ")
		sb.WriteString(strconv.Quote(x.Name))
	}
	if x.Type != 0 {
		sb.WriteString(" type: ")
		sb.WriteString(Type(x.Type).String())
	}
	if x.Table != "" {
		sb.WriteString(" table: ")
		sb.WriteString(strconv.Quote(x.Table))
	}
	if x.OrgTable != "" {
		sb.WriteString(" org_table: ")
		sb.WriteString(strconv.Quote(x.OrgTable))
	}
	if x.Database != "" {
		sb.WriteString(" database: ")
		sb.WriteString(strconv.Quote(x.Database))
	}
	if x.OrgName != "" {
		sb.WriteString(" org_name: ")
		sb.WriteString(strconv.Quote(x.OrgName))
	}
	if x.ColumnLength != 0 {
		sb.WriteString(" column_length: ")
		sb.WriteString(strconv.FormatUint(uint64(x.ColumnLength), 10))
	}
	if x.Charset != 0 {
		sb.WriteString(" charset: ")
		sb.WriteString(strconv.FormatUint(uint64(x.Charset), 10))
	}
	if x.Decimals != 0 {
		sb.WriteString(" decimals: ")
		sb.WriteString(strconv.FormatUint(uint64(x.Decimals), 10))
	}
	if x.Flags != 0 {
		sb.WriteString(" flags: ")
		sb.WriteString(strconv.FormatUint(uint64(x.Flags), 10))
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *Field) String() string {
	return x.MarshalProtoText()
}
func (x *Row) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("Row { ")
	if len(x.Lengths) > 0 {
		sb.WriteString(" lengths: [")
		for i, v := range x.Lengths {
			if i > 0 {
				sb.WriteString(", ")
			}
			sb.WriteString(strconv.FormatInt(int64(v), 10))
		}
		sb.WriteString("]")
	}
	if len(x.Values) > 0 {
		sb.WriteString(" values: ")
		sb.WriteString("\"")
		sb.WriteString(base64.StdEncoding.EncodeToString(x.Values))
		sb.WriteString("\"")
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *Row) String() string {
	return x.MarshalProtoText()
}
func (x *ResultExtras) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("ResultExtras { ")
	if x.EventToken != nil {
		sb.WriteString(" event_token: ")
		sb.WriteString(x.EventToken.MarshalProtoText())
	}
	if x.Fresher {
		sb.WriteString(" fresher: ")
		sb.WriteString(strconv.FormatBool(x.Fresher))
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *ResultExtras) String() string {
	return x.MarshalProtoText()
}
func (x *QueryResult) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("QueryResult { ")
	if len(x.Fields) > 0 {
		sb.WriteString(" fields: [")
		for i, v := range x.Fields {
			if i > 0 {
				sb.WriteString(", ")
			}
			sb.WriteString(v.MarshalProtoText())
		}
		sb.WriteString("]")
	}
	if x.RowsAffected != 0 {
		sb.WriteString(" rows_affected: ")
		sb.WriteString(strconv.FormatUint(uint64(x.RowsAffected), 10))
	}
	if x.InsertId != 0 {
		sb.WriteString(" insert_id: ")
		sb.WriteString(strconv.FormatUint(uint64(x.InsertId), 10))
	}
	if len(x.Rows) > 0 {
		sb.WriteString(" rows: [")
		for i, v := range x.Rows {
			if i > 0 {
				sb.WriteString(", ")
			}
			sb.WriteString(v.MarshalProtoText())
		}
		sb.WriteString("]")
	}
	if x.Extras != nil {
		sb.WriteString(" extras: ")
		sb.WriteString(x.Extras.MarshalProtoText())
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *QueryResult) String() string {
	return x.MarshalProtoText()
}
func (x *QueryWarning) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("QueryWarning { ")
	if x.Code != 0 {
		sb.WriteString(" code: ")
		sb.WriteString(strconv.FormatUint(uint64(x.Code), 10))
	}
	if x.Message != "" {
		sb.WriteString(" message: ")
		sb.WriteString(strconv.Quote(x.Message))
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *QueryWarning) String() string {
	return x.MarshalProtoText()
}
func (x StreamEvent_Statement_Category) MarshalProtoText() string {
	return x.String()
}
func (x *StreamEvent_Statement) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("Statement { ")
	if x.Category != 0 {
		sb.WriteString(" category: ")
		sb.WriteString(StreamEvent_Statement_Category(x.Category).String())
	}
	if x.TableName != "" {
		sb.WriteString(" table_name: ")
		sb.WriteString(strconv.Quote(x.TableName))
	}
	if len(x.PrimaryKeyFields) > 0 {
		sb.WriteString(" primary_key_fields: [")
		for i, v := range x.PrimaryKeyFields {
			if i > 0 {
				sb.WriteString(", ")
			}
			sb.WriteString(v.MarshalProtoText())
		}
		sb.WriteString("]")
	}
	if len(x.PrimaryKeyValues) > 0 {
		sb.WriteString(" primary_key_values: [")
		for i, v := range x.PrimaryKeyValues {
			if i > 0 {
				sb.WriteString(", ")
			}
			sb.WriteString(v.MarshalProtoText())
		}
		sb.WriteString("]")
	}
	if len(x.Sql) > 0 {
		sb.WriteString(" sql: ")
		sb.WriteString("\"")
		sb.WriteString(base64.StdEncoding.EncodeToString(x.Sql))
		sb.WriteString("\"")
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *StreamEvent_Statement) String() string {
	return x.MarshalProtoText()
}
func (x *StreamEvent) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("StreamEvent { ")
	if len(x.Statements) > 0 {
		sb.WriteString(" statements: [")
		for i, v := range x.Statements {
			if i > 0 {
				sb.WriteString(", ")
			}
			sb.WriteString(v.MarshalProtoText())
		}
		sb.WriteString("]")
	}
	if x.EventToken != nil {
		sb.WriteString(" event_token: ")
		sb.WriteString(x.EventToken.MarshalProtoText())
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *StreamEvent) String() string {
	return x.MarshalProtoText()
}
func (x *ExecuteRequest) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("ExecuteRequest { ")
	if x.EffectiveCallerId != nil {
		sb.WriteString(" effective_caller_id: ")
		sb.WriteString(x.EffectiveCallerId.MarshalProtoText())
	}
	if x.ImmediateCallerId != nil {
		sb.WriteString(" immediate_caller_id: ")
		sb.WriteString(x.ImmediateCallerId.MarshalProtoText())
	}
	if x.Target != nil {
		sb.WriteString(" target: ")
		sb.WriteString(x.Target.MarshalProtoText())
	}
	if x.Query != nil {
		sb.WriteString(" query: ")
		sb.WriteString(x.Query.MarshalProtoText())
	}
	if x.TransactionId != 0 {
		sb.WriteString(" transaction_id: ")
		sb.WriteString(strconv.FormatInt(int64(x.TransactionId), 10))
	}
	if x.Options != nil {
		sb.WriteString(" options: ")
		sb.WriteString(x.Options.MarshalProtoText())
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *ExecuteRequest) String() string {
	return x.MarshalProtoText()
}
func (x *ExecuteResponse) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("ExecuteResponse { ")
	if x.Result != nil {
		sb.WriteString(" result: ")
		sb.WriteString(x.Result.MarshalProtoText())
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *ExecuteResponse) String() string {
	return x.MarshalProtoText()
}
func (x *ResultWithError) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("ResultWithError { ")
	if x.Error != nil {
		sb.WriteString(" error: ")
		sb.WriteString(x.Error.MarshalProtoText())
	}
	if x.Result != nil {
		sb.WriteString(" result: ")
		sb.WriteString(x.Result.MarshalProtoText())
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *ResultWithError) String() string {
	return x.MarshalProtoText()
}
func (x *ExecuteBatchRequest) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("ExecuteBatchRequest { ")
	if x.EffectiveCallerId != nil {
		sb.WriteString(" effective_caller_id: ")
		sb.WriteString(x.EffectiveCallerId.MarshalProtoText())
	}
	if x.ImmediateCallerId != nil {
		sb.WriteString(" immediate_caller_id: ")
		sb.WriteString(x.ImmediateCallerId.MarshalProtoText())
	}
	if x.Target != nil {
		sb.WriteString(" target: ")
		sb.WriteString(x.Target.MarshalProtoText())
	}
	if len(x.Queries) > 0 {
		sb.WriteString(" queries: [")
		for i, v := range x.Queries {
			if i > 0 {
				sb.WriteString(", ")
			}
			sb.WriteString(v.MarshalProtoText())
		}
		sb.WriteString("]")
	}
	if x.AsTransaction {
		sb.WriteString(" as_transaction: ")
		sb.WriteString(strconv.FormatBool(x.AsTransaction))
	}
	if x.TransactionId != 0 {
		sb.WriteString(" transaction_id: ")
		sb.WriteString(strconv.FormatInt(int64(x.TransactionId), 10))
	}
	if x.Options != nil {
		sb.WriteString(" options: ")
		sb.WriteString(x.Options.MarshalProtoText())
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *ExecuteBatchRequest) String() string {
	return x.MarshalProtoText()
}
func (x *ExecuteBatchResponse) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("ExecuteBatchResponse { ")
	if len(x.Results) > 0 {
		sb.WriteString(" results: [")
		for i, v := range x.Results {
			if i > 0 {
				sb.WriteString(", ")
			}
			sb.WriteString(v.MarshalProtoText())
		}
		sb.WriteString("]")
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *ExecuteBatchResponse) String() string {
	return x.MarshalProtoText()
}
func (x *StreamExecuteRequest) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("StreamExecuteRequest { ")
	if x.EffectiveCallerId != nil {
		sb.WriteString(" effective_caller_id: ")
		sb.WriteString(x.EffectiveCallerId.MarshalProtoText())
	}
	if x.ImmediateCallerId != nil {
		sb.WriteString(" immediate_caller_id: ")
		sb.WriteString(x.ImmediateCallerId.MarshalProtoText())
	}
	if x.Target != nil {
		sb.WriteString(" target: ")
		sb.WriteString(x.Target.MarshalProtoText())
	}
	if x.Query != nil {
		sb.WriteString(" query: ")
		sb.WriteString(x.Query.MarshalProtoText())
	}
	if x.Options != nil {
		sb.WriteString(" options: ")
		sb.WriteString(x.Options.MarshalProtoText())
	}
	if x.TransactionId != 0 {
		sb.WriteString(" transaction_id: ")
		sb.WriteString(strconv.FormatInt(int64(x.TransactionId), 10))
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *StreamExecuteRequest) String() string {
	return x.MarshalProtoText()
}
func (x *StreamExecuteResponse) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("StreamExecuteResponse { ")
	if x.Result != nil {
		sb.WriteString(" result: ")
		sb.WriteString(x.Result.MarshalProtoText())
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *StreamExecuteResponse) String() string {
	return x.MarshalProtoText()
}
func (x *BeginRequest) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("BeginRequest { ")
	if x.EffectiveCallerId != nil {
		sb.WriteString(" effective_caller_id: ")
		sb.WriteString(x.EffectiveCallerId.MarshalProtoText())
	}
	if x.ImmediateCallerId != nil {
		sb.WriteString(" immediate_caller_id: ")
		sb.WriteString(x.ImmediateCallerId.MarshalProtoText())
	}
	if x.Target != nil {
		sb.WriteString(" target: ")
		sb.WriteString(x.Target.MarshalProtoText())
	}
	if x.Options != nil {
		sb.WriteString(" options: ")
		sb.WriteString(x.Options.MarshalProtoText())
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *BeginRequest) String() string {
	return x.MarshalProtoText()
}
func (x *BeginResponse) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("BeginResponse { ")
	if x.TransactionId != 0 {
		sb.WriteString(" transaction_id: ")
		sb.WriteString(strconv.FormatInt(int64(x.TransactionId), 10))
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *BeginResponse) String() string {
	return x.MarshalProtoText()
}
func (x *CommitRequest) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("CommitRequest { ")
	if x.EffectiveCallerId != nil {
		sb.WriteString(" effective_caller_id: ")
		sb.WriteString(x.EffectiveCallerId.MarshalProtoText())
	}
	if x.ImmediateCallerId != nil {
		sb.WriteString(" immediate_caller_id: ")
		sb.WriteString(x.ImmediateCallerId.MarshalProtoText())
	}
	if x.Target != nil {
		sb.WriteString(" target: ")
		sb.WriteString(x.Target.MarshalProtoText())
	}
	if x.TransactionId != 0 {
		sb.WriteString(" transaction_id: ")
		sb.WriteString(strconv.FormatInt(int64(x.TransactionId), 10))
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *CommitRequest) String() string {
	return x.MarshalProtoText()
}
func (x *CommitResponse) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("CommitResponse { ")
	sb.WriteString("}")
	return sb.String()
}
func (x *CommitResponse) String() string {
	return x.MarshalProtoText()
}
func (x *RollbackRequest) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("RollbackRequest { ")
	if x.EffectiveCallerId != nil {
		sb.WriteString(" effective_caller_id: ")
		sb.WriteString(x.EffectiveCallerId.MarshalProtoText())
	}
	if x.ImmediateCallerId != nil {
		sb.WriteString(" immediate_caller_id: ")
		sb.WriteString(x.ImmediateCallerId.MarshalProtoText())
	}
	if x.Target != nil {
		sb.WriteString(" target: ")
		sb.WriteString(x.Target.MarshalProtoText())
	}
	if x.TransactionId != 0 {
		sb.WriteString(" transaction_id: ")
		sb.WriteString(strconv.FormatInt(int64(x.TransactionId), 10))
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *RollbackRequest) String() string {
	return x.MarshalProtoText()
}
func (x *RollbackResponse) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("RollbackResponse { ")
	sb.WriteString("}")
	return sb.String()
}
func (x *RollbackResponse) String() string {
	return x.MarshalProtoText()
}
func (x *PrepareRequest) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("PrepareRequest { ")
	if x.EffectiveCallerId != nil {
		sb.WriteString(" effective_caller_id: ")
		sb.WriteString(x.EffectiveCallerId.MarshalProtoText())
	}
	if x.ImmediateCallerId != nil {
		sb.WriteString(" immediate_caller_id: ")
		sb.WriteString(x.ImmediateCallerId.MarshalProtoText())
	}
	if x.Target != nil {
		sb.WriteString(" target: ")
		sb.WriteString(x.Target.MarshalProtoText())
	}
	if x.TransactionId != 0 {
		sb.WriteString(" transaction_id: ")
		sb.WriteString(strconv.FormatInt(int64(x.TransactionId), 10))
	}
	if x.Dtid != "" {
		sb.WriteString(" dtid: ")
		sb.WriteString(strconv.Quote(x.Dtid))
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *PrepareRequest) String() string {
	return x.MarshalProtoText()
}
func (x *PrepareResponse) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("PrepareResponse { ")
	sb.WriteString("}")
	return sb.String()
}
func (x *PrepareResponse) String() string {
	return x.MarshalProtoText()
}
func (x *CommitPreparedRequest) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("CommitPreparedRequest { ")
	if x.EffectiveCallerId != nil {
		sb.WriteString(" effective_caller_id: ")
		sb.WriteString(x.EffectiveCallerId.MarshalProtoText())
	}
	if x.ImmediateCallerId != nil {
		sb.WriteString(" immediate_caller_id: ")
		sb.WriteString(x.ImmediateCallerId.MarshalProtoText())
	}
	if x.Target != nil {
		sb.WriteString(" target: ")
		sb.WriteString(x.Target.MarshalProtoText())
	}
	if x.Dtid != "" {
		sb.WriteString(" dtid: ")
		sb.WriteString(strconv.Quote(x.Dtid))
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *CommitPreparedRequest) String() string {
	return x.MarshalProtoText()
}
func (x *CommitPreparedResponse) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("CommitPreparedResponse { ")
	sb.WriteString("}")
	return sb.String()
}
func (x *CommitPreparedResponse) String() string {
	return x.MarshalProtoText()
}
func (x *RollbackPreparedRequest) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("RollbackPreparedRequest { ")
	if x.EffectiveCallerId != nil {
		sb.WriteString(" effective_caller_id: ")
		sb.WriteString(x.EffectiveCallerId.MarshalProtoText())
	}
	if x.ImmediateCallerId != nil {
		sb.WriteString(" immediate_caller_id: ")
		sb.WriteString(x.ImmediateCallerId.MarshalProtoText())
	}
	if x.Target != nil {
		sb.WriteString(" target: ")
		sb.WriteString(x.Target.MarshalProtoText())
	}
	if x.TransactionId != 0 {
		sb.WriteString(" transaction_id: ")
		sb.WriteString(strconv.FormatInt(int64(x.TransactionId), 10))
	}
	if x.Dtid != "" {
		sb.WriteString(" dtid: ")
		sb.WriteString(strconv.Quote(x.Dtid))
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *RollbackPreparedRequest) String() string {
	return x.MarshalProtoText()
}
func (x *RollbackPreparedResponse) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("RollbackPreparedResponse { ")
	sb.WriteString("}")
	return sb.String()
}
func (x *RollbackPreparedResponse) String() string {
	return x.MarshalProtoText()
}
func (x *CreateTransactionRequest) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("CreateTransactionRequest { ")
	if x.EffectiveCallerId != nil {
		sb.WriteString(" effective_caller_id: ")
		sb.WriteString(x.EffectiveCallerId.MarshalProtoText())
	}
	if x.ImmediateCallerId != nil {
		sb.WriteString(" immediate_caller_id: ")
		sb.WriteString(x.ImmediateCallerId.MarshalProtoText())
	}
	if x.Target != nil {
		sb.WriteString(" target: ")
		sb.WriteString(x.Target.MarshalProtoText())
	}
	if x.Dtid != "" {
		sb.WriteString(" dtid: ")
		sb.WriteString(strconv.Quote(x.Dtid))
	}
	if len(x.Participants) > 0 {
		sb.WriteString(" participants: [")
		for i, v := range x.Participants {
			if i > 0 {
				sb.WriteString(", ")
			}
			sb.WriteString(v.MarshalProtoText())
		}
		sb.WriteString("]")
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *CreateTransactionRequest) String() string {
	return x.MarshalProtoText()
}
func (x *CreateTransactionResponse) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("CreateTransactionResponse { ")
	sb.WriteString("}")
	return sb.String()
}
func (x *CreateTransactionResponse) String() string {
	return x.MarshalProtoText()
}
func (x *StartCommitRequest) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("StartCommitRequest { ")
	if x.EffectiveCallerId != nil {
		sb.WriteString(" effective_caller_id: ")
		sb.WriteString(x.EffectiveCallerId.MarshalProtoText())
	}
	if x.ImmediateCallerId != nil {
		sb.WriteString(" immediate_caller_id: ")
		sb.WriteString(x.ImmediateCallerId.MarshalProtoText())
	}
	if x.Target != nil {
		sb.WriteString(" target: ")
		sb.WriteString(x.Target.MarshalProtoText())
	}
	if x.TransactionId != 0 {
		sb.WriteString(" transaction_id: ")
		sb.WriteString(strconv.FormatInt(int64(x.TransactionId), 10))
	}
	if x.Dtid != "" {
		sb.WriteString(" dtid: ")
		sb.WriteString(strconv.Quote(x.Dtid))
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *StartCommitRequest) String() string {
	return x.MarshalProtoText()
}
func (x *StartCommitResponse) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("StartCommitResponse { ")
	sb.WriteString("}")
	return sb.String()
}
func (x *StartCommitResponse) String() string {
	return x.MarshalProtoText()
}
func (x *SetRollbackRequest) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("SetRollbackRequest { ")
	if x.EffectiveCallerId != nil {
		sb.WriteString(" effective_caller_id: ")
		sb.WriteString(x.EffectiveCallerId.MarshalProtoText())
	}
	if x.ImmediateCallerId != nil {
		sb.WriteString(" immediate_caller_id: ")
		sb.WriteString(x.ImmediateCallerId.MarshalProtoText())
	}
	if x.Target != nil {
		sb.WriteString(" target: ")
		sb.WriteString(x.Target.MarshalProtoText())
	}
	if x.TransactionId != 0 {
		sb.WriteString(" transaction_id: ")
		sb.WriteString(strconv.FormatInt(int64(x.TransactionId), 10))
	}
	if x.Dtid != "" {
		sb.WriteString(" dtid: ")
		sb.WriteString(strconv.Quote(x.Dtid))
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *SetRollbackRequest) String() string {
	return x.MarshalProtoText()
}
func (x *SetRollbackResponse) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("SetRollbackResponse { ")
	sb.WriteString("}")
	return sb.String()
}
func (x *SetRollbackResponse) String() string {
	return x.MarshalProtoText()
}
func (x *ConcludeTransactionRequest) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("ConcludeTransactionRequest { ")
	if x.EffectiveCallerId != nil {
		sb.WriteString(" effective_caller_id: ")
		sb.WriteString(x.EffectiveCallerId.MarshalProtoText())
	}
	if x.ImmediateCallerId != nil {
		sb.WriteString(" immediate_caller_id: ")
		sb.WriteString(x.ImmediateCallerId.MarshalProtoText())
	}
	if x.Target != nil {
		sb.WriteString(" target: ")
		sb.WriteString(x.Target.MarshalProtoText())
	}
	if x.Dtid != "" {
		sb.WriteString(" dtid: ")
		sb.WriteString(strconv.Quote(x.Dtid))
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *ConcludeTransactionRequest) String() string {
	return x.MarshalProtoText()
}
func (x *ConcludeTransactionResponse) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("ConcludeTransactionResponse { ")
	sb.WriteString("}")
	return sb.String()
}
func (x *ConcludeTransactionResponse) String() string {
	return x.MarshalProtoText()
}
func (x *ReadTransactionRequest) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("ReadTransactionRequest { ")
	if x.EffectiveCallerId != nil {
		sb.WriteString(" effective_caller_id: ")
		sb.WriteString(x.EffectiveCallerId.MarshalProtoText())
	}
	if x.ImmediateCallerId != nil {
		sb.WriteString(" immediate_caller_id: ")
		sb.WriteString(x.ImmediateCallerId.MarshalProtoText())
	}
	if x.Target != nil {
		sb.WriteString(" target: ")
		sb.WriteString(x.Target.MarshalProtoText())
	}
	if x.Dtid != "" {
		sb.WriteString(" dtid: ")
		sb.WriteString(strconv.Quote(x.Dtid))
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *ReadTransactionRequest) String() string {
	return x.MarshalProtoText()
}
func (x *ReadTransactionResponse) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("ReadTransactionResponse { ")
	if x.Metadata != nil {
		sb.WriteString(" metadata: ")
		sb.WriteString(x.Metadata.MarshalProtoText())
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *ReadTransactionResponse) String() string {
	return x.MarshalProtoText()
}
func (x *BeginExecuteRequest) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("BeginExecuteRequest { ")
	if x.EffectiveCallerId != nil {
		sb.WriteString(" effective_caller_id: ")
		sb.WriteString(x.EffectiveCallerId.MarshalProtoText())
	}
	if x.ImmediateCallerId != nil {
		sb.WriteString(" immediate_caller_id: ")
		sb.WriteString(x.ImmediateCallerId.MarshalProtoText())
	}
	if x.Target != nil {
		sb.WriteString(" target: ")
		sb.WriteString(x.Target.MarshalProtoText())
	}
	if x.Query != nil {
		sb.WriteString(" query: ")
		sb.WriteString(x.Query.MarshalProtoText())
	}
	if x.Options != nil {
		sb.WriteString(" options: ")
		sb.WriteString(x.Options.MarshalProtoText())
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *BeginExecuteRequest) String() string {
	return x.MarshalProtoText()
}
func (x *BeginExecuteResponse) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("BeginExecuteResponse { ")
	if x.Error != nil {
		sb.WriteString(" error: ")
		sb.WriteString(x.Error.MarshalProtoText())
	}
	if x.Result != nil {
		sb.WriteString(" result: ")
		sb.WriteString(x.Result.MarshalProtoText())
	}
	if x.TransactionId != 0 {
		sb.WriteString(" transaction_id: ")
		sb.WriteString(strconv.FormatInt(int64(x.TransactionId), 10))
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *BeginExecuteResponse) String() string {
	return x.MarshalProtoText()
}
func (x *BeginExecuteBatchRequest) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("BeginExecuteBatchRequest { ")
	if x.EffectiveCallerId != nil {
		sb.WriteString(" effective_caller_id: ")
		sb.WriteString(x.EffectiveCallerId.MarshalProtoText())
	}
	if x.ImmediateCallerId != nil {
		sb.WriteString(" immediate_caller_id: ")
		sb.WriteString(x.ImmediateCallerId.MarshalProtoText())
	}
	if x.Target != nil {
		sb.WriteString(" target: ")
		sb.WriteString(x.Target.MarshalProtoText())
	}
	if len(x.Queries) > 0 {
		sb.WriteString(" queries: [")
		for i, v := range x.Queries {
			if i > 0 {
				sb.WriteString(", ")
			}
			sb.WriteString(v.MarshalProtoText())
		}
		sb.WriteString("]")
	}
	if x.AsTransaction {
		sb.WriteString(" as_transaction: ")
		sb.WriteString(strconv.FormatBool(x.AsTransaction))
	}
	if x.Options != nil {
		sb.WriteString(" options: ")
		sb.WriteString(x.Options.MarshalProtoText())
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *BeginExecuteBatchRequest) String() string {
	return x.MarshalProtoText()
}
func (x *BeginExecuteBatchResponse) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("BeginExecuteBatchResponse { ")
	if x.Error != nil {
		sb.WriteString(" error: ")
		sb.WriteString(x.Error.MarshalProtoText())
	}
	if len(x.Results) > 0 {
		sb.WriteString(" results: [")
		for i, v := range x.Results {
			if i > 0 {
				sb.WriteString(", ")
			}
			sb.WriteString(v.MarshalProtoText())
		}
		sb.WriteString("]")
	}
	if x.TransactionId != 0 {
		sb.WriteString(" transaction_id: ")
		sb.WriteString(strconv.FormatInt(int64(x.TransactionId), 10))
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *BeginExecuteBatchResponse) String() string {
	return x.MarshalProtoText()
}
func (x *MessageStreamRequest) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("MessageStreamRequest { ")
	if x.EffectiveCallerId != nil {
		sb.WriteString(" effective_caller_id: ")
		sb.WriteString(x.EffectiveCallerId.MarshalProtoText())
	}
	if x.ImmediateCallerId != nil {
		sb.WriteString(" immediate_caller_id: ")
		sb.WriteString(x.ImmediateCallerId.MarshalProtoText())
	}
	if x.Target != nil {
		sb.WriteString(" target: ")
		sb.WriteString(x.Target.MarshalProtoText())
	}
	if x.Name != "" {
		sb.WriteString(" name: ")
		sb.WriteString(strconv.Quote(x.Name))
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *MessageStreamRequest) String() string {
	return x.MarshalProtoText()
}
func (x *MessageStreamResponse) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("MessageStreamResponse { ")
	if x.Result != nil {
		sb.WriteString(" result: ")
		sb.WriteString(x.Result.MarshalProtoText())
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *MessageStreamResponse) String() string {
	return x.MarshalProtoText()
}
func (x *MessageAckRequest) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("MessageAckRequest { ")
	if x.EffectiveCallerId != nil {
		sb.WriteString(" effective_caller_id: ")
		sb.WriteString(x.EffectiveCallerId.MarshalProtoText())
	}
	if x.ImmediateCallerId != nil {
		sb.WriteString(" immediate_caller_id: ")
		sb.WriteString(x.ImmediateCallerId.MarshalProtoText())
	}
	if x.Target != nil {
		sb.WriteString(" target: ")
		sb.WriteString(x.Target.MarshalProtoText())
	}
	if x.Name != "" {
		sb.WriteString(" name: ")
		sb.WriteString(strconv.Quote(x.Name))
	}
	if len(x.Ids) > 0 {
		sb.WriteString(" ids: [")
		for i, v := range x.Ids {
			if i > 0 {
				sb.WriteString(", ")
			}
			sb.WriteString(v.MarshalProtoText())
		}
		sb.WriteString("]")
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *MessageAckRequest) String() string {
	return x.MarshalProtoText()
}
func (x *MessageAckResponse) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("MessageAckResponse { ")
	if x.Result != nil {
		sb.WriteString(" result: ")
		sb.WriteString(x.Result.MarshalProtoText())
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *MessageAckResponse) String() string {
	return x.MarshalProtoText()
}
func (x SplitQueryRequest_Algorithm) MarshalProtoText() string {
	return x.String()
}
func (x *SplitQueryRequest) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("SplitQueryRequest { ")
	if x.EffectiveCallerId != nil {
		sb.WriteString(" effective_caller_id: ")
		sb.WriteString(x.EffectiveCallerId.MarshalProtoText())
	}
	if x.ImmediateCallerId != nil {
		sb.WriteString(" immediate_caller_id: ")
		sb.WriteString(x.ImmediateCallerId.MarshalProtoText())
	}
	if x.Target != nil {
		sb.WriteString(" target: ")
		sb.WriteString(x.Target.MarshalProtoText())
	}
	if x.Query != nil {
		sb.WriteString(" query: ")
		sb.WriteString(x.Query.MarshalProtoText())
	}
	if len(x.SplitColumn) > 0 {
		sb.WriteString(" split_column: [")
		for i, v := range x.SplitColumn {
			if i > 0 {
				sb.WriteString(", ")
			}
			sb.WriteString(strconv.Quote(v))
		}
		sb.WriteString("]")
	}
	if x.SplitCount != 0 {
		sb.WriteString(" split_count: ")
		sb.WriteString(strconv.FormatInt(int64(x.SplitCount), 10))
	}
	if x.NumRowsPerQueryPart != 0 {
		sb.WriteString(" num_rows_per_query_part: ")
		sb.WriteString(strconv.FormatInt(int64(x.NumRowsPerQueryPart), 10))
	}
	if x.Algorithm != 0 {
		sb.WriteString(" algorithm: ")
		sb.WriteString(SplitQueryRequest_Algorithm(x.Algorithm).String())
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *SplitQueryRequest) String() string {
	return x.MarshalProtoText()
}
func (x *QuerySplit) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("QuerySplit { ")
	if x.Query != nil {
		sb.WriteString(" query: ")
		sb.WriteString(x.Query.MarshalProtoText())
	}
	if x.RowCount != 0 {
		sb.WriteString(" row_count: ")
		sb.WriteString(strconv.FormatInt(int64(x.RowCount), 10))
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *QuerySplit) String() string {
	return x.MarshalProtoText()
}
func (x *SplitQueryResponse) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("SplitQueryResponse { ")
	if len(x.Queries) > 0 {
		sb.WriteString(" queries: [")
		for i, v := range x.Queries {
			if i > 0 {
				sb.WriteString(", ")
			}
			sb.WriteString(v.MarshalProtoText())
		}
		sb.WriteString("]")
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *SplitQueryResponse) String() string {
	return x.MarshalProtoText()
}
func (x *StreamHealthRequest) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("StreamHealthRequest { ")
	sb.WriteString("}")
	return sb.String()
}
func (x *StreamHealthRequest) String() string {
	return x.MarshalProtoText()
}
func (x *RealtimeStats) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("RealtimeStats { ")
	if x.HealthError != "" {
		sb.WriteString(" health_error: ")
		sb.WriteString(strconv.Quote(x.HealthError))
	}
	if x.SecondsBehindMaster != 0 {
		sb.WriteString(" seconds_behind_master: ")
		sb.WriteString(strconv.FormatUint(uint64(x.SecondsBehindMaster), 10))
	}
	if x.BinlogPlayersCount != 0 {
		sb.WriteString(" binlog_players_count: ")
		sb.WriteString(strconv.FormatInt(int64(x.BinlogPlayersCount), 10))
	}
	if x.SecondsBehindMasterFilteredReplication != 0 {
		sb.WriteString(" seconds_behind_master_filtered_replication: ")
		sb.WriteString(strconv.FormatInt(int64(x.SecondsBehindMasterFilteredReplication), 10))
	}
	if x.CpuUsage != 0 {
		sb.WriteString(" cpu_usage: ")
		sb.WriteString(strconv.FormatFloat(x.CpuUsage, 'g', -1, 64))
	}
	if x.Qps != 0 {
		sb.WriteString(" qps: ")
		sb.WriteString(strconv.FormatFloat(x.Qps, 'g', -1, 64))
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *RealtimeStats) String() string {
	return x.MarshalProtoText()
}
func (x *AggregateStats) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("AggregateStats { ")
	if x.HealthyTabletCount != 0 {
		sb.WriteString(" healthy_tablet_count: ")
		sb.WriteString(strconv.FormatInt(int64(x.HealthyTabletCount), 10))
	}
	if x.UnhealthyTabletCount != 0 {
		sb.WriteString(" unhealthy_tablet_count: ")
		sb.WriteString(strconv.FormatInt(int64(x.UnhealthyTabletCount), 10))
	}
	if x.SecondsBehindMasterMin != 0 {
		sb.WriteString(" seconds_behind_master_min: ")
		sb.WriteString(strconv.FormatUint(uint64(x.SecondsBehindMasterMin), 10))
	}
	if x.SecondsBehindMasterMax != 0 {
		sb.WriteString(" seconds_behind_master_max: ")
		sb.WriteString(strconv.FormatUint(uint64(x.SecondsBehindMasterMax), 10))
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *AggregateStats) String() string {
	return x.MarshalProtoText()
}
func (x *StreamHealthResponse) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("StreamHealthResponse { ")
	if x.Target != nil {
		sb.WriteString(" target: ")
		sb.WriteString(x.Target.MarshalProtoText())
	}
	if x.Serving {
		sb.WriteString(" serving: ")
		sb.WriteString(strconv.FormatBool(x.Serving))
	}
	if x.TabletExternallyReparentedTimestamp != 0 {
		sb.WriteString(" tablet_externally_reparented_timestamp: ")
		sb.WriteString(strconv.FormatInt(int64(x.TabletExternallyReparentedTimestamp), 10))
	}
	if x.RealtimeStats != nil {
		sb.WriteString(" realtime_stats: ")
		sb.WriteString(x.RealtimeStats.MarshalProtoText())
	}
	if x.TabletAlias != nil {
		sb.WriteString(" tablet_alias: ")
		sb.WriteString(x.TabletAlias.MarshalProtoText())
	}
	if x.AggregateStats != nil {
		sb.WriteString(" aggregate_stats: ")
		sb.WriteString(x.AggregateStats.MarshalProtoText())
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *StreamHealthResponse) String() string {
	return x.MarshalProtoText()
}
func (x *UpdateStreamRequest) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("UpdateStreamRequest { ")
	if x.EffectiveCallerId != nil {
		sb.WriteString(" effective_caller_id: ")
		sb.WriteString(x.EffectiveCallerId.MarshalProtoText())
	}
	if x.ImmediateCallerId != nil {
		sb.WriteString(" immediate_caller_id: ")
		sb.WriteString(x.ImmediateCallerId.MarshalProtoText())
	}
	if x.Target != nil {
		sb.WriteString(" target: ")
		sb.WriteString(x.Target.MarshalProtoText())
	}
	if x.Position != "" {
		sb.WriteString(" position: ")
		sb.WriteString(strconv.Quote(x.Position))
	}
	if x.Timestamp != 0 {
		sb.WriteString(" timestamp: ")
		sb.WriteString(strconv.FormatInt(int64(x.Timestamp), 10))
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *UpdateStreamRequest) String() string {
	return x.MarshalProtoText()
}
func (x *UpdateStreamResponse) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("UpdateStreamResponse { ")
	if x.Event != nil {
		sb.WriteString(" event: ")
		sb.WriteString(x.Event.MarshalProtoText())
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *UpdateStreamResponse) String() string {
	return x.MarshalProtoText()
}
func (x *TransactionMetadata) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("TransactionMetadata { ")
	if x.Dtid != "" {
		sb.WriteString(" dtid: ")
		sb.WriteString(strconv.Quote(x.Dtid))
	}
	if x.State != 0 {
		sb.WriteString(" state: ")
		sb.WriteString(TransactionState(x.State).String())
	}
	if x.TimeCreated != 0 {
		sb.WriteString(" time_created: ")
		sb.WriteString(strconv.FormatInt(int64(x.TimeCreated), 10))
	}
	if len(x.Participants) > 0 {
		sb.WriteString(" participants: [")
		for i, v := range x.Participants {
			if i > 0 {
				sb.WriteString(", ")
			}
			sb.WriteString(v.MarshalProtoText())
		}
		sb.WriteString("]")
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *TransactionMetadata) String() string {
	return x.MarshalProtoText()
}
func (m *Target) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Target: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Target: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyspace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keyspace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shard", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shard = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TabletType", wireType)
			}
			m.TabletType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TabletType |= topodata.TabletType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Cell", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Cell = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VTGateCallerID) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VTGateCallerID: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VTGateCallerID: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Groups", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Groups = append(m.Groups, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EventToken) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EventToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EventToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shard", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shard = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Position = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Value) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Value: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Value: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BindVariable) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BindVariable: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BindVariable: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Value", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Value = append(m.Value[:0], dAtA[iNdEx:postIndex]...)
			if m.Value == nil {
				m.Value = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values, &Value{})
			if err := m.Values[len(m.Values)-1].UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BoundQuery) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BoundQuery: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BoundQuery: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sql", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sql = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BindVariables", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BindVariables == nil {
				m.BindVariables = make(map[string]*BindVariable)
			}
			var mapkey string
			var mapvalue *BindVariable
			for iNdEx < postIndex {
				entryPreIndex := iNdEx
				var wire uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protobuf_go_lite.ErrIntOverflow
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					wire |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				fieldNum := int32(wire >> 3)
				if fieldNum == 1 {
					var stringLenmapkey uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protobuf_go_lite.ErrIntOverflow
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						stringLenmapkey |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					intStringLenmapkey := int(stringLenmapkey)
					if intStringLenmapkey < 0 {
						return protobuf_go_lite.ErrInvalidLength
					}
					postStringIndexmapkey := iNdEx + intStringLenmapkey
					if postStringIndexmapkey < 0 {
						return protobuf_go_lite.ErrInvalidLength
					}
					if postStringIndexmapkey > l {
						return io.ErrUnexpectedEOF
					}
					mapkey = string(dAtA[iNdEx:postStringIndexmapkey])
					iNdEx = postStringIndexmapkey
				} else if fieldNum == 2 {
					var mapmsglen int
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protobuf_go_lite.ErrIntOverflow
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						mapmsglen |= int(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					if mapmsglen < 0 {
						return protobuf_go_lite.ErrInvalidLength
					}
					postmsgIndex := iNdEx + mapmsglen
					if postmsgIndex < 0 {
						return protobuf_go_lite.ErrInvalidLength
					}
					if postmsgIndex > l {
						return io.ErrUnexpectedEOF
					}
					mapvalue = &BindVariable{}
					if err := mapvalue.UnmarshalVT(dAtA[iNdEx:postmsgIndex]); err != nil {
						return err
					}
					iNdEx = postmsgIndex
				} else {
					iNdEx = entryPreIndex
					skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
					if err != nil {
						return err
					}
					if (skippy < 0) || (iNdEx+skippy) < 0 {
						return protobuf_go_lite.ErrInvalidLength
					}
					if (iNdEx + skippy) > postIndex {
						return io.ErrUnexpectedEOF
					}
					iNdEx += skippy
				}
			}
			m.BindVariables[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecuteOptions) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecuteOptions: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecuteOptions: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludeEventToken", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IncludeEventToken = bool(v != 0)
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CompareEventToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.CompareEventToken == nil {
				m.CompareEventToken = &EventToken{}
			}
			if err := m.CompareEventToken.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IncludedFields", wireType)
			}
			m.IncludedFields = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IncludedFields |= ExecuteOptions_IncludedFields(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientFoundRows", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.ClientFoundRows = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Workload", wireType)
			}
			m.Workload = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Workload |= ExecuteOptions_Workload(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SqlSelectLimit", wireType)
			}
			m.SqlSelectLimit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SqlSelectLimit |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionIsolation", wireType)
			}
			m.TransactionIsolation = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TransactionIsolation |= ExecuteOptions_TransactionIsolation(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SkipQueryPlanCache", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SkipQueryPlanCache = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Field) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Field: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Field: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= Type(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Table", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Table = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgTable", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrgTable = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Database", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Database = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OrgName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OrgName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ColumnLength", wireType)
			}
			m.ColumnLength = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.ColumnLength |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Charset", wireType)
			}
			m.Charset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Charset |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Decimals", wireType)
			}
			m.Decimals = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Decimals |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Flags", wireType)
			}
			m.Flags = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Flags |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Row) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Row: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Row: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType == 0 {
				var v uint64
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protobuf_go_lite.ErrIntOverflow
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					v |= uint64(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
				m.Lengths = append(m.Lengths, int64(v))
			} else if wireType == 2 {
				var packedLen int
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return protobuf_go_lite.ErrIntOverflow
					}
					if iNdEx >= l {
						return io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					packedLen |= int(b&0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				if packedLen < 0 {
					return protobuf_go_lite.ErrInvalidLength
				}
				postIndex := iNdEx + packedLen
				if postIndex < 0 {
					return protobuf_go_lite.ErrInvalidLength
				}
				if postIndex > l {
					return io.ErrUnexpectedEOF
				}
				var elementCount int
				var count int
				for _, integer := range dAtA[iNdEx:postIndex] {
					if integer < 128 {
						count++
					}
				}
				elementCount = count
				if elementCount != 0 && len(m.Lengths) == 0 {
					m.Lengths = make([]int64, 0, elementCount)
				}
				for iNdEx < postIndex {
					var v uint64
					for shift := uint(0); ; shift += 7 {
						if shift >= 64 {
							return protobuf_go_lite.ErrIntOverflow
						}
						if iNdEx >= l {
							return io.ErrUnexpectedEOF
						}
						b := dAtA[iNdEx]
						iNdEx++
						v |= uint64(b&0x7F) << shift
						if b < 0x80 {
							break
						}
					}
					v = (v >> 1) ^ uint64((int64(v&1)<<63)>>63)
					m.Lengths = append(m.Lengths, int64(v))
				}
			} else {
				return fmt.Errorf("proto: wrong wireType = %d for field Lengths", wireType)
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Values", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Values = append(m.Values[:0], dAtA[iNdEx:postIndex]...)
			if m.Values == nil {
				m.Values = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResultExtras) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResultExtras: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResultExtras: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EventToken == nil {
				m.EventToken = &EventToken{}
			}
			if err := m.EventToken.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fresher", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Fresher = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryResult) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, &Field{})
			if err := m.Fields[len(m.Fields)-1].UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowsAffected", wireType)
			}
			m.RowsAffected = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RowsAffected |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field InsertId", wireType)
			}
			m.InsertId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.InsertId |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rows", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rows = append(m.Rows, &Row{})
			if err := m.Rows[len(m.Rows)-1].UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Extras", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Extras == nil {
				m.Extras = &ResultExtras{}
			}
			if err := m.Extras.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QueryWarning) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QueryWarning: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QueryWarning: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamEvent_Statement) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamEvent_Statement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamEvent_Statement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			m.Category = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Category |= StreamEvent_Statement_Category(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TableName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryKeyFields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrimaryKeyFields = append(m.PrimaryKeyFields, &Field{})
			if err := m.PrimaryKeyFields[len(m.PrimaryKeyFields)-1].UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PrimaryKeyValues", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PrimaryKeyValues = append(m.PrimaryKeyValues, &Row{})
			if err := m.PrimaryKeyValues[len(m.PrimaryKeyValues)-1].UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sql", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sql = append(m.Sql[:0], dAtA[iNdEx:postIndex]...)
			if m.Sql == nil {
				m.Sql = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamEvent) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Statements = append(m.Statements, &StreamEvent_Statement{})
			if err := m.Statements[len(m.Statements)-1].UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EventToken == nil {
				m.EventToken = &EventToken{}
			}
			if err := m.EventToken.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecuteRequest) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecuteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecuteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveCallerId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EffectiveCallerId == nil {
				m.EffectiveCallerId = &vtrpc.CallerID{}
			}
			if err := m.EffectiveCallerId.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImmediateCallerId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ImmediateCallerId == nil {
				m.ImmediateCallerId = &VTGateCallerID{}
			}
			if err := m.ImmediateCallerId.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Target == nil {
				m.Target = &Target{}
			}
			if err := m.Target.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Query == nil {
				m.Query = &BoundQuery{}
			}
			if err := m.Query.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionId", wireType)
			}
			m.TransactionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TransactionId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Options == nil {
				m.Options = &ExecuteOptions{}
			}
			if err := m.Options.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecuteResponse) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecuteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecuteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &QueryResult{}
			}
			if err := m.Result.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ResultWithError) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ResultWithError: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ResultWithError: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &vtrpc.RPCError{}
			}
			if err := m.Error.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &QueryResult{}
			}
			if err := m.Result.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecuteBatchRequest) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecuteBatchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecuteBatchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveCallerId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EffectiveCallerId == nil {
				m.EffectiveCallerId = &vtrpc.CallerID{}
			}
			if err := m.EffectiveCallerId.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImmediateCallerId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ImmediateCallerId == nil {
				m.ImmediateCallerId = &VTGateCallerID{}
			}
			if err := m.ImmediateCallerId.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Target == nil {
				m.Target = &Target{}
			}
			if err := m.Target.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queries = append(m.Queries, &BoundQuery{})
			if err := m.Queries[len(m.Queries)-1].UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsTransaction", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AsTransaction = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionId", wireType)
			}
			m.TransactionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TransactionId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Options == nil {
				m.Options = &ExecuteOptions{}
			}
			if err := m.Options.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ExecuteBatchResponse) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ExecuteBatchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ExecuteBatchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Results = append(m.Results, &QueryResult{})
			if err := m.Results[len(m.Results)-1].UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamExecuteRequest) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamExecuteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamExecuteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveCallerId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EffectiveCallerId == nil {
				m.EffectiveCallerId = &vtrpc.CallerID{}
			}
			if err := m.EffectiveCallerId.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImmediateCallerId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ImmediateCallerId == nil {
				m.ImmediateCallerId = &VTGateCallerID{}
			}
			if err := m.ImmediateCallerId.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Target == nil {
				m.Target = &Target{}
			}
			if err := m.Target.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Query == nil {
				m.Query = &BoundQuery{}
			}
			if err := m.Query.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Options == nil {
				m.Options = &ExecuteOptions{}
			}
			if err := m.Options.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionId", wireType)
			}
			m.TransactionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TransactionId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamExecuteResponse) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamExecuteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamExecuteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &QueryResult{}
			}
			if err := m.Result.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BeginRequest) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BeginRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BeginRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveCallerId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EffectiveCallerId == nil {
				m.EffectiveCallerId = &vtrpc.CallerID{}
			}
			if err := m.EffectiveCallerId.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImmediateCallerId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ImmediateCallerId == nil {
				m.ImmediateCallerId = &VTGateCallerID{}
			}
			if err := m.ImmediateCallerId.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Target == nil {
				m.Target = &Target{}
			}
			if err := m.Target.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Options == nil {
				m.Options = &ExecuteOptions{}
			}
			if err := m.Options.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BeginResponse) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BeginResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BeginResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionId", wireType)
			}
			m.TransactionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TransactionId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommitRequest) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveCallerId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EffectiveCallerId == nil {
				m.EffectiveCallerId = &vtrpc.CallerID{}
			}
			if err := m.EffectiveCallerId.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImmediateCallerId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ImmediateCallerId == nil {
				m.ImmediateCallerId = &VTGateCallerID{}
			}
			if err := m.ImmediateCallerId.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Target == nil {
				m.Target = &Target{}
			}
			if err := m.Target.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionId", wireType)
			}
			m.TransactionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TransactionId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommitResponse) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RollbackRequest) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RollbackRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RollbackRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveCallerId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EffectiveCallerId == nil {
				m.EffectiveCallerId = &vtrpc.CallerID{}
			}
			if err := m.EffectiveCallerId.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImmediateCallerId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ImmediateCallerId == nil {
				m.ImmediateCallerId = &VTGateCallerID{}
			}
			if err := m.ImmediateCallerId.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Target == nil {
				m.Target = &Target{}
			}
			if err := m.Target.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionId", wireType)
			}
			m.TransactionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TransactionId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RollbackResponse) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RollbackResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RollbackResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrepareRequest) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrepareRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrepareRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveCallerId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EffectiveCallerId == nil {
				m.EffectiveCallerId = &vtrpc.CallerID{}
			}
			if err := m.EffectiveCallerId.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImmediateCallerId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ImmediateCallerId == nil {
				m.ImmediateCallerId = &VTGateCallerID{}
			}
			if err := m.ImmediateCallerId.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Target == nil {
				m.Target = &Target{}
			}
			if err := m.Target.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionId", wireType)
			}
			m.TransactionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TransactionId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dtid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dtid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PrepareResponse) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PrepareResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PrepareResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommitPreparedRequest) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommitPreparedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommitPreparedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveCallerId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EffectiveCallerId == nil {
				m.EffectiveCallerId = &vtrpc.CallerID{}
			}
			if err := m.EffectiveCallerId.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImmediateCallerId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ImmediateCallerId == nil {
				m.ImmediateCallerId = &VTGateCallerID{}
			}
			if err := m.ImmediateCallerId.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Target == nil {
				m.Target = &Target{}
			}
			if err := m.Target.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dtid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dtid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CommitPreparedResponse) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CommitPreparedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CommitPreparedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RollbackPreparedRequest) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RollbackPreparedRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RollbackPreparedRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveCallerId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EffectiveCallerId == nil {
				m.EffectiveCallerId = &vtrpc.CallerID{}
			}
			if err := m.EffectiveCallerId.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImmediateCallerId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ImmediateCallerId == nil {
				m.ImmediateCallerId = &VTGateCallerID{}
			}
			if err := m.ImmediateCallerId.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Target == nil {
				m.Target = &Target{}
			}
			if err := m.Target.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionId", wireType)
			}
			m.TransactionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TransactionId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dtid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dtid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RollbackPreparedResponse) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RollbackPreparedResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RollbackPreparedResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateTransactionRequest) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateTransactionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateTransactionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveCallerId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EffectiveCallerId == nil {
				m.EffectiveCallerId = &vtrpc.CallerID{}
			}
			if err := m.EffectiveCallerId.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImmediateCallerId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ImmediateCallerId == nil {
				m.ImmediateCallerId = &VTGateCallerID{}
			}
			if err := m.ImmediateCallerId.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Target == nil {
				m.Target = &Target{}
			}
			if err := m.Target.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dtid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dtid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participants", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Participants = append(m.Participants, &Target{})
			if err := m.Participants[len(m.Participants)-1].UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateTransactionResponse) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateTransactionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateTransactionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartCommitRequest) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartCommitRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartCommitRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveCallerId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EffectiveCallerId == nil {
				m.EffectiveCallerId = &vtrpc.CallerID{}
			}
			if err := m.EffectiveCallerId.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImmediateCallerId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ImmediateCallerId == nil {
				m.ImmediateCallerId = &VTGateCallerID{}
			}
			if err := m.ImmediateCallerId.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Target == nil {
				m.Target = &Target{}
			}
			if err := m.Target.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionId", wireType)
			}
			m.TransactionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TransactionId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dtid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dtid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StartCommitResponse) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StartCommitResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StartCommitResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetRollbackRequest) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetRollbackRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetRollbackRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveCallerId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EffectiveCallerId == nil {
				m.EffectiveCallerId = &vtrpc.CallerID{}
			}
			if err := m.EffectiveCallerId.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImmediateCallerId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ImmediateCallerId == nil {
				m.ImmediateCallerId = &VTGateCallerID{}
			}
			if err := m.ImmediateCallerId.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Target == nil {
				m.Target = &Target{}
			}
			if err := m.Target.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionId", wireType)
			}
			m.TransactionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TransactionId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dtid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dtid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SetRollbackResponse) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SetRollbackResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SetRollbackResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConcludeTransactionRequest) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConcludeTransactionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConcludeTransactionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveCallerId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EffectiveCallerId == nil {
				m.EffectiveCallerId = &vtrpc.CallerID{}
			}
			if err := m.EffectiveCallerId.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImmediateCallerId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ImmediateCallerId == nil {
				m.ImmediateCallerId = &VTGateCallerID{}
			}
			if err := m.ImmediateCallerId.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Target == nil {
				m.Target = &Target{}
			}
			if err := m.Target.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dtid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dtid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ConcludeTransactionResponse) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ConcludeTransactionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ConcludeTransactionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReadTransactionRequest) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReadTransactionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReadTransactionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveCallerId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EffectiveCallerId == nil {
				m.EffectiveCallerId = &vtrpc.CallerID{}
			}
			if err := m.EffectiveCallerId.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImmediateCallerId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ImmediateCallerId == nil {
				m.ImmediateCallerId = &VTGateCallerID{}
			}
			if err := m.ImmediateCallerId.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Target == nil {
				m.Target = &Target{}
			}
			if err := m.Target.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dtid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dtid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReadTransactionResponse) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReadTransactionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReadTransactionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metadata == nil {
				m.Metadata = &TransactionMetadata{}
			}
			if err := m.Metadata.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BeginExecuteRequest) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BeginExecuteRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BeginExecuteRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveCallerId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EffectiveCallerId == nil {
				m.EffectiveCallerId = &vtrpc.CallerID{}
			}
			if err := m.EffectiveCallerId.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImmediateCallerId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ImmediateCallerId == nil {
				m.ImmediateCallerId = &VTGateCallerID{}
			}
			if err := m.ImmediateCallerId.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Target == nil {
				m.Target = &Target{}
			}
			if err := m.Target.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Query == nil {
				m.Query = &BoundQuery{}
			}
			if err := m.Query.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Options == nil {
				m.Options = &ExecuteOptions{}
			}
			if err := m.Options.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BeginExecuteResponse) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BeginExecuteResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BeginExecuteResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &vtrpc.RPCError{}
			}
			if err := m.Error.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &QueryResult{}
			}
			if err := m.Result.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionId", wireType)
			}
			m.TransactionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TransactionId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BeginExecuteBatchRequest) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BeginExecuteBatchRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BeginExecuteBatchRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveCallerId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EffectiveCallerId == nil {
				m.EffectiveCallerId = &vtrpc.CallerID{}
			}
			if err := m.EffectiveCallerId.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImmediateCallerId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ImmediateCallerId == nil {
				m.ImmediateCallerId = &VTGateCallerID{}
			}
			if err := m.ImmediateCallerId.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Target == nil {
				m.Target = &Target{}
			}
			if err := m.Target.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queries = append(m.Queries, &BoundQuery{})
			if err := m.Queries[len(m.Queries)-1].UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AsTransaction", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.AsTransaction = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Options", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Options == nil {
				m.Options = &ExecuteOptions{}
			}
			if err := m.Options.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BeginExecuteBatchResponse) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BeginExecuteBatchResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BeginExecuteBatchResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Error", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Error == nil {
				m.Error = &vtrpc.RPCError{}
			}
			if err := m.Error.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Results", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Results = append(m.Results, &QueryResult{})
			if err := m.Results[len(m.Results)-1].UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TransactionId", wireType)
			}
			m.TransactionId = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TransactionId |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageStreamRequest) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageStreamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageStreamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveCallerId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EffectiveCallerId == nil {
				m.EffectiveCallerId = &vtrpc.CallerID{}
			}
			if err := m.EffectiveCallerId.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImmediateCallerId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ImmediateCallerId == nil {
				m.ImmediateCallerId = &VTGateCallerID{}
			}
			if err := m.ImmediateCallerId.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Target == nil {
				m.Target = &Target{}
			}
			if err := m.Target.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageStreamResponse) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageStreamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageStreamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &QueryResult{}
			}
			if err := m.Result.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageAckRequest) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageAckRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageAckRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveCallerId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EffectiveCallerId == nil {
				m.EffectiveCallerId = &vtrpc.CallerID{}
			}
			if err := m.EffectiveCallerId.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImmediateCallerId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ImmediateCallerId == nil {
				m.ImmediateCallerId = &VTGateCallerID{}
			}
			if err := m.ImmediateCallerId.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Target == nil {
				m.Target = &Target{}
			}
			if err := m.Target.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ids", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ids = append(m.Ids, &Value{})
			if err := m.Ids[len(m.Ids)-1].UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MessageAckResponse) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MessageAckResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MessageAckResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Result == nil {
				m.Result = &QueryResult{}
			}
			if err := m.Result.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SplitQueryRequest) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SplitQueryRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SplitQueryRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveCallerId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EffectiveCallerId == nil {
				m.EffectiveCallerId = &vtrpc.CallerID{}
			}
			if err := m.EffectiveCallerId.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImmediateCallerId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ImmediateCallerId == nil {
				m.ImmediateCallerId = &VTGateCallerID{}
			}
			if err := m.ImmediateCallerId.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Target == nil {
				m.Target = &Target{}
			}
			if err := m.Target.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Query == nil {
				m.Query = &BoundQuery{}
			}
			if err := m.Query.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SplitColumn", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SplitColumn = append(m.SplitColumn, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SplitCount", wireType)
			}
			m.SplitCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SplitCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumRowsPerQueryPart", wireType)
			}
			m.NumRowsPerQueryPart = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumRowsPerQueryPart |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Algorithm", wireType)
			}
			m.Algorithm = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Algorithm |= SplitQueryRequest_Algorithm(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *QuerySplit) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: QuerySplit: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: QuerySplit: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Query == nil {
				m.Query = &BoundQuery{}
			}
			if err := m.Query.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowCount", wireType)
			}
			m.RowCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RowCount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *SplitQueryResponse) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: SplitQueryResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: SplitQueryResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Queries", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Queries = append(m.Queries, &QuerySplit{})
			if err := m.Queries[len(m.Queries)-1].UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamHealthRequest) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamHealthRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamHealthRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RealtimeStats) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RealtimeStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RealtimeStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field HealthError", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.HealthError = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecondsBehindMaster", wireType)
			}
			m.SecondsBehindMaster = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SecondsBehindMaster |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BinlogPlayersCount", wireType)
			}
			m.BinlogPlayersCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BinlogPlayersCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecondsBehindMasterFilteredReplication", wireType)
			}
			m.SecondsBehindMasterFilteredReplication = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SecondsBehindMasterFilteredReplication |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field CpuUsage", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.CpuUsage = float64(math.Float64frombits(v))
		case 6:
			if wireType != 1 {
				return fmt.Errorf("proto: wrong wireType = %d for field Qps", wireType)
			}
			var v uint64
			if (iNdEx + 8) > l {
				return io.ErrUnexpectedEOF
			}
			v = uint64(binary.LittleEndian.Uint64(dAtA[iNdEx:]))
			iNdEx += 8
			m.Qps = float64(math.Float64frombits(v))
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *AggregateStats) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: AggregateStats: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: AggregateStats: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field HealthyTabletCount", wireType)
			}
			m.HealthyTabletCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.HealthyTabletCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UnhealthyTabletCount", wireType)
			}
			m.UnhealthyTabletCount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.UnhealthyTabletCount |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecondsBehindMasterMin", wireType)
			}
			m.SecondsBehindMasterMin = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SecondsBehindMasterMin |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SecondsBehindMasterMax", wireType)
			}
			m.SecondsBehindMasterMax = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SecondsBehindMasterMax |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamHealthResponse) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamHealthResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamHealthResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Target == nil {
				m.Target = &Target{}
			}
			if err := m.Target.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Serving", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Serving = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TabletExternallyReparentedTimestamp", wireType)
			}
			m.TabletExternallyReparentedTimestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TabletExternallyReparentedTimestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RealtimeStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RealtimeStats == nil {
				m.RealtimeStats = &RealtimeStats{}
			}
			if err := m.RealtimeStats.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TabletAlias", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.TabletAlias == nil {
				m.TabletAlias = &topodata.TabletAlias{}
			}
			if err := m.TabletAlias.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AggregateStats", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.AggregateStats == nil {
				m.AggregateStats = &AggregateStats{}
			}
			if err := m.AggregateStats.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateStreamRequest) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateStreamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateStreamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveCallerId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EffectiveCallerId == nil {
				m.EffectiveCallerId = &vtrpc.CallerID{}
			}
			if err := m.EffectiveCallerId.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImmediateCallerId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ImmediateCallerId == nil {
				m.ImmediateCallerId = &VTGateCallerID{}
			}
			if err := m.ImmediateCallerId.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Target == nil {
				m.Target = &Target{}
			}
			if err := m.Target.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Position = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UpdateStreamResponse) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UpdateStreamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UpdateStreamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Event", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Event == nil {
				m.Event = &StreamEvent{}
			}
			if err := m.Event.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TransactionMetadata) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TransactionMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TransactionMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dtid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dtid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			m.State = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.State |= TransactionState(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TimeCreated", wireType)
			}
			m.TimeCreated = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TimeCreated |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participants", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Participants = append(m.Participants, &Target{})
			if err := m.Participants[len(m.Participants)-1].UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
