// Code generated by protoc-gen-go-lite. DO NOT EDIT.
// protoc-gen-go-lite version: v0.6.1
// source: github.com/dolthub/vitess/proto/dolthub/vt/binlogdata.proto

package dolthub_vt_binlogdata

import (
	base64 "encoding/base64"
	fmt "fmt"
	protobuf_go_lite "github.com/aperturerobotics/protobuf-go-lite"
	json "github.com/aperturerobotics/protobuf-go-lite/json"
	query "github.com/dolthub/vitess/go/vt/proto/query"
	topodata "github.com/dolthub/vitess/go/vt/proto/topodata"
	vtrpc "github.com/dolthub/vitess/go/vt/proto/vtrpc"
	io "io"
	strconv "strconv"
	strings "strings"
)

//
//Copyright 2019 The Vitess Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// This file contains all the types and servers necessary to make
// RPC calls to VtTablet for the binlog protocol, used by filtered
// replication only.

// OnDDLAction lists the possible actions for DDLs.
type OnDDLAction int32

const (
	OnDDLAction_IGNORE      OnDDLAction = 0
	OnDDLAction_STOP        OnDDLAction = 1
	OnDDLAction_EXEC        OnDDLAction = 2
	OnDDLAction_EXEC_IGNORE OnDDLAction = 3
)

// Enum value maps for OnDDLAction.
var (
	OnDDLAction_name = map[int32]string{
		0: "IGNORE",
		1: "STOP",
		2: "EXEC",
		3: "EXEC_IGNORE",
	}
	OnDDLAction_value = map[string]int32{
		"IGNORE":      0,
		"STOP":        1,
		"EXEC":        2,
		"EXEC_IGNORE": 3,
	}
)

func (x OnDDLAction) Enum() *OnDDLAction {
	p := new(OnDDLAction)
	*p = x
	return p
}

func (x OnDDLAction) String() string {
	name, valid := OnDDLAction_name[int32(x)]
	if valid {
		return name
	}
	return strconv.Itoa(int(x))
}

// VEventType enumerates the event types.
// This list is comprehensive. Many of these types
// will not be encountered in RBR mode.
type VEventType int32

const (
	VEventType_UNKNOWN   VEventType = 0
	VEventType_GTID      VEventType = 1
	VEventType_BEGIN     VEventType = 2
	VEventType_COMMIT    VEventType = 3
	VEventType_ROLLBACK  VEventType = 4
	VEventType_DDL       VEventType = 5
	VEventType_INSERT    VEventType = 6
	VEventType_REPLACE   VEventType = 7
	VEventType_UPDATE    VEventType = 8
	VEventType_DELETE    VEventType = 9
	VEventType_SET       VEventType = 10
	VEventType_OTHER     VEventType = 11
	VEventType_ROW       VEventType = 12
	VEventType_FIELD     VEventType = 13
	VEventType_HEARTBEAT VEventType = 14
	VEventType_VGTID     VEventType = 15
	VEventType_JOURNAL   VEventType = 16
)

// Enum value maps for VEventType.
var (
	VEventType_name = map[int32]string{
		0:  "UNKNOWN",
		1:  "GTID",
		2:  "BEGIN",
		3:  "COMMIT",
		4:  "ROLLBACK",
		5:  "DDL",
		6:  "INSERT",
		7:  "REPLACE",
		8:  "UPDATE",
		9:  "DELETE",
		10: "SET",
		11: "OTHER",
		12: "ROW",
		13: "FIELD",
		14: "HEARTBEAT",
		15: "VGTID",
		16: "JOURNAL",
	}
	VEventType_value = map[string]int32{
		"UNKNOWN":   0,
		"GTID":      1,
		"BEGIN":     2,
		"COMMIT":    3,
		"ROLLBACK":  4,
		"DDL":       5,
		"INSERT":    6,
		"REPLACE":   7,
		"UPDATE":    8,
		"DELETE":    9,
		"SET":       10,
		"OTHER":     11,
		"ROW":       12,
		"FIELD":     13,
		"HEARTBEAT": 14,
		"VGTID":     15,
		"JOURNAL":   16,
	}
)

func (x VEventType) Enum() *VEventType {
	p := new(VEventType)
	*p = x
	return p
}

func (x VEventType) String() string {
	name, valid := VEventType_name[int32(x)]
	if valid {
		return name
	}
	return strconv.Itoa(int(x))
}

// MigrationType specifies the type of migration for the Journal.
type MigrationType int32

const (
	MigrationType_TABLES MigrationType = 0
	MigrationType_SHARDS MigrationType = 1
)

// Enum value maps for MigrationType.
var (
	MigrationType_name = map[int32]string{
		0: "TABLES",
		1: "SHARDS",
	}
	MigrationType_value = map[string]int32{
		"TABLES": 0,
		"SHARDS": 1,
	}
)

func (x MigrationType) Enum() *MigrationType {
	p := new(MigrationType)
	*p = x
	return p
}

func (x MigrationType) String() string {
	name, valid := MigrationType_name[int32(x)]
	if valid {
		return name
	}
	return strconv.Itoa(int(x))
}

type BinlogTransaction_Statement_Category int32

const (
	BinlogTransaction_Statement_BL_UNRECOGNIZED BinlogTransaction_Statement_Category = 0
	BinlogTransaction_Statement_BL_BEGIN        BinlogTransaction_Statement_Category = 1
	BinlogTransaction_Statement_BL_COMMIT       BinlogTransaction_Statement_Category = 2
	BinlogTransaction_Statement_BL_ROLLBACK     BinlogTransaction_Statement_Category = 3
	// BL_DML is deprecated.
	BinlogTransaction_Statement_BL_DML_DEPRECATED BinlogTransaction_Statement_Category = 4
	BinlogTransaction_Statement_BL_DDL            BinlogTransaction_Statement_Category = 5
	BinlogTransaction_Statement_BL_SET            BinlogTransaction_Statement_Category = 6
	BinlogTransaction_Statement_BL_INSERT         BinlogTransaction_Statement_Category = 7
	BinlogTransaction_Statement_BL_UPDATE         BinlogTransaction_Statement_Category = 8
	BinlogTransaction_Statement_BL_DELETE         BinlogTransaction_Statement_Category = 9
)

// Enum value maps for BinlogTransaction_Statement_Category.
var (
	BinlogTransaction_Statement_Category_name = map[int32]string{
		0: "BL_UNRECOGNIZED",
		1: "BL_BEGIN",
		2: "BL_COMMIT",
		3: "BL_ROLLBACK",
		4: "BL_DML_DEPRECATED",
		5: "BL_DDL",
		6: "BL_SET",
		7: "BL_INSERT",
		8: "BL_UPDATE",
		9: "BL_DELETE",
	}
	BinlogTransaction_Statement_Category_value = map[string]int32{
		"BL_UNRECOGNIZED":   0,
		"BL_BEGIN":          1,
		"BL_COMMIT":         2,
		"BL_ROLLBACK":       3,
		"BL_DML_DEPRECATED": 4,
		"BL_DDL":            5,
		"BL_SET":            6,
		"BL_INSERT":         7,
		"BL_UPDATE":         8,
		"BL_DELETE":         9,
	}
)

func (x BinlogTransaction_Statement_Category) Enum() *BinlogTransaction_Statement_Category {
	p := new(BinlogTransaction_Statement_Category)
	*p = x
	return p
}

func (x BinlogTransaction_Statement_Category) String() string {
	name, valid := BinlogTransaction_Statement_Category_name[int32(x)]
	if valid {
		return name
	}
	return strconv.Itoa(int(x))
}

type Filter_FieldEventMode int32

const (
	Filter_ERR_ON_MISMATCH Filter_FieldEventMode = 0
	Filter_BEST_EFFORT     Filter_FieldEventMode = 1
)

// Enum value maps for Filter_FieldEventMode.
var (
	Filter_FieldEventMode_name = map[int32]string{
		0: "ERR_ON_MISMATCH",
		1: "BEST_EFFORT",
	}
	Filter_FieldEventMode_value = map[string]int32{
		"ERR_ON_MISMATCH": 0,
		"BEST_EFFORT":     1,
	}
)

func (x Filter_FieldEventMode) Enum() *Filter_FieldEventMode {
	p := new(Filter_FieldEventMode)
	*p = x
	return p
}

func (x Filter_FieldEventMode) String() string {
	name, valid := Filter_FieldEventMode_name[int32(x)]
	if valid {
		return name
	}
	return strconv.Itoa(int(x))
}

// Charset is the per-statement charset info from a QUERY_EVENT binlog entry.
type Charset struct {
	unknownFields []byte
	// @@session.character_set_client
	Client int32 `protobuf:"varint,1,opt,name=client,proto3" json:"client,omitempty"`
	// @@session.collation_connection
	Conn int32 `protobuf:"varint,2,opt,name=conn,proto3" json:"conn,omitempty"`
	// @@session.collation_server
	Server int32 `protobuf:"varint,3,opt,name=server,proto3" json:"server,omitempty"`
}

func (x *Charset) Reset() {
	*x = Charset{}
}

func (*Charset) ProtoMessage() {}

func (x *Charset) GetClient() int32 {
	if x != nil {
		return x.Client
	}
	return 0
}

func (x *Charset) GetConn() int32 {
	if x != nil {
		return x.Conn
	}
	return 0
}

func (x *Charset) GetServer() int32 {
	if x != nil {
		return x.Server
	}
	return 0
}

// BinlogTransaction describes a transaction inside the binlogs.
// It is streamed by vttablet for filtered replication, used during resharding.
type BinlogTransaction struct {
	unknownFields []byte
	// the statements in this transaction
	Statements []*BinlogTransaction_Statement `protobuf:"bytes,1,rep,name=statements,proto3" json:"statements,omitempty"`
	// The Event Token for this event.
	EventToken *query.EventToken `protobuf:"bytes,4,opt,name=event_token,json=eventToken,proto3" json:"eventToken,omitempty"`
}

func (x *BinlogTransaction) Reset() {
	*x = BinlogTransaction{}
}

func (*BinlogTransaction) ProtoMessage() {}

func (x *BinlogTransaction) GetStatements() []*BinlogTransaction_Statement {
	if x != nil {
		return x.Statements
	}
	return nil
}

func (x *BinlogTransaction) GetEventToken() *query.EventToken {
	if x != nil {
		return x.EventToken
	}
	return nil
}

// StreamKeyRangeRequest is the payload to StreamKeyRange
type StreamKeyRangeRequest struct {
	unknownFields []byte
	// where to start
	Position string `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	// what to get
	KeyRange *topodata.KeyRange `protobuf:"bytes,2,opt,name=key_range,json=keyRange,proto3" json:"keyRange,omitempty"`
	// default charset on the player side
	Charset *Charset `protobuf:"bytes,3,opt,name=charset,proto3" json:"charset,omitempty"`
}

func (x *StreamKeyRangeRequest) Reset() {
	*x = StreamKeyRangeRequest{}
}

func (*StreamKeyRangeRequest) ProtoMessage() {}

func (x *StreamKeyRangeRequest) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *StreamKeyRangeRequest) GetKeyRange() *topodata.KeyRange {
	if x != nil {
		return x.KeyRange
	}
	return nil
}

func (x *StreamKeyRangeRequest) GetCharset() *Charset {
	if x != nil {
		return x.Charset
	}
	return nil
}

// StreamKeyRangeResponse is the response from StreamKeyRange
type StreamKeyRangeResponse struct {
	unknownFields     []byte
	BinlogTransaction *BinlogTransaction `protobuf:"bytes,1,opt,name=binlog_transaction,json=binlogTransaction,proto3" json:"binlogTransaction,omitempty"`
}

func (x *StreamKeyRangeResponse) Reset() {
	*x = StreamKeyRangeResponse{}
}

func (*StreamKeyRangeResponse) ProtoMessage() {}

func (x *StreamKeyRangeResponse) GetBinlogTransaction() *BinlogTransaction {
	if x != nil {
		return x.BinlogTransaction
	}
	return nil
}

// StreamTablesRequest is the payload to StreamTables
type StreamTablesRequest struct {
	unknownFields []byte
	// where to start
	Position string `protobuf:"bytes,1,opt,name=position,proto3" json:"position,omitempty"`
	// what to get
	Tables []string `protobuf:"bytes,2,rep,name=tables,proto3" json:"tables,omitempty"`
	// default charset on the player side
	Charset *Charset `protobuf:"bytes,3,opt,name=charset,proto3" json:"charset,omitempty"`
}

func (x *StreamTablesRequest) Reset() {
	*x = StreamTablesRequest{}
}

func (*StreamTablesRequest) ProtoMessage() {}

func (x *StreamTablesRequest) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *StreamTablesRequest) GetTables() []string {
	if x != nil {
		return x.Tables
	}
	return nil
}

func (x *StreamTablesRequest) GetCharset() *Charset {
	if x != nil {
		return x.Charset
	}
	return nil
}

// StreamTablesResponse is the response from StreamTables
type StreamTablesResponse struct {
	unknownFields     []byte
	BinlogTransaction *BinlogTransaction `protobuf:"bytes,1,opt,name=binlog_transaction,json=binlogTransaction,proto3" json:"binlogTransaction,omitempty"`
}

func (x *StreamTablesResponse) Reset() {
	*x = StreamTablesResponse{}
}

func (*StreamTablesResponse) ProtoMessage() {}

func (x *StreamTablesResponse) GetBinlogTransaction() *BinlogTransaction {
	if x != nil {
		return x.BinlogTransaction
	}
	return nil
}

// Rule represents one rule.
type Rule struct {
	unknownFields []byte
	// match can be a table name or a regular expression
	// delineated by '/' and '/'.
	Match string `protobuf:"bytes,1,opt,name=match,proto3" json:"match,omitempty"`
	// filter can be an empty string or keyrange if the match
	// is a regular expression. Otherwise, it must be a select
	// query.
	Filter string `protobuf:"bytes,2,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *Rule) Reset() {
	*x = Rule{}
}

func (*Rule) ProtoMessage() {}

func (x *Rule) GetMatch() string {
	if x != nil {
		return x.Match
	}
	return ""
}

func (x *Rule) GetFilter() string {
	if x != nil {
		return x.Filter
	}
	return ""
}

// Filter represents a list of ordered rules. First match
// wins.
type Filter struct {
	unknownFields  []byte
	Rules          []*Rule               `protobuf:"bytes,1,rep,name=rules,proto3" json:"rules,omitempty"`
	FieldEventMode Filter_FieldEventMode `protobuf:"varint,2,opt,name=fieldEventMode,proto3" json:"fieldEventMode,omitempty"`
}

func (x *Filter) Reset() {
	*x = Filter{}
}

func (*Filter) ProtoMessage() {}

func (x *Filter) GetRules() []*Rule {
	if x != nil {
		return x.Rules
	}
	return nil
}

func (x *Filter) GetFieldEventMode() Filter_FieldEventMode {
	if x != nil {
		return x.FieldEventMode
	}
	return Filter_ERR_ON_MISMATCH
}

// BinlogSource specifies the source  and filter parameters for
// Filtered Replication. It currently supports a keyrange
// or a list of tables.
type BinlogSource struct {
	unknownFields []byte
	// the source keyspace
	Keyspace string `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	// the source shard
	Shard string `protobuf:"bytes,2,opt,name=shard,proto3" json:"shard,omitempty"`
	// the source tablet type
	TabletType topodata.TabletType `protobuf:"varint,3,opt,name=tablet_type,json=tabletType,proto3" json:"tabletType,omitempty"`
	// key_range is set if the request is for a keyrange
	KeyRange *topodata.KeyRange `protobuf:"bytes,4,opt,name=key_range,json=keyRange,proto3" json:"keyRange,omitempty"`
	// tables is set if the request is for a list of tables
	Tables []string `protobuf:"bytes,5,rep,name=tables,proto3" json:"tables,omitempty"`
	// filter is set if we're using the generalized representation
	// for the filter.
	Filter *Filter `protobuf:"bytes,6,opt,name=filter,proto3" json:"filter,omitempty"`
	// on_ddl specifies the action to be taken when a DDL is encountered.
	OnDdl OnDDLAction `protobuf:"varint,7,opt,name=on_ddl,json=onDdl,proto3" json:"onDdl,omitempty"`
	// Source is an external mysql. This attribute should be set to the username
	// to use in the connection
	ExternalMysql string `protobuf:"bytes,8,opt,name=external_mysql,json=externalMysql,proto3" json:"externalMysql,omitempty"`
}

func (x *BinlogSource) Reset() {
	*x = BinlogSource{}
}

func (*BinlogSource) ProtoMessage() {}

func (x *BinlogSource) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *BinlogSource) GetShard() string {
	if x != nil {
		return x.Shard
	}
	return ""
}

func (x *BinlogSource) GetTabletType() topodata.TabletType {
	if x != nil {
		return x.TabletType
	}
	return topodata.TabletType(0)
}

func (x *BinlogSource) GetKeyRange() *topodata.KeyRange {
	if x != nil {
		return x.KeyRange
	}
	return nil
}

func (x *BinlogSource) GetTables() []string {
	if x != nil {
		return x.Tables
	}
	return nil
}

func (x *BinlogSource) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

func (x *BinlogSource) GetOnDdl() OnDDLAction {
	if x != nil {
		return x.OnDdl
	}
	return OnDDLAction_IGNORE
}

func (x *BinlogSource) GetExternalMysql() string {
	if x != nil {
		return x.ExternalMysql
	}
	return ""
}

// RowChange represents one row change
type RowChange struct {
	unknownFields []byte
	Before        *query.Row `protobuf:"bytes,1,opt,name=before,proto3" json:"before,omitempty"`
	After         *query.Row `protobuf:"bytes,2,opt,name=after,proto3" json:"after,omitempty"`
}

func (x *RowChange) Reset() {
	*x = RowChange{}
}

func (*RowChange) ProtoMessage() {}

func (x *RowChange) GetBefore() *query.Row {
	if x != nil {
		return x.Before
	}
	return nil
}

func (x *RowChange) GetAfter() *query.Row {
	if x != nil {
		return x.After
	}
	return nil
}

// RowEvent represent row events for one table
type RowEvent struct {
	unknownFields []byte
	TableName     string       `protobuf:"bytes,1,opt,name=table_name,json=tableName,proto3" json:"tableName,omitempty"`
	RowChanges    []*RowChange `protobuf:"bytes,2,rep,name=row_changes,json=rowChanges,proto3" json:"rowChanges,omitempty"`
}

func (x *RowEvent) Reset() {
	*x = RowEvent{}
}

func (*RowEvent) ProtoMessage() {}

func (x *RowEvent) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *RowEvent) GetRowChanges() []*RowChange {
	if x != nil {
		return x.RowChanges
	}
	return nil
}

type FieldEvent struct {
	unknownFields []byte
	TableName     string         `protobuf:"bytes,1,opt,name=table_name,json=tableName,proto3" json:"tableName,omitempty"`
	Fields        []*query.Field `protobuf:"bytes,2,rep,name=fields,proto3" json:"fields,omitempty"`
}

func (x *FieldEvent) Reset() {
	*x = FieldEvent{}
}

func (*FieldEvent) ProtoMessage() {}

func (x *FieldEvent) GetTableName() string {
	if x != nil {
		return x.TableName
	}
	return ""
}

func (x *FieldEvent) GetFields() []*query.Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

type ShardGtid struct {
	unknownFields []byte
	Keyspace      string `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Shard         string `protobuf:"bytes,2,opt,name=shard,proto3" json:"shard,omitempty"`
	Gtid          string `protobuf:"bytes,3,opt,name=gtid,proto3" json:"gtid,omitempty"`
}

func (x *ShardGtid) Reset() {
	*x = ShardGtid{}
}

func (*ShardGtid) ProtoMessage() {}

func (x *ShardGtid) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *ShardGtid) GetShard() string {
	if x != nil {
		return x.Shard
	}
	return ""
}

func (x *ShardGtid) GetGtid() string {
	if x != nil {
		return x.Gtid
	}
	return ""
}

type VGtid struct {
	unknownFields []byte
	ShardGtids    []*ShardGtid `protobuf:"bytes,1,rep,name=shard_gtids,json=shardGtids,proto3" json:"shardGtids,omitempty"`
}

func (x *VGtid) Reset() {
	*x = VGtid{}
}

func (*VGtid) ProtoMessage() {}

func (x *VGtid) GetShardGtids() []*ShardGtid {
	if x != nil {
		return x.ShardGtids
	}
	return nil
}

type KeyspaceShard struct {
	unknownFields []byte
	Keyspace      string `protobuf:"bytes,1,opt,name=keyspace,proto3" json:"keyspace,omitempty"`
	Shard         string `protobuf:"bytes,2,opt,name=shard,proto3" json:"shard,omitempty"`
}

func (x *KeyspaceShard) Reset() {
	*x = KeyspaceShard{}
}

func (*KeyspaceShard) ProtoMessage() {}

func (x *KeyspaceShard) GetKeyspace() string {
	if x != nil {
		return x.Keyspace
	}
	return ""
}

func (x *KeyspaceShard) GetShard() string {
	if x != nil {
		return x.Shard
	}
	return ""
}

type Journal struct {
	unknownFields   []byte
	Id              int64            `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	MigrationType   MigrationType    `protobuf:"varint,2,opt,name=migration_type,json=migrationType,proto3" json:"migrationType,omitempty"`
	Tables          []string         `protobuf:"bytes,3,rep,name=tables,proto3" json:"tables,omitempty"`
	LocalPosition   string           `protobuf:"bytes,4,opt,name=local_position,json=localPosition,proto3" json:"localPosition,omitempty"`
	ShardGtids      []*ShardGtid     `protobuf:"bytes,5,rep,name=shard_gtids,json=shardGtids,proto3" json:"shardGtids,omitempty"`
	Participants    []*KeyspaceShard `protobuf:"bytes,6,rep,name=participants,proto3" json:"participants,omitempty"`
	SourceWorkflows []string         `protobuf:"bytes,7,rep,name=source_workflows,json=sourceWorkflows,proto3" json:"sourceWorkflows,omitempty"`
}

func (x *Journal) Reset() {
	*x = Journal{}
}

func (*Journal) ProtoMessage() {}

func (x *Journal) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Journal) GetMigrationType() MigrationType {
	if x != nil {
		return x.MigrationType
	}
	return MigrationType_TABLES
}

func (x *Journal) GetTables() []string {
	if x != nil {
		return x.Tables
	}
	return nil
}

func (x *Journal) GetLocalPosition() string {
	if x != nil {
		return x.LocalPosition
	}
	return ""
}

func (x *Journal) GetShardGtids() []*ShardGtid {
	if x != nil {
		return x.ShardGtids
	}
	return nil
}

func (x *Journal) GetParticipants() []*KeyspaceShard {
	if x != nil {
		return x.Participants
	}
	return nil
}

func (x *Journal) GetSourceWorkflows() []string {
	if x != nil {
		return x.SourceWorkflows
	}
	return nil
}

// VEvent represents a vstream event
type VEvent struct {
	unknownFields []byte
	Type          VEventType  `protobuf:"varint,1,opt,name=type,proto3" json:"type,omitempty"`
	Timestamp     int64       `protobuf:"varint,2,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Gtid          string      `protobuf:"bytes,3,opt,name=gtid,proto3" json:"gtid,omitempty"`
	Ddl           string      `protobuf:"bytes,4,opt,name=ddl,proto3" json:"ddl,omitempty"`
	RowEvent      *RowEvent   `protobuf:"bytes,5,opt,name=row_event,json=rowEvent,proto3" json:"rowEvent,omitempty"`
	FieldEvent    *FieldEvent `protobuf:"bytes,6,opt,name=field_event,json=fieldEvent,proto3" json:"fieldEvent,omitempty"`
	Vgtid         *VGtid      `protobuf:"bytes,7,opt,name=vgtid,proto3" json:"vgtid,omitempty"`
	Journal       *Journal    `protobuf:"bytes,8,opt,name=journal,proto3" json:"journal,omitempty"`
	Dml           string      `protobuf:"bytes,9,opt,name=dml,proto3" json:"dml,omitempty"`
	// current_time specifies the current time to handle clock skew.
	CurrentTime int64 `protobuf:"varint,20,opt,name=current_time,json=currentTime,proto3" json:"currentTime,omitempty"`
}

func (x *VEvent) Reset() {
	*x = VEvent{}
}

func (*VEvent) ProtoMessage() {}

func (x *VEvent) GetType() VEventType {
	if x != nil {
		return x.Type
	}
	return VEventType_UNKNOWN
}

func (x *VEvent) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *VEvent) GetGtid() string {
	if x != nil {
		return x.Gtid
	}
	return ""
}

func (x *VEvent) GetDdl() string {
	if x != nil {
		return x.Ddl
	}
	return ""
}

func (x *VEvent) GetRowEvent() *RowEvent {
	if x != nil {
		return x.RowEvent
	}
	return nil
}

func (x *VEvent) GetFieldEvent() *FieldEvent {
	if x != nil {
		return x.FieldEvent
	}
	return nil
}

func (x *VEvent) GetVgtid() *VGtid {
	if x != nil {
		return x.Vgtid
	}
	return nil
}

func (x *VEvent) GetJournal() *Journal {
	if x != nil {
		return x.Journal
	}
	return nil
}

func (x *VEvent) GetDml() string {
	if x != nil {
		return x.Dml
	}
	return ""
}

func (x *VEvent) GetCurrentTime() int64 {
	if x != nil {
		return x.CurrentTime
	}
	return 0
}

// VStreamRequest is the payload for VStream
type VStreamRequest struct {
	unknownFields     []byte
	EffectiveCallerId *vtrpc.CallerID       `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId,proto3" json:"effectiveCallerId,omitempty"`
	ImmediateCallerId *query.VTGateCallerID `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId,proto3" json:"immediateCallerId,omitempty"`
	Target            *query.Target         `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	Position          string                `protobuf:"bytes,4,opt,name=position,proto3" json:"position,omitempty"`
	Filter            *Filter               `protobuf:"bytes,5,opt,name=filter,proto3" json:"filter,omitempty"`
}

func (x *VStreamRequest) Reset() {
	*x = VStreamRequest{}
}

func (*VStreamRequest) ProtoMessage() {}

func (x *VStreamRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if x != nil {
		return x.EffectiveCallerId
	}
	return nil
}

func (x *VStreamRequest) GetImmediateCallerId() *query.VTGateCallerID {
	if x != nil {
		return x.ImmediateCallerId
	}
	return nil
}

func (x *VStreamRequest) GetTarget() *query.Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *VStreamRequest) GetPosition() string {
	if x != nil {
		return x.Position
	}
	return ""
}

func (x *VStreamRequest) GetFilter() *Filter {
	if x != nil {
		return x.Filter
	}
	return nil
}

// VStreamResponse is the response from VStream
type VStreamResponse struct {
	unknownFields []byte
	Events        []*VEvent `protobuf:"bytes,1,rep,name=events,proto3" json:"events,omitempty"`
}

func (x *VStreamResponse) Reset() {
	*x = VStreamResponse{}
}

func (*VStreamResponse) ProtoMessage() {}

func (x *VStreamResponse) GetEvents() []*VEvent {
	if x != nil {
		return x.Events
	}
	return nil
}

// VStreamRowsRequest is the payload for VStreamRows
type VStreamRowsRequest struct {
	unknownFields     []byte
	EffectiveCallerId *vtrpc.CallerID       `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId,proto3" json:"effectiveCallerId,omitempty"`
	ImmediateCallerId *query.VTGateCallerID `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId,proto3" json:"immediateCallerId,omitempty"`
	Target            *query.Target         `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	Query             string                `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
	Lastpk            *query.QueryResult    `protobuf:"bytes,5,opt,name=lastpk,proto3" json:"lastpk,omitempty"`
}

func (x *VStreamRowsRequest) Reset() {
	*x = VStreamRowsRequest{}
}

func (*VStreamRowsRequest) ProtoMessage() {}

func (x *VStreamRowsRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if x != nil {
		return x.EffectiveCallerId
	}
	return nil
}

func (x *VStreamRowsRequest) GetImmediateCallerId() *query.VTGateCallerID {
	if x != nil {
		return x.ImmediateCallerId
	}
	return nil
}

func (x *VStreamRowsRequest) GetTarget() *query.Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *VStreamRowsRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

func (x *VStreamRowsRequest) GetLastpk() *query.QueryResult {
	if x != nil {
		return x.Lastpk
	}
	return nil
}

// VStreamRowsResponse is the response from VStreamRows
type VStreamRowsResponse struct {
	unknownFields []byte
	Fields        []*query.Field `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	Pkfields      []*query.Field `protobuf:"bytes,2,rep,name=pkfields,proto3" json:"pkfields,omitempty"`
	Gtid          string         `protobuf:"bytes,3,opt,name=gtid,proto3" json:"gtid,omitempty"`
	Rows          []*query.Row   `protobuf:"bytes,4,rep,name=rows,proto3" json:"rows,omitempty"`
	Lastpk        *query.Row     `protobuf:"bytes,5,opt,name=lastpk,proto3" json:"lastpk,omitempty"`
}

func (x *VStreamRowsResponse) Reset() {
	*x = VStreamRowsResponse{}
}

func (*VStreamRowsResponse) ProtoMessage() {}

func (x *VStreamRowsResponse) GetFields() []*query.Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *VStreamRowsResponse) GetPkfields() []*query.Field {
	if x != nil {
		return x.Pkfields
	}
	return nil
}

func (x *VStreamRowsResponse) GetGtid() string {
	if x != nil {
		return x.Gtid
	}
	return ""
}

func (x *VStreamRowsResponse) GetRows() []*query.Row {
	if x != nil {
		return x.Rows
	}
	return nil
}

func (x *VStreamRowsResponse) GetLastpk() *query.Row {
	if x != nil {
		return x.Lastpk
	}
	return nil
}

// VStreamResultsRequest is the payload for VStreamResults
// The ids match VStreamRows, in case we decide to merge the two.
type VStreamResultsRequest struct {
	unknownFields     []byte
	EffectiveCallerId *vtrpc.CallerID       `protobuf:"bytes,1,opt,name=effective_caller_id,json=effectiveCallerId,proto3" json:"effectiveCallerId,omitempty"`
	ImmediateCallerId *query.VTGateCallerID `protobuf:"bytes,2,opt,name=immediate_caller_id,json=immediateCallerId,proto3" json:"immediateCallerId,omitempty"`
	Target            *query.Target         `protobuf:"bytes,3,opt,name=target,proto3" json:"target,omitempty"`
	Query             string                `protobuf:"bytes,4,opt,name=query,proto3" json:"query,omitempty"`
}

func (x *VStreamResultsRequest) Reset() {
	*x = VStreamResultsRequest{}
}

func (*VStreamResultsRequest) ProtoMessage() {}

func (x *VStreamResultsRequest) GetEffectiveCallerId() *vtrpc.CallerID {
	if x != nil {
		return x.EffectiveCallerId
	}
	return nil
}

func (x *VStreamResultsRequest) GetImmediateCallerId() *query.VTGateCallerID {
	if x != nil {
		return x.ImmediateCallerId
	}
	return nil
}

func (x *VStreamResultsRequest) GetTarget() *query.Target {
	if x != nil {
		return x.Target
	}
	return nil
}

func (x *VStreamResultsRequest) GetQuery() string {
	if x != nil {
		return x.Query
	}
	return ""
}

// VStreamResultsResponse is the response from VStreamResults
// The ids match VStreamRows, in case we decide to merge the two.
type VStreamResultsResponse struct {
	unknownFields []byte
	Fields        []*query.Field `protobuf:"bytes,1,rep,name=fields,proto3" json:"fields,omitempty"`
	Gtid          string         `protobuf:"bytes,3,opt,name=gtid,proto3" json:"gtid,omitempty"`
	Rows          []*query.Row   `protobuf:"bytes,4,rep,name=rows,proto3" json:"rows,omitempty"`
}

func (x *VStreamResultsResponse) Reset() {
	*x = VStreamResultsResponse{}
}

func (*VStreamResultsResponse) ProtoMessage() {}

func (x *VStreamResultsResponse) GetFields() []*query.Field {
	if x != nil {
		return x.Fields
	}
	return nil
}

func (x *VStreamResultsResponse) GetGtid() string {
	if x != nil {
		return x.Gtid
	}
	return ""
}

func (x *VStreamResultsResponse) GetRows() []*query.Row {
	if x != nil {
		return x.Rows
	}
	return nil
}

type BinlogTransaction_Statement struct {
	unknownFields []byte
	// what type of statement is this?
	Category BinlogTransaction_Statement_Category `protobuf:"varint,1,opt,name=category,proto3" json:"category,omitempty"`
	// charset of this statement, if different from pre-negotiated default.
	Charset *Charset `protobuf:"bytes,2,opt,name=charset,proto3" json:"charset,omitempty"`
	// the sql
	Sql []byte `protobuf:"bytes,3,opt,name=sql,proto3" json:"sql,omitempty"`
}

func (x *BinlogTransaction_Statement) Reset() {
	*x = BinlogTransaction_Statement{}
}

func (*BinlogTransaction_Statement) ProtoMessage() {}

func (x *BinlogTransaction_Statement) GetCategory() BinlogTransaction_Statement_Category {
	if x != nil {
		return x.Category
	}
	return BinlogTransaction_Statement_BL_UNRECOGNIZED
}

func (x *BinlogTransaction_Statement) GetCharset() *Charset {
	if x != nil {
		return x.Charset
	}
	return nil
}

func (x *BinlogTransaction_Statement) GetSql() []byte {
	if x != nil {
		return x.Sql
	}
	return nil
}

func (m *Charset) CloneVT() *Charset {
	if m == nil {
		return (*Charset)(nil)
	}
	r := new(Charset)
	r.Client = m.Client
	r.Conn = m.Conn
	r.Server = m.Server
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Charset) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *BinlogTransaction_Statement) CloneVT() *BinlogTransaction_Statement {
	if m == nil {
		return (*BinlogTransaction_Statement)(nil)
	}
	r := new(BinlogTransaction_Statement)
	r.Category = m.Category
	r.Charset = m.Charset.CloneVT()
	if rhs := m.Sql; rhs != nil {
		tmpBytes := make([]byte, len(rhs))
		copy(tmpBytes, rhs)
		r.Sql = tmpBytes
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *BinlogTransaction_Statement) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *BinlogTransaction) CloneVT() *BinlogTransaction {
	if m == nil {
		return (*BinlogTransaction)(nil)
	}
	r := new(BinlogTransaction)
	if rhs := m.Statements; rhs != nil {
		tmpContainer := make([]*BinlogTransaction_Statement, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Statements = tmpContainer
	}
	if rhs := m.EventToken; rhs != nil {
		r.EventToken = rhs.CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *BinlogTransaction) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *StreamKeyRangeRequest) CloneVT() *StreamKeyRangeRequest {
	if m == nil {
		return (*StreamKeyRangeRequest)(nil)
	}
	r := new(StreamKeyRangeRequest)
	r.Position = m.Position
	r.Charset = m.Charset.CloneVT()
	if rhs := m.KeyRange; rhs != nil {
		r.KeyRange = rhs.CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *StreamKeyRangeRequest) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *StreamKeyRangeResponse) CloneVT() *StreamKeyRangeResponse {
	if m == nil {
		return (*StreamKeyRangeResponse)(nil)
	}
	r := new(StreamKeyRangeResponse)
	r.BinlogTransaction = m.BinlogTransaction.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *StreamKeyRangeResponse) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *StreamTablesRequest) CloneVT() *StreamTablesRequest {
	if m == nil {
		return (*StreamTablesRequest)(nil)
	}
	r := new(StreamTablesRequest)
	r.Position = m.Position
	r.Charset = m.Charset.CloneVT()
	if rhs := m.Tables; rhs != nil {
		tmpContainer := make([]string, len(rhs))
		copy(tmpContainer, rhs)
		r.Tables = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *StreamTablesRequest) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *StreamTablesResponse) CloneVT() *StreamTablesResponse {
	if m == nil {
		return (*StreamTablesResponse)(nil)
	}
	r := new(StreamTablesResponse)
	r.BinlogTransaction = m.BinlogTransaction.CloneVT()
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *StreamTablesResponse) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *Rule) CloneVT() *Rule {
	if m == nil {
		return (*Rule)(nil)
	}
	r := new(Rule)
	r.Match = m.Match
	r.Filter = m.Filter
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Rule) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *Filter) CloneVT() *Filter {
	if m == nil {
		return (*Filter)(nil)
	}
	r := new(Filter)
	r.FieldEventMode = m.FieldEventMode
	if rhs := m.Rules; rhs != nil {
		tmpContainer := make([]*Rule, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Rules = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Filter) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *BinlogSource) CloneVT() *BinlogSource {
	if m == nil {
		return (*BinlogSource)(nil)
	}
	r := new(BinlogSource)
	r.Keyspace = m.Keyspace
	r.Shard = m.Shard
	r.TabletType = m.TabletType
	r.Filter = m.Filter.CloneVT()
	r.OnDdl = m.OnDdl
	r.ExternalMysql = m.ExternalMysql
	if rhs := m.KeyRange; rhs != nil {
		r.KeyRange = rhs.CloneVT()
	}
	if rhs := m.Tables; rhs != nil {
		tmpContainer := make([]string, len(rhs))
		copy(tmpContainer, rhs)
		r.Tables = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *BinlogSource) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *RowChange) CloneVT() *RowChange {
	if m == nil {
		return (*RowChange)(nil)
	}
	r := new(RowChange)
	if rhs := m.Before; rhs != nil {
		r.Before = rhs.CloneVT()
	}
	if rhs := m.After; rhs != nil {
		r.After = rhs.CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RowChange) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *RowEvent) CloneVT() *RowEvent {
	if m == nil {
		return (*RowEvent)(nil)
	}
	r := new(RowEvent)
	r.TableName = m.TableName
	if rhs := m.RowChanges; rhs != nil {
		tmpContainer := make([]*RowChange, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.RowChanges = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *RowEvent) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *FieldEvent) CloneVT() *FieldEvent {
	if m == nil {
		return (*FieldEvent)(nil)
	}
	r := new(FieldEvent)
	r.TableName = m.TableName
	if rhs := m.Fields; rhs != nil {
		tmpContainer := make([]*query.Field, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Fields = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *FieldEvent) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *ShardGtid) CloneVT() *ShardGtid {
	if m == nil {
		return (*ShardGtid)(nil)
	}
	r := new(ShardGtid)
	r.Keyspace = m.Keyspace
	r.Shard = m.Shard
	r.Gtid = m.Gtid
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *ShardGtid) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *VGtid) CloneVT() *VGtid {
	if m == nil {
		return (*VGtid)(nil)
	}
	r := new(VGtid)
	if rhs := m.ShardGtids; rhs != nil {
		tmpContainer := make([]*ShardGtid, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.ShardGtids = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *VGtid) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *KeyspaceShard) CloneVT() *KeyspaceShard {
	if m == nil {
		return (*KeyspaceShard)(nil)
	}
	r := new(KeyspaceShard)
	r.Keyspace = m.Keyspace
	r.Shard = m.Shard
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *KeyspaceShard) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *Journal) CloneVT() *Journal {
	if m == nil {
		return (*Journal)(nil)
	}
	r := new(Journal)
	r.Id = m.Id
	r.MigrationType = m.MigrationType
	r.LocalPosition = m.LocalPosition
	if rhs := m.Tables; rhs != nil {
		tmpContainer := make([]string, len(rhs))
		copy(tmpContainer, rhs)
		r.Tables = tmpContainer
	}
	if rhs := m.ShardGtids; rhs != nil {
		tmpContainer := make([]*ShardGtid, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.ShardGtids = tmpContainer
	}
	if rhs := m.Participants; rhs != nil {
		tmpContainer := make([]*KeyspaceShard, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Participants = tmpContainer
	}
	if rhs := m.SourceWorkflows; rhs != nil {
		tmpContainer := make([]string, len(rhs))
		copy(tmpContainer, rhs)
		r.SourceWorkflows = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Journal) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *VEvent) CloneVT() *VEvent {
	if m == nil {
		return (*VEvent)(nil)
	}
	r := new(VEvent)
	r.Type = m.Type
	r.Timestamp = m.Timestamp
	r.Gtid = m.Gtid
	r.Ddl = m.Ddl
	r.RowEvent = m.RowEvent.CloneVT()
	r.FieldEvent = m.FieldEvent.CloneVT()
	r.Vgtid = m.Vgtid.CloneVT()
	r.Journal = m.Journal.CloneVT()
	r.Dml = m.Dml
	r.CurrentTime = m.CurrentTime
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *VEvent) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *VStreamRequest) CloneVT() *VStreamRequest {
	if m == nil {
		return (*VStreamRequest)(nil)
	}
	r := new(VStreamRequest)
	r.Position = m.Position
	r.Filter = m.Filter.CloneVT()
	if rhs := m.EffectiveCallerId; rhs != nil {
		r.EffectiveCallerId = rhs.CloneVT()
	}
	if rhs := m.ImmediateCallerId; rhs != nil {
		r.ImmediateCallerId = rhs.CloneVT()
	}
	if rhs := m.Target; rhs != nil {
		r.Target = rhs.CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *VStreamRequest) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *VStreamResponse) CloneVT() *VStreamResponse {
	if m == nil {
		return (*VStreamResponse)(nil)
	}
	r := new(VStreamResponse)
	if rhs := m.Events; rhs != nil {
		tmpContainer := make([]*VEvent, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Events = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *VStreamResponse) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *VStreamRowsRequest) CloneVT() *VStreamRowsRequest {
	if m == nil {
		return (*VStreamRowsRequest)(nil)
	}
	r := new(VStreamRowsRequest)
	r.Query = m.Query
	if rhs := m.EffectiveCallerId; rhs != nil {
		r.EffectiveCallerId = rhs.CloneVT()
	}
	if rhs := m.ImmediateCallerId; rhs != nil {
		r.ImmediateCallerId = rhs.CloneVT()
	}
	if rhs := m.Target; rhs != nil {
		r.Target = rhs.CloneVT()
	}
	if rhs := m.Lastpk; rhs != nil {
		r.Lastpk = rhs.CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *VStreamRowsRequest) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *VStreamRowsResponse) CloneVT() *VStreamRowsResponse {
	if m == nil {
		return (*VStreamRowsResponse)(nil)
	}
	r := new(VStreamRowsResponse)
	r.Gtid = m.Gtid
	if rhs := m.Fields; rhs != nil {
		tmpContainer := make([]*query.Field, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Fields = tmpContainer
	}
	if rhs := m.Pkfields; rhs != nil {
		tmpContainer := make([]*query.Field, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Pkfields = tmpContainer
	}
	if rhs := m.Rows; rhs != nil {
		tmpContainer := make([]*query.Row, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Rows = tmpContainer
	}
	if rhs := m.Lastpk; rhs != nil {
		r.Lastpk = rhs.CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *VStreamRowsResponse) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *VStreamResultsRequest) CloneVT() *VStreamResultsRequest {
	if m == nil {
		return (*VStreamResultsRequest)(nil)
	}
	r := new(VStreamResultsRequest)
	r.Query = m.Query
	if rhs := m.EffectiveCallerId; rhs != nil {
		r.EffectiveCallerId = rhs.CloneVT()
	}
	if rhs := m.ImmediateCallerId; rhs != nil {
		r.ImmediateCallerId = rhs.CloneVT()
	}
	if rhs := m.Target; rhs != nil {
		r.Target = rhs.CloneVT()
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *VStreamResultsRequest) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (m *VStreamResultsResponse) CloneVT() *VStreamResultsResponse {
	if m == nil {
		return (*VStreamResultsResponse)(nil)
	}
	r := new(VStreamResultsResponse)
	r.Gtid = m.Gtid
	if rhs := m.Fields; rhs != nil {
		tmpContainer := make([]*query.Field, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Fields = tmpContainer
	}
	if rhs := m.Rows; rhs != nil {
		tmpContainer := make([]*query.Row, len(rhs))
		for k, v := range rhs {
			tmpContainer[k] = v.CloneVT()
		}
		r.Rows = tmpContainer
	}
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *VStreamResultsResponse) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (this *Charset) EqualVT(that *Charset) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Client != that.Client {
		return false
	}
	if this.Conn != that.Conn {
		return false
	}
	if this.Server != that.Server {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Charset) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*Charset)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *BinlogTransaction_Statement) EqualVT(that *BinlogTransaction_Statement) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Category != that.Category {
		return false
	}
	if !this.Charset.EqualVT(that.Charset) {
		return false
	}
	if string(this.Sql) != string(that.Sql) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *BinlogTransaction_Statement) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*BinlogTransaction_Statement)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *BinlogTransaction) EqualVT(that *BinlogTransaction) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Statements) != len(that.Statements) {
		return false
	}
	for i, vx := range this.Statements {
		vy := that.Statements[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &BinlogTransaction_Statement{}
			}
			if q == nil {
				q = &BinlogTransaction_Statement{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if !this.EventToken.EqualVT(that.EventToken) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *BinlogTransaction) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*BinlogTransaction)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *StreamKeyRangeRequest) EqualVT(that *StreamKeyRangeRequest) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Position != that.Position {
		return false
	}
	if !this.KeyRange.EqualVT(that.KeyRange) {
		return false
	}
	if !this.Charset.EqualVT(that.Charset) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *StreamKeyRangeRequest) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*StreamKeyRangeRequest)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *StreamKeyRangeResponse) EqualVT(that *StreamKeyRangeResponse) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.BinlogTransaction.EqualVT(that.BinlogTransaction) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *StreamKeyRangeResponse) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*StreamKeyRangeResponse)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *StreamTablesRequest) EqualVT(that *StreamTablesRequest) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Position != that.Position {
		return false
	}
	if len(this.Tables) != len(that.Tables) {
		return false
	}
	for i, vx := range this.Tables {
		vy := that.Tables[i]
		if vx != vy {
			return false
		}
	}
	if !this.Charset.EqualVT(that.Charset) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *StreamTablesRequest) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*StreamTablesRequest)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *StreamTablesResponse) EqualVT(that *StreamTablesResponse) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.BinlogTransaction.EqualVT(that.BinlogTransaction) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *StreamTablesResponse) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*StreamTablesResponse)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Rule) EqualVT(that *Rule) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Match != that.Match {
		return false
	}
	if this.Filter != that.Filter {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Rule) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*Rule)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Filter) EqualVT(that *Filter) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Rules) != len(that.Rules) {
		return false
	}
	for i, vx := range this.Rules {
		vy := that.Rules[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &Rule{}
			}
			if q == nil {
				q = &Rule{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if this.FieldEventMode != that.FieldEventMode {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Filter) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*Filter)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *BinlogSource) EqualVT(that *BinlogSource) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Keyspace != that.Keyspace {
		return false
	}
	if this.Shard != that.Shard {
		return false
	}
	if this.TabletType != that.TabletType {
		return false
	}
	if !this.KeyRange.EqualVT(that.KeyRange) {
		return false
	}
	if len(this.Tables) != len(that.Tables) {
		return false
	}
	for i, vx := range this.Tables {
		vy := that.Tables[i]
		if vx != vy {
			return false
		}
	}
	if !this.Filter.EqualVT(that.Filter) {
		return false
	}
	if this.OnDdl != that.OnDdl {
		return false
	}
	if this.ExternalMysql != that.ExternalMysql {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *BinlogSource) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*BinlogSource)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RowChange) EqualVT(that *RowChange) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.Before.EqualVT(that.Before) {
		return false
	}
	if !this.After.EqualVT(that.After) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RowChange) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*RowChange)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *RowEvent) EqualVT(that *RowEvent) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.TableName != that.TableName {
		return false
	}
	if len(this.RowChanges) != len(that.RowChanges) {
		return false
	}
	for i, vx := range this.RowChanges {
		vy := that.RowChanges[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &RowChange{}
			}
			if q == nil {
				q = &RowChange{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *RowEvent) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*RowEvent)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *FieldEvent) EqualVT(that *FieldEvent) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.TableName != that.TableName {
		return false
	}
	if len(this.Fields) != len(that.Fields) {
		return false
	}
	for i, vx := range this.Fields {
		vy := that.Fields[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &query.Field{}
			}
			if q == nil {
				q = &query.Field{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *FieldEvent) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*FieldEvent)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *ShardGtid) EqualVT(that *ShardGtid) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Keyspace != that.Keyspace {
		return false
	}
	if this.Shard != that.Shard {
		return false
	}
	if this.Gtid != that.Gtid {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *ShardGtid) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*ShardGtid)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *VGtid) EqualVT(that *VGtid) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.ShardGtids) != len(that.ShardGtids) {
		return false
	}
	for i, vx := range this.ShardGtids {
		vy := that.ShardGtids[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &ShardGtid{}
			}
			if q == nil {
				q = &ShardGtid{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *VGtid) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*VGtid)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *KeyspaceShard) EqualVT(that *KeyspaceShard) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Keyspace != that.Keyspace {
		return false
	}
	if this.Shard != that.Shard {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *KeyspaceShard) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*KeyspaceShard)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *Journal) EqualVT(that *Journal) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Id != that.Id {
		return false
	}
	if this.MigrationType != that.MigrationType {
		return false
	}
	if len(this.Tables) != len(that.Tables) {
		return false
	}
	for i, vx := range this.Tables {
		vy := that.Tables[i]
		if vx != vy {
			return false
		}
	}
	if this.LocalPosition != that.LocalPosition {
		return false
	}
	if len(this.ShardGtids) != len(that.ShardGtids) {
		return false
	}
	for i, vx := range this.ShardGtids {
		vy := that.ShardGtids[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &ShardGtid{}
			}
			if q == nil {
				q = &ShardGtid{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if len(this.Participants) != len(that.Participants) {
		return false
	}
	for i, vx := range this.Participants {
		vy := that.Participants[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &KeyspaceShard{}
			}
			if q == nil {
				q = &KeyspaceShard{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if len(this.SourceWorkflows) != len(that.SourceWorkflows) {
		return false
	}
	for i, vx := range this.SourceWorkflows {
		vy := that.SourceWorkflows[i]
		if vx != vy {
			return false
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Journal) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*Journal)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *VEvent) EqualVT(that *VEvent) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Type != that.Type {
		return false
	}
	if this.Timestamp != that.Timestamp {
		return false
	}
	if this.Gtid != that.Gtid {
		return false
	}
	if this.Ddl != that.Ddl {
		return false
	}
	if !this.RowEvent.EqualVT(that.RowEvent) {
		return false
	}
	if !this.FieldEvent.EqualVT(that.FieldEvent) {
		return false
	}
	if !this.Vgtid.EqualVT(that.Vgtid) {
		return false
	}
	if !this.Journal.EqualVT(that.Journal) {
		return false
	}
	if this.Dml != that.Dml {
		return false
	}
	if this.CurrentTime != that.CurrentTime {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *VEvent) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*VEvent)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *VStreamRequest) EqualVT(that *VStreamRequest) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.EffectiveCallerId.EqualVT(that.EffectiveCallerId) {
		return false
	}
	if !this.ImmediateCallerId.EqualVT(that.ImmediateCallerId) {
		return false
	}
	if !this.Target.EqualVT(that.Target) {
		return false
	}
	if this.Position != that.Position {
		return false
	}
	if !this.Filter.EqualVT(that.Filter) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *VStreamRequest) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*VStreamRequest)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *VStreamResponse) EqualVT(that *VStreamResponse) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Events) != len(that.Events) {
		return false
	}
	for i, vx := range this.Events {
		vy := that.Events[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &VEvent{}
			}
			if q == nil {
				q = &VEvent{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *VStreamResponse) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*VStreamResponse)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *VStreamRowsRequest) EqualVT(that *VStreamRowsRequest) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.EffectiveCallerId.EqualVT(that.EffectiveCallerId) {
		return false
	}
	if !this.ImmediateCallerId.EqualVT(that.ImmediateCallerId) {
		return false
	}
	if !this.Target.EqualVT(that.Target) {
		return false
	}
	if this.Query != that.Query {
		return false
	}
	if !this.Lastpk.EqualVT(that.Lastpk) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *VStreamRowsRequest) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*VStreamRowsRequest)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *VStreamRowsResponse) EqualVT(that *VStreamRowsResponse) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Fields) != len(that.Fields) {
		return false
	}
	for i, vx := range this.Fields {
		vy := that.Fields[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &query.Field{}
			}
			if q == nil {
				q = &query.Field{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if len(this.Pkfields) != len(that.Pkfields) {
		return false
	}
	for i, vx := range this.Pkfields {
		vy := that.Pkfields[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &query.Field{}
			}
			if q == nil {
				q = &query.Field{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if this.Gtid != that.Gtid {
		return false
	}
	if len(this.Rows) != len(that.Rows) {
		return false
	}
	for i, vx := range this.Rows {
		vy := that.Rows[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &query.Row{}
			}
			if q == nil {
				q = &query.Row{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if !this.Lastpk.EqualVT(that.Lastpk) {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *VStreamRowsResponse) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*VStreamRowsResponse)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *VStreamResultsRequest) EqualVT(that *VStreamResultsRequest) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if !this.EffectiveCallerId.EqualVT(that.EffectiveCallerId) {
		return false
	}
	if !this.ImmediateCallerId.EqualVT(that.ImmediateCallerId) {
		return false
	}
	if !this.Target.EqualVT(that.Target) {
		return false
	}
	if this.Query != that.Query {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *VStreamResultsRequest) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*VStreamResultsRequest)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}
func (this *VStreamResultsResponse) EqualVT(that *VStreamResultsResponse) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if len(this.Fields) != len(that.Fields) {
		return false
	}
	for i, vx := range this.Fields {
		vy := that.Fields[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &query.Field{}
			}
			if q == nil {
				q = &query.Field{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	if this.Gtid != that.Gtid {
		return false
	}
	if len(this.Rows) != len(that.Rows) {
		return false
	}
	for i, vx := range this.Rows {
		vy := that.Rows[i]
		if p, q := vx, vy; p != q {
			if p == nil {
				p = &query.Row{}
			}
			if q == nil {
				q = &query.Row{}
			}
			if !p.EqualVT(q) {
				return false
			}
		}
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *VStreamResultsResponse) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*VStreamResultsResponse)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}

// MarshalProtoJSON marshals the OnDDLAction to JSON.
func (x OnDDLAction) MarshalProtoJSON(s *json.MarshalState) {
	s.WriteEnumString(int32(x), OnDDLAction_name)
}

// MarshalText marshals the OnDDLAction to text.
func (x OnDDLAction) MarshalText() ([]byte, error) {
	return []byte(json.GetEnumString(int32(x), OnDDLAction_name)), nil
}

// MarshalJSON marshals the OnDDLAction to JSON.
func (x OnDDLAction) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the OnDDLAction from JSON.
func (x *OnDDLAction) UnmarshalProtoJSON(s *json.UnmarshalState) {
	v := s.ReadEnum(OnDDLAction_value)
	if err := s.Err(); err != nil {
		s.SetErrorf("could not read OnDDLAction enum: %v", err)
		return
	}
	*x = OnDDLAction(v)
}

// UnmarshalText unmarshals the OnDDLAction from text.
func (x *OnDDLAction) UnmarshalText(b []byte) error {
	i, err := json.ParseEnumString(string(b), OnDDLAction_value)
	if err != nil {
		return err
	}
	*x = OnDDLAction(i)
	return nil
}

// UnmarshalJSON unmarshals the OnDDLAction from JSON.
func (x *OnDDLAction) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the VEventType to JSON.
func (x VEventType) MarshalProtoJSON(s *json.MarshalState) {
	s.WriteEnumString(int32(x), VEventType_name)
}

// MarshalText marshals the VEventType to text.
func (x VEventType) MarshalText() ([]byte, error) {
	return []byte(json.GetEnumString(int32(x), VEventType_name)), nil
}

// MarshalJSON marshals the VEventType to JSON.
func (x VEventType) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the VEventType from JSON.
func (x *VEventType) UnmarshalProtoJSON(s *json.UnmarshalState) {
	v := s.ReadEnum(VEventType_value)
	if err := s.Err(); err != nil {
		s.SetErrorf("could not read VEventType enum: %v", err)
		return
	}
	*x = VEventType(v)
}

// UnmarshalText unmarshals the VEventType from text.
func (x *VEventType) UnmarshalText(b []byte) error {
	i, err := json.ParseEnumString(string(b), VEventType_value)
	if err != nil {
		return err
	}
	*x = VEventType(i)
	return nil
}

// UnmarshalJSON unmarshals the VEventType from JSON.
func (x *VEventType) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the MigrationType to JSON.
func (x MigrationType) MarshalProtoJSON(s *json.MarshalState) {
	s.WriteEnumString(int32(x), MigrationType_name)
}

// MarshalText marshals the MigrationType to text.
func (x MigrationType) MarshalText() ([]byte, error) {
	return []byte(json.GetEnumString(int32(x), MigrationType_name)), nil
}

// MarshalJSON marshals the MigrationType to JSON.
func (x MigrationType) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the MigrationType from JSON.
func (x *MigrationType) UnmarshalProtoJSON(s *json.UnmarshalState) {
	v := s.ReadEnum(MigrationType_value)
	if err := s.Err(); err != nil {
		s.SetErrorf("could not read MigrationType enum: %v", err)
		return
	}
	*x = MigrationType(v)
}

// UnmarshalText unmarshals the MigrationType from text.
func (x *MigrationType) UnmarshalText(b []byte) error {
	i, err := json.ParseEnumString(string(b), MigrationType_value)
	if err != nil {
		return err
	}
	*x = MigrationType(i)
	return nil
}

// UnmarshalJSON unmarshals the MigrationType from JSON.
func (x *MigrationType) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the Charset message to JSON.
func (x *Charset) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Client != 0 || s.HasField("client") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("client")
		s.WriteInt32(x.Client)
	}
	if x.Conn != 0 || s.HasField("conn") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("conn")
		s.WriteInt32(x.Conn)
	}
	if x.Server != 0 || s.HasField("server") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("server")
		s.WriteInt32(x.Server)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the Charset to JSON.
func (x *Charset) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the Charset message from JSON.
func (x *Charset) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "client":
			s.AddField("client")
			x.Client = s.ReadInt32()
		case "conn":
			s.AddField("conn")
			x.Conn = s.ReadInt32()
		case "server":
			s.AddField("server")
			x.Server = s.ReadInt32()
		}
	})
}

// UnmarshalJSON unmarshals the Charset from JSON.
func (x *Charset) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the BinlogTransaction_Statement_Category to JSON.
func (x BinlogTransaction_Statement_Category) MarshalProtoJSON(s *json.MarshalState) {
	s.WriteEnumString(int32(x), BinlogTransaction_Statement_Category_name)
}

// MarshalText marshals the BinlogTransaction_Statement_Category to text.
func (x BinlogTransaction_Statement_Category) MarshalText() ([]byte, error) {
	return []byte(json.GetEnumString(int32(x), BinlogTransaction_Statement_Category_name)), nil
}

// MarshalJSON marshals the BinlogTransaction_Statement_Category to JSON.
func (x BinlogTransaction_Statement_Category) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the BinlogTransaction_Statement_Category from JSON.
func (x *BinlogTransaction_Statement_Category) UnmarshalProtoJSON(s *json.UnmarshalState) {
	v := s.ReadEnum(BinlogTransaction_Statement_Category_value)
	if err := s.Err(); err != nil {
		s.SetErrorf("could not read Category enum: %v", err)
		return
	}
	*x = BinlogTransaction_Statement_Category(v)
}

// UnmarshalText unmarshals the BinlogTransaction_Statement_Category from text.
func (x *BinlogTransaction_Statement_Category) UnmarshalText(b []byte) error {
	i, err := json.ParseEnumString(string(b), BinlogTransaction_Statement_Category_value)
	if err != nil {
		return err
	}
	*x = BinlogTransaction_Statement_Category(i)
	return nil
}

// UnmarshalJSON unmarshals the BinlogTransaction_Statement_Category from JSON.
func (x *BinlogTransaction_Statement_Category) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the BinlogTransaction_Statement message to JSON.
func (x *BinlogTransaction_Statement) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Category != 0 || s.HasField("category") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("category")
		x.Category.MarshalProtoJSON(s)
	}
	if x.Charset != nil || s.HasField("charset") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("charset")
		x.Charset.MarshalProtoJSON(s.WithField("charset"))
	}
	if len(x.Sql) > 0 || s.HasField("sql") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("sql")
		s.WriteBytes(x.Sql)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the BinlogTransaction_Statement to JSON.
func (x *BinlogTransaction_Statement) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the BinlogTransaction_Statement message from JSON.
func (x *BinlogTransaction_Statement) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "category":
			s.AddField("category")
			x.Category.UnmarshalProtoJSON(s)
		case "charset":
			if s.ReadNil() {
				x.Charset = nil
				return
			}
			x.Charset = &Charset{}
			x.Charset.UnmarshalProtoJSON(s.WithField("charset", true))
		case "sql":
			s.AddField("sql")
			x.Sql = s.ReadBytes()
		}
	})
}

// UnmarshalJSON unmarshals the BinlogTransaction_Statement from JSON.
func (x *BinlogTransaction_Statement) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the BinlogTransaction message to JSON.
func (x *BinlogTransaction) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if len(x.Statements) > 0 || s.HasField("statements") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("statements")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.Statements {
			s.WriteMoreIf(&wroteElement)
			element.MarshalProtoJSON(s.WithField("statements"))
		}
		s.WriteArrayEnd()
	}
	if x.EventToken != nil || s.HasField("eventToken") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("eventToken")
		x.EventToken.MarshalProtoJSON(s.WithField("eventToken"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the BinlogTransaction to JSON.
func (x *BinlogTransaction) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the BinlogTransaction message from JSON.
func (x *BinlogTransaction) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "statements":
			s.AddField("statements")
			if s.ReadNil() {
				x.Statements = nil
				return
			}
			s.ReadArray(func() {
				if s.ReadNil() {
					x.Statements = append(x.Statements, nil)
					return
				}
				v := &BinlogTransaction_Statement{}
				v.UnmarshalProtoJSON(s.WithField("statements", false))
				if s.Err() != nil {
					return
				}
				x.Statements = append(x.Statements, v)
			})
		case "event_token", "eventToken":
			if s.ReadNil() {
				x.EventToken = nil
				return
			}
			x.EventToken = &query.EventToken{}
			x.EventToken.UnmarshalProtoJSON(s.WithField("event_token", true))
		}
	})
}

// UnmarshalJSON unmarshals the BinlogTransaction from JSON.
func (x *BinlogTransaction) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the StreamKeyRangeRequest message to JSON.
func (x *StreamKeyRangeRequest) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Position != "" || s.HasField("position") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("position")
		s.WriteString(x.Position)
	}
	if x.KeyRange != nil || s.HasField("keyRange") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("keyRange")
		x.KeyRange.MarshalProtoJSON(s.WithField("keyRange"))
	}
	if x.Charset != nil || s.HasField("charset") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("charset")
		x.Charset.MarshalProtoJSON(s.WithField("charset"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the StreamKeyRangeRequest to JSON.
func (x *StreamKeyRangeRequest) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the StreamKeyRangeRequest message from JSON.
func (x *StreamKeyRangeRequest) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "position":
			s.AddField("position")
			x.Position = s.ReadString()
		case "key_range", "keyRange":
			if s.ReadNil() {
				x.KeyRange = nil
				return
			}
			x.KeyRange = &topodata.KeyRange{}
			x.KeyRange.UnmarshalProtoJSON(s.WithField("key_range", true))
		case "charset":
			if s.ReadNil() {
				x.Charset = nil
				return
			}
			x.Charset = &Charset{}
			x.Charset.UnmarshalProtoJSON(s.WithField("charset", true))
		}
	})
}

// UnmarshalJSON unmarshals the StreamKeyRangeRequest from JSON.
func (x *StreamKeyRangeRequest) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the StreamKeyRangeResponse message to JSON.
func (x *StreamKeyRangeResponse) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.BinlogTransaction != nil || s.HasField("binlogTransaction") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("binlogTransaction")
		x.BinlogTransaction.MarshalProtoJSON(s.WithField("binlogTransaction"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the StreamKeyRangeResponse to JSON.
func (x *StreamKeyRangeResponse) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the StreamKeyRangeResponse message from JSON.
func (x *StreamKeyRangeResponse) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "binlog_transaction", "binlogTransaction":
			if s.ReadNil() {
				x.BinlogTransaction = nil
				return
			}
			x.BinlogTransaction = &BinlogTransaction{}
			x.BinlogTransaction.UnmarshalProtoJSON(s.WithField("binlog_transaction", true))
		}
	})
}

// UnmarshalJSON unmarshals the StreamKeyRangeResponse from JSON.
func (x *StreamKeyRangeResponse) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the StreamTablesRequest message to JSON.
func (x *StreamTablesRequest) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Position != "" || s.HasField("position") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("position")
		s.WriteString(x.Position)
	}
	if len(x.Tables) > 0 || s.HasField("tables") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("tables")
		s.WriteStringArray(x.Tables)
	}
	if x.Charset != nil || s.HasField("charset") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("charset")
		x.Charset.MarshalProtoJSON(s.WithField("charset"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the StreamTablesRequest to JSON.
func (x *StreamTablesRequest) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the StreamTablesRequest message from JSON.
func (x *StreamTablesRequest) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "position":
			s.AddField("position")
			x.Position = s.ReadString()
		case "tables":
			s.AddField("tables")
			if s.ReadNil() {
				x.Tables = nil
				return
			}
			x.Tables = s.ReadStringArray()
		case "charset":
			if s.ReadNil() {
				x.Charset = nil
				return
			}
			x.Charset = &Charset{}
			x.Charset.UnmarshalProtoJSON(s.WithField("charset", true))
		}
	})
}

// UnmarshalJSON unmarshals the StreamTablesRequest from JSON.
func (x *StreamTablesRequest) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the StreamTablesResponse message to JSON.
func (x *StreamTablesResponse) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.BinlogTransaction != nil || s.HasField("binlogTransaction") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("binlogTransaction")
		x.BinlogTransaction.MarshalProtoJSON(s.WithField("binlogTransaction"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the StreamTablesResponse to JSON.
func (x *StreamTablesResponse) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the StreamTablesResponse message from JSON.
func (x *StreamTablesResponse) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "binlog_transaction", "binlogTransaction":
			if s.ReadNil() {
				x.BinlogTransaction = nil
				return
			}
			x.BinlogTransaction = &BinlogTransaction{}
			x.BinlogTransaction.UnmarshalProtoJSON(s.WithField("binlog_transaction", true))
		}
	})
}

// UnmarshalJSON unmarshals the StreamTablesResponse from JSON.
func (x *StreamTablesResponse) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the Rule message to JSON.
func (x *Rule) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Match != "" || s.HasField("match") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("match")
		s.WriteString(x.Match)
	}
	if x.Filter != "" || s.HasField("filter") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("filter")
		s.WriteString(x.Filter)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the Rule to JSON.
func (x *Rule) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the Rule message from JSON.
func (x *Rule) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "match":
			s.AddField("match")
			x.Match = s.ReadString()
		case "filter":
			s.AddField("filter")
			x.Filter = s.ReadString()
		}
	})
}

// UnmarshalJSON unmarshals the Rule from JSON.
func (x *Rule) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the Filter_FieldEventMode to JSON.
func (x Filter_FieldEventMode) MarshalProtoJSON(s *json.MarshalState) {
	s.WriteEnumString(int32(x), Filter_FieldEventMode_name)
}

// MarshalText marshals the Filter_FieldEventMode to text.
func (x Filter_FieldEventMode) MarshalText() ([]byte, error) {
	return []byte(json.GetEnumString(int32(x), Filter_FieldEventMode_name)), nil
}

// MarshalJSON marshals the Filter_FieldEventMode to JSON.
func (x Filter_FieldEventMode) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the Filter_FieldEventMode from JSON.
func (x *Filter_FieldEventMode) UnmarshalProtoJSON(s *json.UnmarshalState) {
	v := s.ReadEnum(Filter_FieldEventMode_value)
	if err := s.Err(); err != nil {
		s.SetErrorf("could not read FieldEventMode enum: %v", err)
		return
	}
	*x = Filter_FieldEventMode(v)
}

// UnmarshalText unmarshals the Filter_FieldEventMode from text.
func (x *Filter_FieldEventMode) UnmarshalText(b []byte) error {
	i, err := json.ParseEnumString(string(b), Filter_FieldEventMode_value)
	if err != nil {
		return err
	}
	*x = Filter_FieldEventMode(i)
	return nil
}

// UnmarshalJSON unmarshals the Filter_FieldEventMode from JSON.
func (x *Filter_FieldEventMode) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the Filter message to JSON.
func (x *Filter) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if len(x.Rules) > 0 || s.HasField("rules") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("rules")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.Rules {
			s.WriteMoreIf(&wroteElement)
			element.MarshalProtoJSON(s.WithField("rules"))
		}
		s.WriteArrayEnd()
	}
	if x.FieldEventMode != 0 || s.HasField("fieldEventMode") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("fieldEventMode")
		x.FieldEventMode.MarshalProtoJSON(s)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the Filter to JSON.
func (x *Filter) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the Filter message from JSON.
func (x *Filter) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "rules":
			s.AddField("rules")
			if s.ReadNil() {
				x.Rules = nil
				return
			}
			s.ReadArray(func() {
				if s.ReadNil() {
					x.Rules = append(x.Rules, nil)
					return
				}
				v := &Rule{}
				v.UnmarshalProtoJSON(s.WithField("rules", false))
				if s.Err() != nil {
					return
				}
				x.Rules = append(x.Rules, v)
			})
		case "fieldEventMode":
			s.AddField("fieldEventMode")
			x.FieldEventMode.UnmarshalProtoJSON(s)
		}
	})
}

// UnmarshalJSON unmarshals the Filter from JSON.
func (x *Filter) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the BinlogSource message to JSON.
func (x *BinlogSource) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Keyspace != "" || s.HasField("keyspace") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("keyspace")
		s.WriteString(x.Keyspace)
	}
	if x.Shard != "" || s.HasField("shard") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("shard")
		s.WriteString(x.Shard)
	}
	if x.TabletType != 0 || s.HasField("tabletType") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("tabletType")
		x.TabletType.MarshalProtoJSON(s)
	}
	if x.KeyRange != nil || s.HasField("keyRange") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("keyRange")
		x.KeyRange.MarshalProtoJSON(s.WithField("keyRange"))
	}
	if len(x.Tables) > 0 || s.HasField("tables") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("tables")
		s.WriteStringArray(x.Tables)
	}
	if x.Filter != nil || s.HasField("filter") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("filter")
		x.Filter.MarshalProtoJSON(s.WithField("filter"))
	}
	if x.OnDdl != 0 || s.HasField("onDdl") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("onDdl")
		x.OnDdl.MarshalProtoJSON(s)
	}
	if x.ExternalMysql != "" || s.HasField("externalMysql") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("externalMysql")
		s.WriteString(x.ExternalMysql)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the BinlogSource to JSON.
func (x *BinlogSource) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the BinlogSource message from JSON.
func (x *BinlogSource) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "keyspace":
			s.AddField("keyspace")
			x.Keyspace = s.ReadString()
		case "shard":
			s.AddField("shard")
			x.Shard = s.ReadString()
		case "tablet_type", "tabletType":
			s.AddField("tablet_type")
			x.TabletType.UnmarshalProtoJSON(s)
		case "key_range", "keyRange":
			if s.ReadNil() {
				x.KeyRange = nil
				return
			}
			x.KeyRange = &topodata.KeyRange{}
			x.KeyRange.UnmarshalProtoJSON(s.WithField("key_range", true))
		case "tables":
			s.AddField("tables")
			if s.ReadNil() {
				x.Tables = nil
				return
			}
			x.Tables = s.ReadStringArray()
		case "filter":
			if s.ReadNil() {
				x.Filter = nil
				return
			}
			x.Filter = &Filter{}
			x.Filter.UnmarshalProtoJSON(s.WithField("filter", true))
		case "on_ddl", "onDdl":
			s.AddField("on_ddl")
			x.OnDdl.UnmarshalProtoJSON(s)
		case "external_mysql", "externalMysql":
			s.AddField("external_mysql")
			x.ExternalMysql = s.ReadString()
		}
	})
}

// UnmarshalJSON unmarshals the BinlogSource from JSON.
func (x *BinlogSource) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the RowChange message to JSON.
func (x *RowChange) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Before != nil || s.HasField("before") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("before")
		x.Before.MarshalProtoJSON(s.WithField("before"))
	}
	if x.After != nil || s.HasField("after") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("after")
		x.After.MarshalProtoJSON(s.WithField("after"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the RowChange to JSON.
func (x *RowChange) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the RowChange message from JSON.
func (x *RowChange) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "before":
			if s.ReadNil() {
				x.Before = nil
				return
			}
			x.Before = &query.Row{}
			x.Before.UnmarshalProtoJSON(s.WithField("before", true))
		case "after":
			if s.ReadNil() {
				x.After = nil
				return
			}
			x.After = &query.Row{}
			x.After.UnmarshalProtoJSON(s.WithField("after", true))
		}
	})
}

// UnmarshalJSON unmarshals the RowChange from JSON.
func (x *RowChange) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the RowEvent message to JSON.
func (x *RowEvent) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.TableName != "" || s.HasField("tableName") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("tableName")
		s.WriteString(x.TableName)
	}
	if len(x.RowChanges) > 0 || s.HasField("rowChanges") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("rowChanges")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.RowChanges {
			s.WriteMoreIf(&wroteElement)
			element.MarshalProtoJSON(s.WithField("rowChanges"))
		}
		s.WriteArrayEnd()
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the RowEvent to JSON.
func (x *RowEvent) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the RowEvent message from JSON.
func (x *RowEvent) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "table_name", "tableName":
			s.AddField("table_name")
			x.TableName = s.ReadString()
		case "row_changes", "rowChanges":
			s.AddField("row_changes")
			if s.ReadNil() {
				x.RowChanges = nil
				return
			}
			s.ReadArray(func() {
				if s.ReadNil() {
					x.RowChanges = append(x.RowChanges, nil)
					return
				}
				v := &RowChange{}
				v.UnmarshalProtoJSON(s.WithField("row_changes", false))
				if s.Err() != nil {
					return
				}
				x.RowChanges = append(x.RowChanges, v)
			})
		}
	})
}

// UnmarshalJSON unmarshals the RowEvent from JSON.
func (x *RowEvent) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the FieldEvent message to JSON.
func (x *FieldEvent) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.TableName != "" || s.HasField("tableName") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("tableName")
		s.WriteString(x.TableName)
	}
	if len(x.Fields) > 0 || s.HasField("fields") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("fields")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.Fields {
			s.WriteMoreIf(&wroteElement)
			element.MarshalProtoJSON(s.WithField("fields"))
		}
		s.WriteArrayEnd()
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the FieldEvent to JSON.
func (x *FieldEvent) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the FieldEvent message from JSON.
func (x *FieldEvent) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "table_name", "tableName":
			s.AddField("table_name")
			x.TableName = s.ReadString()
		case "fields":
			s.AddField("fields")
			if s.ReadNil() {
				x.Fields = nil
				return
			}
			s.ReadArray(func() {
				if s.ReadNil() {
					x.Fields = append(x.Fields, nil)
					return
				}
				v := &query.Field{}
				v.UnmarshalProtoJSON(s.WithField("fields", false))
				if s.Err() != nil {
					return
				}
				x.Fields = append(x.Fields, v)
			})
		}
	})
}

// UnmarshalJSON unmarshals the FieldEvent from JSON.
func (x *FieldEvent) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the ShardGtid message to JSON.
func (x *ShardGtid) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Keyspace != "" || s.HasField("keyspace") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("keyspace")
		s.WriteString(x.Keyspace)
	}
	if x.Shard != "" || s.HasField("shard") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("shard")
		s.WriteString(x.Shard)
	}
	if x.Gtid != "" || s.HasField("gtid") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("gtid")
		s.WriteString(x.Gtid)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the ShardGtid to JSON.
func (x *ShardGtid) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the ShardGtid message from JSON.
func (x *ShardGtid) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "keyspace":
			s.AddField("keyspace")
			x.Keyspace = s.ReadString()
		case "shard":
			s.AddField("shard")
			x.Shard = s.ReadString()
		case "gtid":
			s.AddField("gtid")
			x.Gtid = s.ReadString()
		}
	})
}

// UnmarshalJSON unmarshals the ShardGtid from JSON.
func (x *ShardGtid) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the VGtid message to JSON.
func (x *VGtid) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if len(x.ShardGtids) > 0 || s.HasField("shardGtids") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("shardGtids")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.ShardGtids {
			s.WriteMoreIf(&wroteElement)
			element.MarshalProtoJSON(s.WithField("shardGtids"))
		}
		s.WriteArrayEnd()
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the VGtid to JSON.
func (x *VGtid) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the VGtid message from JSON.
func (x *VGtid) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "shard_gtids", "shardGtids":
			s.AddField("shard_gtids")
			if s.ReadNil() {
				x.ShardGtids = nil
				return
			}
			s.ReadArray(func() {
				if s.ReadNil() {
					x.ShardGtids = append(x.ShardGtids, nil)
					return
				}
				v := &ShardGtid{}
				v.UnmarshalProtoJSON(s.WithField("shard_gtids", false))
				if s.Err() != nil {
					return
				}
				x.ShardGtids = append(x.ShardGtids, v)
			})
		}
	})
}

// UnmarshalJSON unmarshals the VGtid from JSON.
func (x *VGtid) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the KeyspaceShard message to JSON.
func (x *KeyspaceShard) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Keyspace != "" || s.HasField("keyspace") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("keyspace")
		s.WriteString(x.Keyspace)
	}
	if x.Shard != "" || s.HasField("shard") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("shard")
		s.WriteString(x.Shard)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the KeyspaceShard to JSON.
func (x *KeyspaceShard) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the KeyspaceShard message from JSON.
func (x *KeyspaceShard) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "keyspace":
			s.AddField("keyspace")
			x.Keyspace = s.ReadString()
		case "shard":
			s.AddField("shard")
			x.Shard = s.ReadString()
		}
	})
}

// UnmarshalJSON unmarshals the KeyspaceShard from JSON.
func (x *KeyspaceShard) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the Journal message to JSON.
func (x *Journal) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Id != 0 || s.HasField("id") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("id")
		s.WriteInt64(x.Id)
	}
	if x.MigrationType != 0 || s.HasField("migrationType") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("migrationType")
		x.MigrationType.MarshalProtoJSON(s)
	}
	if len(x.Tables) > 0 || s.HasField("tables") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("tables")
		s.WriteStringArray(x.Tables)
	}
	if x.LocalPosition != "" || s.HasField("localPosition") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("localPosition")
		s.WriteString(x.LocalPosition)
	}
	if len(x.ShardGtids) > 0 || s.HasField("shardGtids") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("shardGtids")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.ShardGtids {
			s.WriteMoreIf(&wroteElement)
			element.MarshalProtoJSON(s.WithField("shardGtids"))
		}
		s.WriteArrayEnd()
	}
	if len(x.Participants) > 0 || s.HasField("participants") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("participants")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.Participants {
			s.WriteMoreIf(&wroteElement)
			element.MarshalProtoJSON(s.WithField("participants"))
		}
		s.WriteArrayEnd()
	}
	if len(x.SourceWorkflows) > 0 || s.HasField("sourceWorkflows") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("sourceWorkflows")
		s.WriteStringArray(x.SourceWorkflows)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the Journal to JSON.
func (x *Journal) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the Journal message from JSON.
func (x *Journal) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "id":
			s.AddField("id")
			x.Id = s.ReadInt64()
		case "migration_type", "migrationType":
			s.AddField("migration_type")
			x.MigrationType.UnmarshalProtoJSON(s)
		case "tables":
			s.AddField("tables")
			if s.ReadNil() {
				x.Tables = nil
				return
			}
			x.Tables = s.ReadStringArray()
		case "local_position", "localPosition":
			s.AddField("local_position")
			x.LocalPosition = s.ReadString()
		case "shard_gtids", "shardGtids":
			s.AddField("shard_gtids")
			if s.ReadNil() {
				x.ShardGtids = nil
				return
			}
			s.ReadArray(func() {
				if s.ReadNil() {
					x.ShardGtids = append(x.ShardGtids, nil)
					return
				}
				v := &ShardGtid{}
				v.UnmarshalProtoJSON(s.WithField("shard_gtids", false))
				if s.Err() != nil {
					return
				}
				x.ShardGtids = append(x.ShardGtids, v)
			})
		case "participants":
			s.AddField("participants")
			if s.ReadNil() {
				x.Participants = nil
				return
			}
			s.ReadArray(func() {
				if s.ReadNil() {
					x.Participants = append(x.Participants, nil)
					return
				}
				v := &KeyspaceShard{}
				v.UnmarshalProtoJSON(s.WithField("participants", false))
				if s.Err() != nil {
					return
				}
				x.Participants = append(x.Participants, v)
			})
		case "source_workflows", "sourceWorkflows":
			s.AddField("source_workflows")
			if s.ReadNil() {
				x.SourceWorkflows = nil
				return
			}
			x.SourceWorkflows = s.ReadStringArray()
		}
	})
}

// UnmarshalJSON unmarshals the Journal from JSON.
func (x *Journal) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the VEvent message to JSON.
func (x *VEvent) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Type != 0 || s.HasField("type") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("type")
		x.Type.MarshalProtoJSON(s)
	}
	if x.Timestamp != 0 || s.HasField("timestamp") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("timestamp")
		s.WriteInt64(x.Timestamp)
	}
	if x.Gtid != "" || s.HasField("gtid") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("gtid")
		s.WriteString(x.Gtid)
	}
	if x.Ddl != "" || s.HasField("ddl") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("ddl")
		s.WriteString(x.Ddl)
	}
	if x.RowEvent != nil || s.HasField("rowEvent") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("rowEvent")
		x.RowEvent.MarshalProtoJSON(s.WithField("rowEvent"))
	}
	if x.FieldEvent != nil || s.HasField("fieldEvent") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("fieldEvent")
		x.FieldEvent.MarshalProtoJSON(s.WithField("fieldEvent"))
	}
	if x.Vgtid != nil || s.HasField("vgtid") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("vgtid")
		x.Vgtid.MarshalProtoJSON(s.WithField("vgtid"))
	}
	if x.Journal != nil || s.HasField("journal") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("journal")
		x.Journal.MarshalProtoJSON(s.WithField("journal"))
	}
	if x.Dml != "" || s.HasField("dml") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("dml")
		s.WriteString(x.Dml)
	}
	if x.CurrentTime != 0 || s.HasField("currentTime") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("currentTime")
		s.WriteInt64(x.CurrentTime)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the VEvent to JSON.
func (x *VEvent) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the VEvent message from JSON.
func (x *VEvent) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "type":
			s.AddField("type")
			x.Type.UnmarshalProtoJSON(s)
		case "timestamp":
			s.AddField("timestamp")
			x.Timestamp = s.ReadInt64()
		case "gtid":
			s.AddField("gtid")
			x.Gtid = s.ReadString()
		case "ddl":
			s.AddField("ddl")
			x.Ddl = s.ReadString()
		case "row_event", "rowEvent":
			if s.ReadNil() {
				x.RowEvent = nil
				return
			}
			x.RowEvent = &RowEvent{}
			x.RowEvent.UnmarshalProtoJSON(s.WithField("row_event", true))
		case "field_event", "fieldEvent":
			if s.ReadNil() {
				x.FieldEvent = nil
				return
			}
			x.FieldEvent = &FieldEvent{}
			x.FieldEvent.UnmarshalProtoJSON(s.WithField("field_event", true))
		case "vgtid":
			if s.ReadNil() {
				x.Vgtid = nil
				return
			}
			x.Vgtid = &VGtid{}
			x.Vgtid.UnmarshalProtoJSON(s.WithField("vgtid", true))
		case "journal":
			if s.ReadNil() {
				x.Journal = nil
				return
			}
			x.Journal = &Journal{}
			x.Journal.UnmarshalProtoJSON(s.WithField("journal", true))
		case "dml":
			s.AddField("dml")
			x.Dml = s.ReadString()
		case "current_time", "currentTime":
			s.AddField("current_time")
			x.CurrentTime = s.ReadInt64()
		}
	})
}

// UnmarshalJSON unmarshals the VEvent from JSON.
func (x *VEvent) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the VStreamRequest message to JSON.
func (x *VStreamRequest) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.EffectiveCallerId != nil || s.HasField("effectiveCallerId") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("effectiveCallerId")
		x.EffectiveCallerId.MarshalProtoJSON(s.WithField("effectiveCallerId"))
	}
	if x.ImmediateCallerId != nil || s.HasField("immediateCallerId") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("immediateCallerId")
		x.ImmediateCallerId.MarshalProtoJSON(s.WithField("immediateCallerId"))
	}
	if x.Target != nil || s.HasField("target") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("target")
		x.Target.MarshalProtoJSON(s.WithField("target"))
	}
	if x.Position != "" || s.HasField("position") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("position")
		s.WriteString(x.Position)
	}
	if x.Filter != nil || s.HasField("filter") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("filter")
		x.Filter.MarshalProtoJSON(s.WithField("filter"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the VStreamRequest to JSON.
func (x *VStreamRequest) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the VStreamRequest message from JSON.
func (x *VStreamRequest) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "effective_caller_id", "effectiveCallerId":
			if s.ReadNil() {
				x.EffectiveCallerId = nil
				return
			}
			x.EffectiveCallerId = &vtrpc.CallerID{}
			x.EffectiveCallerId.UnmarshalProtoJSON(s.WithField("effective_caller_id", true))
		case "immediate_caller_id", "immediateCallerId":
			if s.ReadNil() {
				x.ImmediateCallerId = nil
				return
			}
			x.ImmediateCallerId = &query.VTGateCallerID{}
			x.ImmediateCallerId.UnmarshalProtoJSON(s.WithField("immediate_caller_id", true))
		case "target":
			if s.ReadNil() {
				x.Target = nil
				return
			}
			x.Target = &query.Target{}
			x.Target.UnmarshalProtoJSON(s.WithField("target", true))
		case "position":
			s.AddField("position")
			x.Position = s.ReadString()
		case "filter":
			if s.ReadNil() {
				x.Filter = nil
				return
			}
			x.Filter = &Filter{}
			x.Filter.UnmarshalProtoJSON(s.WithField("filter", true))
		}
	})
}

// UnmarshalJSON unmarshals the VStreamRequest from JSON.
func (x *VStreamRequest) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the VStreamResponse message to JSON.
func (x *VStreamResponse) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if len(x.Events) > 0 || s.HasField("events") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("events")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.Events {
			s.WriteMoreIf(&wroteElement)
			element.MarshalProtoJSON(s.WithField("events"))
		}
		s.WriteArrayEnd()
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the VStreamResponse to JSON.
func (x *VStreamResponse) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the VStreamResponse message from JSON.
func (x *VStreamResponse) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "events":
			s.AddField("events")
			if s.ReadNil() {
				x.Events = nil
				return
			}
			s.ReadArray(func() {
				if s.ReadNil() {
					x.Events = append(x.Events, nil)
					return
				}
				v := &VEvent{}
				v.UnmarshalProtoJSON(s.WithField("events", false))
				if s.Err() != nil {
					return
				}
				x.Events = append(x.Events, v)
			})
		}
	})
}

// UnmarshalJSON unmarshals the VStreamResponse from JSON.
func (x *VStreamResponse) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the VStreamRowsRequest message to JSON.
func (x *VStreamRowsRequest) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.EffectiveCallerId != nil || s.HasField("effectiveCallerId") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("effectiveCallerId")
		x.EffectiveCallerId.MarshalProtoJSON(s.WithField("effectiveCallerId"))
	}
	if x.ImmediateCallerId != nil || s.HasField("immediateCallerId") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("immediateCallerId")
		x.ImmediateCallerId.MarshalProtoJSON(s.WithField("immediateCallerId"))
	}
	if x.Target != nil || s.HasField("target") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("target")
		x.Target.MarshalProtoJSON(s.WithField("target"))
	}
	if x.Query != "" || s.HasField("query") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("query")
		s.WriteString(x.Query)
	}
	if x.Lastpk != nil || s.HasField("lastpk") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("lastpk")
		x.Lastpk.MarshalProtoJSON(s.WithField("lastpk"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the VStreamRowsRequest to JSON.
func (x *VStreamRowsRequest) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the VStreamRowsRequest message from JSON.
func (x *VStreamRowsRequest) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "effective_caller_id", "effectiveCallerId":
			if s.ReadNil() {
				x.EffectiveCallerId = nil
				return
			}
			x.EffectiveCallerId = &vtrpc.CallerID{}
			x.EffectiveCallerId.UnmarshalProtoJSON(s.WithField("effective_caller_id", true))
		case "immediate_caller_id", "immediateCallerId":
			if s.ReadNil() {
				x.ImmediateCallerId = nil
				return
			}
			x.ImmediateCallerId = &query.VTGateCallerID{}
			x.ImmediateCallerId.UnmarshalProtoJSON(s.WithField("immediate_caller_id", true))
		case "target":
			if s.ReadNil() {
				x.Target = nil
				return
			}
			x.Target = &query.Target{}
			x.Target.UnmarshalProtoJSON(s.WithField("target", true))
		case "query":
			s.AddField("query")
			x.Query = s.ReadString()
		case "lastpk":
			if s.ReadNil() {
				x.Lastpk = nil
				return
			}
			x.Lastpk = &query.QueryResult{}
			x.Lastpk.UnmarshalProtoJSON(s.WithField("lastpk", true))
		}
	})
}

// UnmarshalJSON unmarshals the VStreamRowsRequest from JSON.
func (x *VStreamRowsRequest) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the VStreamRowsResponse message to JSON.
func (x *VStreamRowsResponse) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if len(x.Fields) > 0 || s.HasField("fields") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("fields")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.Fields {
			s.WriteMoreIf(&wroteElement)
			element.MarshalProtoJSON(s.WithField("fields"))
		}
		s.WriteArrayEnd()
	}
	if len(x.Pkfields) > 0 || s.HasField("pkfields") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("pkfields")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.Pkfields {
			s.WriteMoreIf(&wroteElement)
			element.MarshalProtoJSON(s.WithField("pkfields"))
		}
		s.WriteArrayEnd()
	}
	if x.Gtid != "" || s.HasField("gtid") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("gtid")
		s.WriteString(x.Gtid)
	}
	if len(x.Rows) > 0 || s.HasField("rows") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("rows")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.Rows {
			s.WriteMoreIf(&wroteElement)
			element.MarshalProtoJSON(s.WithField("rows"))
		}
		s.WriteArrayEnd()
	}
	if x.Lastpk != nil || s.HasField("lastpk") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("lastpk")
		x.Lastpk.MarshalProtoJSON(s.WithField("lastpk"))
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the VStreamRowsResponse to JSON.
func (x *VStreamRowsResponse) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the VStreamRowsResponse message from JSON.
func (x *VStreamRowsResponse) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "fields":
			s.AddField("fields")
			if s.ReadNil() {
				x.Fields = nil
				return
			}
			s.ReadArray(func() {
				if s.ReadNil() {
					x.Fields = append(x.Fields, nil)
					return
				}
				v := &query.Field{}
				v.UnmarshalProtoJSON(s.WithField("fields", false))
				if s.Err() != nil {
					return
				}
				x.Fields = append(x.Fields, v)
			})
		case "pkfields":
			s.AddField("pkfields")
			if s.ReadNil() {
				x.Pkfields = nil
				return
			}
			s.ReadArray(func() {
				if s.ReadNil() {
					x.Pkfields = append(x.Pkfields, nil)
					return
				}
				v := &query.Field{}
				v.UnmarshalProtoJSON(s.WithField("pkfields", false))
				if s.Err() != nil {
					return
				}
				x.Pkfields = append(x.Pkfields, v)
			})
		case "gtid":
			s.AddField("gtid")
			x.Gtid = s.ReadString()
		case "rows":
			s.AddField("rows")
			if s.ReadNil() {
				x.Rows = nil
				return
			}
			s.ReadArray(func() {
				if s.ReadNil() {
					x.Rows = append(x.Rows, nil)
					return
				}
				v := &query.Row{}
				v.UnmarshalProtoJSON(s.WithField("rows", false))
				if s.Err() != nil {
					return
				}
				x.Rows = append(x.Rows, v)
			})
		case "lastpk":
			if s.ReadNil() {
				x.Lastpk = nil
				return
			}
			x.Lastpk = &query.Row{}
			x.Lastpk.UnmarshalProtoJSON(s.WithField("lastpk", true))
		}
	})
}

// UnmarshalJSON unmarshals the VStreamRowsResponse from JSON.
func (x *VStreamRowsResponse) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the VStreamResultsRequest message to JSON.
func (x *VStreamResultsRequest) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.EffectiveCallerId != nil || s.HasField("effectiveCallerId") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("effectiveCallerId")
		x.EffectiveCallerId.MarshalProtoJSON(s.WithField("effectiveCallerId"))
	}
	if x.ImmediateCallerId != nil || s.HasField("immediateCallerId") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("immediateCallerId")
		x.ImmediateCallerId.MarshalProtoJSON(s.WithField("immediateCallerId"))
	}
	if x.Target != nil || s.HasField("target") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("target")
		x.Target.MarshalProtoJSON(s.WithField("target"))
	}
	if x.Query != "" || s.HasField("query") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("query")
		s.WriteString(x.Query)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the VStreamResultsRequest to JSON.
func (x *VStreamResultsRequest) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the VStreamResultsRequest message from JSON.
func (x *VStreamResultsRequest) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "effective_caller_id", "effectiveCallerId":
			if s.ReadNil() {
				x.EffectiveCallerId = nil
				return
			}
			x.EffectiveCallerId = &vtrpc.CallerID{}
			x.EffectiveCallerId.UnmarshalProtoJSON(s.WithField("effective_caller_id", true))
		case "immediate_caller_id", "immediateCallerId":
			if s.ReadNil() {
				x.ImmediateCallerId = nil
				return
			}
			x.ImmediateCallerId = &query.VTGateCallerID{}
			x.ImmediateCallerId.UnmarshalProtoJSON(s.WithField("immediate_caller_id", true))
		case "target":
			if s.ReadNil() {
				x.Target = nil
				return
			}
			x.Target = &query.Target{}
			x.Target.UnmarshalProtoJSON(s.WithField("target", true))
		case "query":
			s.AddField("query")
			x.Query = s.ReadString()
		}
	})
}

// UnmarshalJSON unmarshals the VStreamResultsRequest from JSON.
func (x *VStreamResultsRequest) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

// MarshalProtoJSON marshals the VStreamResultsResponse message to JSON.
func (x *VStreamResultsResponse) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if len(x.Fields) > 0 || s.HasField("fields") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("fields")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.Fields {
			s.WriteMoreIf(&wroteElement)
			element.MarshalProtoJSON(s.WithField("fields"))
		}
		s.WriteArrayEnd()
	}
	if x.Gtid != "" || s.HasField("gtid") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("gtid")
		s.WriteString(x.Gtid)
	}
	if len(x.Rows) > 0 || s.HasField("rows") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("rows")
		s.WriteArrayStart()
		var wroteElement bool
		for _, element := range x.Rows {
			s.WriteMoreIf(&wroteElement)
			element.MarshalProtoJSON(s.WithField("rows"))
		}
		s.WriteArrayEnd()
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the VStreamResultsResponse to JSON.
func (x *VStreamResultsResponse) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the VStreamResultsResponse message from JSON.
func (x *VStreamResultsResponse) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "fields":
			s.AddField("fields")
			if s.ReadNil() {
				x.Fields = nil
				return
			}
			s.ReadArray(func() {
				if s.ReadNil() {
					x.Fields = append(x.Fields, nil)
					return
				}
				v := &query.Field{}
				v.UnmarshalProtoJSON(s.WithField("fields", false))
				if s.Err() != nil {
					return
				}
				x.Fields = append(x.Fields, v)
			})
		case "gtid":
			s.AddField("gtid")
			x.Gtid = s.ReadString()
		case "rows":
			s.AddField("rows")
			if s.ReadNil() {
				x.Rows = nil
				return
			}
			s.ReadArray(func() {
				if s.ReadNil() {
					x.Rows = append(x.Rows, nil)
					return
				}
				v := &query.Row{}
				v.UnmarshalProtoJSON(s.WithField("rows", false))
				if s.Err() != nil {
					return
				}
				x.Rows = append(x.Rows, v)
			})
		}
	})
}

// UnmarshalJSON unmarshals the VStreamResultsResponse from JSON.
func (x *VStreamResultsResponse) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

func (m *Charset) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Charset) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *Charset) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.Server != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.Server))
		i--
		dAtA[i] = 0x18
	}
	if m.Conn != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.Conn))
		i--
		dAtA[i] = 0x10
	}
	if m.Client != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.Client))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BinlogTransaction_Statement) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BinlogTransaction_Statement) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *BinlogTransaction_Statement) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.Sql) > 0 {
		i -= len(m.Sql)
		copy(dAtA[i:], m.Sql)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Sql)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Charset != nil {
		size, err := m.Charset.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x12
	}
	if m.Category != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.Category))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *BinlogTransaction) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BinlogTransaction) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *BinlogTransaction) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.EventToken != nil {
		size, err := m.EventToken.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Statements) > 0 {
		for iNdEx := len(m.Statements) - 1; iNdEx >= 0; iNdEx-- {
			size, err := m.Statements[iNdEx].MarshalToSizedBufferVT(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *StreamKeyRangeRequest) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamKeyRangeRequest) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *StreamKeyRangeRequest) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.Charset != nil {
		size, err := m.Charset.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1a
	}
	if m.KeyRange != nil {
		size, err := m.KeyRange.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Position) > 0 {
		i -= len(m.Position)
		copy(dAtA[i:], m.Position)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Position)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StreamKeyRangeResponse) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamKeyRangeResponse) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *StreamKeyRangeResponse) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.BinlogTransaction != nil {
		size, err := m.BinlogTransaction.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StreamTablesRequest) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamTablesRequest) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *StreamTablesRequest) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.Charset != nil {
		size, err := m.Charset.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Tables) > 0 {
		for iNdEx := len(m.Tables) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tables[iNdEx])
			copy(dAtA[i:], m.Tables[iNdEx])
			i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Tables[iNdEx])))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Position) > 0 {
		i -= len(m.Position)
		copy(dAtA[i:], m.Position)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Position)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *StreamTablesResponse) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *StreamTablesResponse) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *StreamTablesResponse) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.BinlogTransaction != nil {
		size, err := m.BinlogTransaction.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Rule) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Rule) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *Rule) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.Filter) > 0 {
		i -= len(m.Filter)
		copy(dAtA[i:], m.Filter)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Filter)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Match) > 0 {
		i -= len(m.Match)
		copy(dAtA[i:], m.Match)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Match)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Filter) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Filter) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *Filter) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.FieldEventMode != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.FieldEventMode))
		i--
		dAtA[i] = 0x10
	}
	if len(m.Rules) > 0 {
		for iNdEx := len(m.Rules) - 1; iNdEx >= 0; iNdEx-- {
			size, err := m.Rules[iNdEx].MarshalToSizedBufferVT(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *BinlogSource) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BinlogSource) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *BinlogSource) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.ExternalMysql) > 0 {
		i -= len(m.ExternalMysql)
		copy(dAtA[i:], m.ExternalMysql)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.ExternalMysql)))
		i--
		dAtA[i] = 0x42
	}
	if m.OnDdl != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.OnDdl))
		i--
		dAtA[i] = 0x38
	}
	if m.Filter != nil {
		size, err := m.Filter.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Tables) > 0 {
		for iNdEx := len(m.Tables) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tables[iNdEx])
			copy(dAtA[i:], m.Tables[iNdEx])
			i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Tables[iNdEx])))
			i--
			dAtA[i] = 0x2a
		}
	}
	if m.KeyRange != nil {
		size, err := m.KeyRange.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x22
	}
	if m.TabletType != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.TabletType))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Shard) > 0 {
		i -= len(m.Shard)
		copy(dAtA[i:], m.Shard)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Shard)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Keyspace) > 0 {
		i -= len(m.Keyspace)
		copy(dAtA[i:], m.Keyspace)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Keyspace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RowChange) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RowChange) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RowChange) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.After != nil {
		size, err := m.After.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x12
	}
	if m.Before != nil {
		size, err := m.Before.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RowEvent) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RowEvent) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *RowEvent) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.RowChanges) > 0 {
		for iNdEx := len(m.RowChanges) - 1; iNdEx >= 0; iNdEx-- {
			size, err := m.RowChanges[iNdEx].MarshalToSizedBufferVT(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.TableName) > 0 {
		i -= len(m.TableName)
		copy(dAtA[i:], m.TableName)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.TableName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *FieldEvent) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *FieldEvent) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *FieldEvent) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.Fields) > 0 {
		for iNdEx := len(m.Fields) - 1; iNdEx >= 0; iNdEx-- {
			size, err := m.Fields[iNdEx].MarshalToSizedBufferVT(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.TableName) > 0 {
		i -= len(m.TableName)
		copy(dAtA[i:], m.TableName)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.TableName)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *ShardGtid) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ShardGtid) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *ShardGtid) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.Gtid) > 0 {
		i -= len(m.Gtid)
		copy(dAtA[i:], m.Gtid)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Gtid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Shard) > 0 {
		i -= len(m.Shard)
		copy(dAtA[i:], m.Shard)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Shard)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Keyspace) > 0 {
		i -= len(m.Keyspace)
		copy(dAtA[i:], m.Keyspace)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Keyspace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VGtid) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VGtid) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *VGtid) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.ShardGtids) > 0 {
		for iNdEx := len(m.ShardGtids) - 1; iNdEx >= 0; iNdEx-- {
			size, err := m.ShardGtids[iNdEx].MarshalToSizedBufferVT(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *KeyspaceShard) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *KeyspaceShard) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *KeyspaceShard) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.Shard) > 0 {
		i -= len(m.Shard)
		copy(dAtA[i:], m.Shard)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Shard)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Keyspace) > 0 {
		i -= len(m.Keyspace)
		copy(dAtA[i:], m.Keyspace)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Keyspace)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Journal) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Journal) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *Journal) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.SourceWorkflows) > 0 {
		for iNdEx := len(m.SourceWorkflows) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.SourceWorkflows[iNdEx])
			copy(dAtA[i:], m.SourceWorkflows[iNdEx])
			i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.SourceWorkflows[iNdEx])))
			i--
			dAtA[i] = 0x3a
		}
	}
	if len(m.Participants) > 0 {
		for iNdEx := len(m.Participants) - 1; iNdEx >= 0; iNdEx-- {
			size, err := m.Participants[iNdEx].MarshalToSizedBufferVT(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x32
		}
	}
	if len(m.ShardGtids) > 0 {
		for iNdEx := len(m.ShardGtids) - 1; iNdEx >= 0; iNdEx-- {
			size, err := m.ShardGtids[iNdEx].MarshalToSizedBufferVT(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x2a
		}
	}
	if len(m.LocalPosition) > 0 {
		i -= len(m.LocalPosition)
		copy(dAtA[i:], m.LocalPosition)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.LocalPosition)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Tables) > 0 {
		for iNdEx := len(m.Tables) - 1; iNdEx >= 0; iNdEx-- {
			i -= len(m.Tables[iNdEx])
			copy(dAtA[i:], m.Tables[iNdEx])
			i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Tables[iNdEx])))
			i--
			dAtA[i] = 0x1a
		}
	}
	if m.MigrationType != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.MigrationType))
		i--
		dAtA[i] = 0x10
	}
	if m.Id != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.Id))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VEvent) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VEvent) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *VEvent) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.CurrentTime != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.CurrentTime))
		i--
		dAtA[i] = 0x1
		i--
		dAtA[i] = 0xa0
	}
	if len(m.Dml) > 0 {
		i -= len(m.Dml)
		copy(dAtA[i:], m.Dml)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Dml)))
		i--
		dAtA[i] = 0x4a
	}
	if m.Journal != nil {
		size, err := m.Journal.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x42
	}
	if m.Vgtid != nil {
		size, err := m.Vgtid.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x3a
	}
	if m.FieldEvent != nil {
		size, err := m.FieldEvent.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x32
	}
	if m.RowEvent != nil {
		size, err := m.RowEvent.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Ddl) > 0 {
		i -= len(m.Ddl)
		copy(dAtA[i:], m.Ddl)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Ddl)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Gtid) > 0 {
		i -= len(m.Gtid)
		copy(dAtA[i:], m.Gtid)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Gtid)))
		i--
		dAtA[i] = 0x1a
	}
	if m.Timestamp != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.Timestamp))
		i--
		dAtA[i] = 0x10
	}
	if m.Type != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.Type))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *VStreamRequest) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VStreamRequest) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *VStreamRequest) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.Filter != nil {
		size, err := m.Filter.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Position) > 0 {
		i -= len(m.Position)
		copy(dAtA[i:], m.Position)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Position)))
		i--
		dAtA[i] = 0x22
	}
	if m.Target != nil {
		size, err := m.Target.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1a
	}
	if m.ImmediateCallerId != nil {
		size, err := m.ImmediateCallerId.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x12
	}
	if m.EffectiveCallerId != nil {
		size, err := m.EffectiveCallerId.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VStreamResponse) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VStreamResponse) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *VStreamResponse) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.Events) > 0 {
		for iNdEx := len(m.Events) - 1; iNdEx >= 0; iNdEx-- {
			size, err := m.Events[iNdEx].MarshalToSizedBufferVT(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *VStreamRowsRequest) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VStreamRowsRequest) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *VStreamRowsRequest) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.Lastpk != nil {
		size, err := m.Lastpk.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Query) > 0 {
		i -= len(m.Query)
		copy(dAtA[i:], m.Query)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Query)))
		i--
		dAtA[i] = 0x22
	}
	if m.Target != nil {
		size, err := m.Target.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1a
	}
	if m.ImmediateCallerId != nil {
		size, err := m.ImmediateCallerId.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x12
	}
	if m.EffectiveCallerId != nil {
		size, err := m.EffectiveCallerId.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VStreamRowsResponse) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VStreamRowsResponse) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *VStreamRowsResponse) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.Lastpk != nil {
		size, err := m.Lastpk.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Rows) > 0 {
		for iNdEx := len(m.Rows) - 1; iNdEx >= 0; iNdEx-- {
			size, err := m.Rows[iNdEx].MarshalToSizedBufferVT(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Gtid) > 0 {
		i -= len(m.Gtid)
		copy(dAtA[i:], m.Gtid)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Gtid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Pkfields) > 0 {
		for iNdEx := len(m.Pkfields) - 1; iNdEx >= 0; iNdEx-- {
			size, err := m.Pkfields[iNdEx].MarshalToSizedBufferVT(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x12
		}
	}
	if len(m.Fields) > 0 {
		for iNdEx := len(m.Fields) - 1; iNdEx >= 0; iNdEx-- {
			size, err := m.Fields[iNdEx].MarshalToSizedBufferVT(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *VStreamResultsRequest) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VStreamResultsRequest) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *VStreamResultsRequest) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.Query) > 0 {
		i -= len(m.Query)
		copy(dAtA[i:], m.Query)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Query)))
		i--
		dAtA[i] = 0x22
	}
	if m.Target != nil {
		size, err := m.Target.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x1a
	}
	if m.ImmediateCallerId != nil {
		size, err := m.ImmediateCallerId.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0x12
	}
	if m.EffectiveCallerId != nil {
		size, err := m.EffectiveCallerId.MarshalToSizedBufferVT(dAtA[:i])
		if err != nil {
			return 0, err
		}
		i -= size
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *VStreamResultsResponse) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *VStreamResultsResponse) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *VStreamResultsResponse) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if len(m.Rows) > 0 {
		for iNdEx := len(m.Rows) - 1; iNdEx >= 0; iNdEx-- {
			size, err := m.Rows[iNdEx].MarshalToSizedBufferVT(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0x22
		}
	}
	if len(m.Gtid) > 0 {
		i -= len(m.Gtid)
		copy(dAtA[i:], m.Gtid)
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(len(m.Gtid)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Fields) > 0 {
		for iNdEx := len(m.Fields) - 1; iNdEx >= 0; iNdEx-- {
			size, err := m.Fields[iNdEx].MarshalToSizedBufferVT(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(size))
			i--
			dAtA[i] = 0xa
		}
	}
	return len(dAtA) - i, nil
}

func (m *Charset) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Client != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.Client))
	}
	if m.Conn != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.Conn))
	}
	if m.Server != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.Server))
	}
	n += len(m.unknownFields)
	return n
}

func (m *BinlogTransaction_Statement) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Category != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.Category))
	}
	if m.Charset != nil {
		l = m.Charset.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	l = len(m.Sql)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *BinlogTransaction) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Statements) > 0 {
		for _, e := range m.Statements {
			l = e.SizeVT()
			n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
		}
	}
	if m.EventToken != nil {
		l = m.EventToken.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *StreamKeyRangeRequest) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Position)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.KeyRange != nil {
		l = m.KeyRange.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.Charset != nil {
		l = m.Charset.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *StreamKeyRangeResponse) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BinlogTransaction != nil {
		l = m.BinlogTransaction.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *StreamTablesRequest) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Position)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if len(m.Tables) > 0 {
		for _, s := range m.Tables {
			l = len(s)
			n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
		}
	}
	if m.Charset != nil {
		l = m.Charset.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *StreamTablesResponse) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BinlogTransaction != nil {
		l = m.BinlogTransaction.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *Rule) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Match)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	l = len(m.Filter)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *Filter) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Rules) > 0 {
		for _, e := range m.Rules {
			l = e.SizeVT()
			n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
		}
	}
	if m.FieldEventMode != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.FieldEventMode))
	}
	n += len(m.unknownFields)
	return n
}

func (m *BinlogSource) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Keyspace)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	l = len(m.Shard)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.TabletType != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.TabletType))
	}
	if m.KeyRange != nil {
		l = m.KeyRange.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if len(m.Tables) > 0 {
		for _, s := range m.Tables {
			l = len(s)
			n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
		}
	}
	if m.Filter != nil {
		l = m.Filter.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.OnDdl != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.OnDdl))
	}
	l = len(m.ExternalMysql)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *RowChange) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Before != nil {
		l = m.Before.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.After != nil {
		l = m.After.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *RowEvent) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TableName)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if len(m.RowChanges) > 0 {
		for _, e := range m.RowChanges {
			l = e.SizeVT()
			n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
		}
	}
	n += len(m.unknownFields)
	return n
}

func (m *FieldEvent) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.TableName)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if len(m.Fields) > 0 {
		for _, e := range m.Fields {
			l = e.SizeVT()
			n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
		}
	}
	n += len(m.unknownFields)
	return n
}

func (m *ShardGtid) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Keyspace)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	l = len(m.Shard)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	l = len(m.Gtid)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *VGtid) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.ShardGtids) > 0 {
		for _, e := range m.ShardGtids {
			l = e.SizeVT()
			n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
		}
	}
	n += len(m.unknownFields)
	return n
}

func (m *KeyspaceShard) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Keyspace)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	l = len(m.Shard)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *Journal) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Id != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.Id))
	}
	if m.MigrationType != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.MigrationType))
	}
	if len(m.Tables) > 0 {
		for _, s := range m.Tables {
			l = len(s)
			n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
		}
	}
	l = len(m.LocalPosition)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if len(m.ShardGtids) > 0 {
		for _, e := range m.ShardGtids {
			l = e.SizeVT()
			n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
		}
	}
	if len(m.Participants) > 0 {
		for _, e := range m.Participants {
			l = e.SizeVT()
			n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
		}
	}
	if len(m.SourceWorkflows) > 0 {
		for _, s := range m.SourceWorkflows {
			l = len(s)
			n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
		}
	}
	n += len(m.unknownFields)
	return n
}

func (m *VEvent) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Type != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.Type))
	}
	if m.Timestamp != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.Timestamp))
	}
	l = len(m.Gtid)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	l = len(m.Ddl)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.RowEvent != nil {
		l = m.RowEvent.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.FieldEvent != nil {
		l = m.FieldEvent.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.Vgtid != nil {
		l = m.Vgtid.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.Journal != nil {
		l = m.Journal.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	l = len(m.Dml)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.CurrentTime != 0 {
		n += 2 + protobuf_go_lite.SizeOfVarint(uint64(m.CurrentTime))
	}
	n += len(m.unknownFields)
	return n
}

func (m *VStreamRequest) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EffectiveCallerId != nil {
		l = m.EffectiveCallerId.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.ImmediateCallerId != nil {
		l = m.ImmediateCallerId.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.Target != nil {
		l = m.Target.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	l = len(m.Position)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.Filter != nil {
		l = m.Filter.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *VStreamResponse) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Events) > 0 {
		for _, e := range m.Events {
			l = e.SizeVT()
			n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
		}
	}
	n += len(m.unknownFields)
	return n
}

func (m *VStreamRowsRequest) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EffectiveCallerId != nil {
		l = m.EffectiveCallerId.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.ImmediateCallerId != nil {
		l = m.ImmediateCallerId.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.Target != nil {
		l = m.Target.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.Lastpk != nil {
		l = m.Lastpk.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *VStreamRowsResponse) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, e := range m.Fields {
			l = e.SizeVT()
			n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
		}
	}
	if len(m.Pkfields) > 0 {
		for _, e := range m.Pkfields {
			l = e.SizeVT()
			n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
		}
	}
	l = len(m.Gtid)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if len(m.Rows) > 0 {
		for _, e := range m.Rows {
			l = e.SizeVT()
			n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
		}
	}
	if m.Lastpk != nil {
		l = m.Lastpk.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *VStreamResultsRequest) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.EffectiveCallerId != nil {
		l = m.EffectiveCallerId.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.ImmediateCallerId != nil {
		l = m.ImmediateCallerId.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if m.Target != nil {
		l = m.Target.SizeVT()
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	l = len(m.Query)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	n += len(m.unknownFields)
	return n
}

func (m *VStreamResultsResponse) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if len(m.Fields) > 0 {
		for _, e := range m.Fields {
			l = e.SizeVT()
			n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
		}
	}
	l = len(m.Gtid)
	if l > 0 {
		n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
	}
	if len(m.Rows) > 0 {
		for _, e := range m.Rows {
			l = e.SizeVT()
			n += 1 + l + protobuf_go_lite.SizeOfVarint(uint64(l))
		}
	}
	n += len(m.unknownFields)
	return n
}

func (x OnDDLAction) MarshalProtoText() string {
	return x.String()
}
func (x VEventType) MarshalProtoText() string {
	return x.String()
}
func (x MigrationType) MarshalProtoText() string {
	return x.String()
}
func (x *Charset) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("Charset { ")
	if x.Client != 0 {
		sb.WriteString(" client: ")
		sb.WriteString(strconv.FormatInt(int64(x.Client), 10))
	}
	if x.Conn != 0 {
		sb.WriteString(" conn: ")
		sb.WriteString(strconv.FormatInt(int64(x.Conn), 10))
	}
	if x.Server != 0 {
		sb.WriteString(" server: ")
		sb.WriteString(strconv.FormatInt(int64(x.Server), 10))
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *Charset) String() string {
	return x.MarshalProtoText()
}
func (x BinlogTransaction_Statement_Category) MarshalProtoText() string {
	return x.String()
}
func (x *BinlogTransaction_Statement) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("Statement { ")
	if x.Category != 0 {
		sb.WriteString(" category: ")
		sb.WriteString(BinlogTransaction_Statement_Category(x.Category).String())
	}
	if x.Charset != nil {
		sb.WriteString(" charset: ")
		sb.WriteString(x.Charset.MarshalProtoText())
	}
	if len(x.Sql) > 0 {
		sb.WriteString(" sql: ")
		sb.WriteString("\"")
		sb.WriteString(base64.StdEncoding.EncodeToString(x.Sql))
		sb.WriteString("\"")
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *BinlogTransaction_Statement) String() string {
	return x.MarshalProtoText()
}
func (x *BinlogTransaction) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("BinlogTransaction { ")
	if len(x.Statements) > 0 {
		sb.WriteString(" statements: [")
		for i, v := range x.Statements {
			if i > 0 {
				sb.WriteString(", ")
			}
			sb.WriteString(v.MarshalProtoText())
		}
		sb.WriteString("]")
	}
	if x.EventToken != nil {
		sb.WriteString(" event_token: ")
		sb.WriteString(x.EventToken.MarshalProtoText())
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *BinlogTransaction) String() string {
	return x.MarshalProtoText()
}
func (x *StreamKeyRangeRequest) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("StreamKeyRangeRequest { ")
	if x.Position != "" {
		sb.WriteString(" position: ")
		sb.WriteString(strconv.Quote(x.Position))
	}
	if x.KeyRange != nil {
		sb.WriteString(" key_range: ")
		sb.WriteString(x.KeyRange.MarshalProtoText())
	}
	if x.Charset != nil {
		sb.WriteString(" charset: ")
		sb.WriteString(x.Charset.MarshalProtoText())
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *StreamKeyRangeRequest) String() string {
	return x.MarshalProtoText()
}
func (x *StreamKeyRangeResponse) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("StreamKeyRangeResponse { ")
	if x.BinlogTransaction != nil {
		sb.WriteString(" binlog_transaction: ")
		sb.WriteString(x.BinlogTransaction.MarshalProtoText())
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *StreamKeyRangeResponse) String() string {
	return x.MarshalProtoText()
}
func (x *StreamTablesRequest) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("StreamTablesRequest { ")
	if x.Position != "" {
		sb.WriteString(" position: ")
		sb.WriteString(strconv.Quote(x.Position))
	}
	if len(x.Tables) > 0 {
		sb.WriteString(" tables: [")
		for i, v := range x.Tables {
			if i > 0 {
				sb.WriteString(", ")
			}
			sb.WriteString(strconv.Quote(v))
		}
		sb.WriteString("]")
	}
	if x.Charset != nil {
		sb.WriteString(" charset: ")
		sb.WriteString(x.Charset.MarshalProtoText())
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *StreamTablesRequest) String() string {
	return x.MarshalProtoText()
}
func (x *StreamTablesResponse) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("StreamTablesResponse { ")
	if x.BinlogTransaction != nil {
		sb.WriteString(" binlog_transaction: ")
		sb.WriteString(x.BinlogTransaction.MarshalProtoText())
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *StreamTablesResponse) String() string {
	return x.MarshalProtoText()
}
func (x *Rule) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("Rule { ")
	if x.Match != "" {
		sb.WriteString(" match: ")
		sb.WriteString(strconv.Quote(x.Match))
	}
	if x.Filter != "" {
		sb.WriteString(" filter: ")
		sb.WriteString(strconv.Quote(x.Filter))
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *Rule) String() string {
	return x.MarshalProtoText()
}
func (x Filter_FieldEventMode) MarshalProtoText() string {
	return x.String()
}
func (x *Filter) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("Filter { ")
	if len(x.Rules) > 0 {
		sb.WriteString(" rules: [")
		for i, v := range x.Rules {
			if i > 0 {
				sb.WriteString(", ")
			}
			sb.WriteString(v.MarshalProtoText())
		}
		sb.WriteString("]")
	}
	if x.FieldEventMode != 0 {
		sb.WriteString(" fieldEventMode: ")
		sb.WriteString(Filter_FieldEventMode(x.FieldEventMode).String())
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *Filter) String() string {
	return x.MarshalProtoText()
}
func (x *BinlogSource) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("BinlogSource { ")
	if x.Keyspace != "" {
		sb.WriteString(" keyspace: ")
		sb.WriteString(strconv.Quote(x.Keyspace))
	}
	if x.Shard != "" {
		sb.WriteString(" shard: ")
		sb.WriteString(strconv.Quote(x.Shard))
	}
	if x.TabletType != 0 {
		sb.WriteString(" tablet_type: ")
		sb.WriteString(topodata.TabletType(x.TabletType).String())
	}
	if x.KeyRange != nil {
		sb.WriteString(" key_range: ")
		sb.WriteString(x.KeyRange.MarshalProtoText())
	}
	if len(x.Tables) > 0 {
		sb.WriteString(" tables: [")
		for i, v := range x.Tables {
			if i > 0 {
				sb.WriteString(", ")
			}
			sb.WriteString(strconv.Quote(v))
		}
		sb.WriteString("]")
	}
	if x.Filter != nil {
		sb.WriteString(" filter: ")
		sb.WriteString(x.Filter.MarshalProtoText())
	}
	if x.OnDdl != 0 {
		sb.WriteString(" on_ddl: ")
		sb.WriteString(OnDDLAction(x.OnDdl).String())
	}
	if x.ExternalMysql != "" {
		sb.WriteString(" external_mysql: ")
		sb.WriteString(strconv.Quote(x.ExternalMysql))
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *BinlogSource) String() string {
	return x.MarshalProtoText()
}
func (x *RowChange) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("RowChange { ")
	if x.Before != nil {
		sb.WriteString(" before: ")
		sb.WriteString(x.Before.MarshalProtoText())
	}
	if x.After != nil {
		sb.WriteString(" after: ")
		sb.WriteString(x.After.MarshalProtoText())
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *RowChange) String() string {
	return x.MarshalProtoText()
}
func (x *RowEvent) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("RowEvent { ")
	if x.TableName != "" {
		sb.WriteString(" table_name: ")
		sb.WriteString(strconv.Quote(x.TableName))
	}
	if len(x.RowChanges) > 0 {
		sb.WriteString(" row_changes: [")
		for i, v := range x.RowChanges {
			if i > 0 {
				sb.WriteString(", ")
			}
			sb.WriteString(v.MarshalProtoText())
		}
		sb.WriteString("]")
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *RowEvent) String() string {
	return x.MarshalProtoText()
}
func (x *FieldEvent) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("FieldEvent { ")
	if x.TableName != "" {
		sb.WriteString(" table_name: ")
		sb.WriteString(strconv.Quote(x.TableName))
	}
	if len(x.Fields) > 0 {
		sb.WriteString(" fields: [")
		for i, v := range x.Fields {
			if i > 0 {
				sb.WriteString(", ")
			}
			sb.WriteString(v.MarshalProtoText())
		}
		sb.WriteString("]")
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *FieldEvent) String() string {
	return x.MarshalProtoText()
}
func (x *ShardGtid) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("ShardGtid { ")
	if x.Keyspace != "" {
		sb.WriteString(" keyspace: ")
		sb.WriteString(strconv.Quote(x.Keyspace))
	}
	if x.Shard != "" {
		sb.WriteString(" shard: ")
		sb.WriteString(strconv.Quote(x.Shard))
	}
	if x.Gtid != "" {
		sb.WriteString(" gtid: ")
		sb.WriteString(strconv.Quote(x.Gtid))
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *ShardGtid) String() string {
	return x.MarshalProtoText()
}
func (x *VGtid) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("VGtid { ")
	if len(x.ShardGtids) > 0 {
		sb.WriteString(" shard_gtids: [")
		for i, v := range x.ShardGtids {
			if i > 0 {
				sb.WriteString(", ")
			}
			sb.WriteString(v.MarshalProtoText())
		}
		sb.WriteString("]")
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *VGtid) String() string {
	return x.MarshalProtoText()
}
func (x *KeyspaceShard) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("KeyspaceShard { ")
	if x.Keyspace != "" {
		sb.WriteString(" keyspace: ")
		sb.WriteString(strconv.Quote(x.Keyspace))
	}
	if x.Shard != "" {
		sb.WriteString(" shard: ")
		sb.WriteString(strconv.Quote(x.Shard))
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *KeyspaceShard) String() string {
	return x.MarshalProtoText()
}
func (x *Journal) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("Journal { ")
	if x.Id != 0 {
		sb.WriteString(" id: ")
		sb.WriteString(strconv.FormatInt(int64(x.Id), 10))
	}
	if x.MigrationType != 0 {
		sb.WriteString(" migration_type: ")
		sb.WriteString(MigrationType(x.MigrationType).String())
	}
	if len(x.Tables) > 0 {
		sb.WriteString(" tables: [")
		for i, v := range x.Tables {
			if i > 0 {
				sb.WriteString(", ")
			}
			sb.WriteString(strconv.Quote(v))
		}
		sb.WriteString("]")
	}
	if x.LocalPosition != "" {
		sb.WriteString(" local_position: ")
		sb.WriteString(strconv.Quote(x.LocalPosition))
	}
	if len(x.ShardGtids) > 0 {
		sb.WriteString(" shard_gtids: [")
		for i, v := range x.ShardGtids {
			if i > 0 {
				sb.WriteString(", ")
			}
			sb.WriteString(v.MarshalProtoText())
		}
		sb.WriteString("]")
	}
	if len(x.Participants) > 0 {
		sb.WriteString(" participants: [")
		for i, v := range x.Participants {
			if i > 0 {
				sb.WriteString(", ")
			}
			sb.WriteString(v.MarshalProtoText())
		}
		sb.WriteString("]")
	}
	if len(x.SourceWorkflows) > 0 {
		sb.WriteString(" source_workflows: [")
		for i, v := range x.SourceWorkflows {
			if i > 0 {
				sb.WriteString(", ")
			}
			sb.WriteString(strconv.Quote(v))
		}
		sb.WriteString("]")
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *Journal) String() string {
	return x.MarshalProtoText()
}
func (x *VEvent) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("VEvent { ")
	if x.Type != 0 {
		sb.WriteString(" type: ")
		sb.WriteString(VEventType(x.Type).String())
	}
	if x.Timestamp != 0 {
		sb.WriteString(" timestamp: ")
		sb.WriteString(strconv.FormatInt(int64(x.Timestamp), 10))
	}
	if x.Gtid != "" {
		sb.WriteString(" gtid: ")
		sb.WriteString(strconv.Quote(x.Gtid))
	}
	if x.Ddl != "" {
		sb.WriteString(" ddl: ")
		sb.WriteString(strconv.Quote(x.Ddl))
	}
	if x.RowEvent != nil {
		sb.WriteString(" row_event: ")
		sb.WriteString(x.RowEvent.MarshalProtoText())
	}
	if x.FieldEvent != nil {
		sb.WriteString(" field_event: ")
		sb.WriteString(x.FieldEvent.MarshalProtoText())
	}
	if x.Vgtid != nil {
		sb.WriteString(" vgtid: ")
		sb.WriteString(x.Vgtid.MarshalProtoText())
	}
	if x.Journal != nil {
		sb.WriteString(" journal: ")
		sb.WriteString(x.Journal.MarshalProtoText())
	}
	if x.Dml != "" {
		sb.WriteString(" dml: ")
		sb.WriteString(strconv.Quote(x.Dml))
	}
	if x.CurrentTime != 0 {
		sb.WriteString(" current_time: ")
		sb.WriteString(strconv.FormatInt(int64(x.CurrentTime), 10))
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *VEvent) String() string {
	return x.MarshalProtoText()
}
func (x *VStreamRequest) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("VStreamRequest { ")
	if x.EffectiveCallerId != nil {
		sb.WriteString(" effective_caller_id: ")
		sb.WriteString(x.EffectiveCallerId.MarshalProtoText())
	}
	if x.ImmediateCallerId != nil {
		sb.WriteString(" immediate_caller_id: ")
		sb.WriteString(x.ImmediateCallerId.MarshalProtoText())
	}
	if x.Target != nil {
		sb.WriteString(" target: ")
		sb.WriteString(x.Target.MarshalProtoText())
	}
	if x.Position != "" {
		sb.WriteString(" position: ")
		sb.WriteString(strconv.Quote(x.Position))
	}
	if x.Filter != nil {
		sb.WriteString(" filter: ")
		sb.WriteString(x.Filter.MarshalProtoText())
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *VStreamRequest) String() string {
	return x.MarshalProtoText()
}
func (x *VStreamResponse) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("VStreamResponse { ")
	if len(x.Events) > 0 {
		sb.WriteString(" events: [")
		for i, v := range x.Events {
			if i > 0 {
				sb.WriteString(", ")
			}
			sb.WriteString(v.MarshalProtoText())
		}
		sb.WriteString("]")
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *VStreamResponse) String() string {
	return x.MarshalProtoText()
}
func (x *VStreamRowsRequest) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("VStreamRowsRequest { ")
	if x.EffectiveCallerId != nil {
		sb.WriteString(" effective_caller_id: ")
		sb.WriteString(x.EffectiveCallerId.MarshalProtoText())
	}
	if x.ImmediateCallerId != nil {
		sb.WriteString(" immediate_caller_id: ")
		sb.WriteString(x.ImmediateCallerId.MarshalProtoText())
	}
	if x.Target != nil {
		sb.WriteString(" target: ")
		sb.WriteString(x.Target.MarshalProtoText())
	}
	if x.Query != "" {
		sb.WriteString(" query: ")
		sb.WriteString(strconv.Quote(x.Query))
	}
	if x.Lastpk != nil {
		sb.WriteString(" lastpk: ")
		sb.WriteString(x.Lastpk.MarshalProtoText())
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *VStreamRowsRequest) String() string {
	return x.MarshalProtoText()
}
func (x *VStreamRowsResponse) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("VStreamRowsResponse { ")
	if len(x.Fields) > 0 {
		sb.WriteString(" fields: [")
		for i, v := range x.Fields {
			if i > 0 {
				sb.WriteString(", ")
			}
			sb.WriteString(v.MarshalProtoText())
		}
		sb.WriteString("]")
	}
	if len(x.Pkfields) > 0 {
		sb.WriteString(" pkfields: [")
		for i, v := range x.Pkfields {
			if i > 0 {
				sb.WriteString(", ")
			}
			sb.WriteString(v.MarshalProtoText())
		}
		sb.WriteString("]")
	}
	if x.Gtid != "" {
		sb.WriteString(" gtid: ")
		sb.WriteString(strconv.Quote(x.Gtid))
	}
	if len(x.Rows) > 0 {
		sb.WriteString(" rows: [")
		for i, v := range x.Rows {
			if i > 0 {
				sb.WriteString(", ")
			}
			sb.WriteString(v.MarshalProtoText())
		}
		sb.WriteString("]")
	}
	if x.Lastpk != nil {
		sb.WriteString(" lastpk: ")
		sb.WriteString(x.Lastpk.MarshalProtoText())
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *VStreamRowsResponse) String() string {
	return x.MarshalProtoText()
}
func (x *VStreamResultsRequest) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("VStreamResultsRequest { ")
	if x.EffectiveCallerId != nil {
		sb.WriteString(" effective_caller_id: ")
		sb.WriteString(x.EffectiveCallerId.MarshalProtoText())
	}
	if x.ImmediateCallerId != nil {
		sb.WriteString(" immediate_caller_id: ")
		sb.WriteString(x.ImmediateCallerId.MarshalProtoText())
	}
	if x.Target != nil {
		sb.WriteString(" target: ")
		sb.WriteString(x.Target.MarshalProtoText())
	}
	if x.Query != "" {
		sb.WriteString(" query: ")
		sb.WriteString(strconv.Quote(x.Query))
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *VStreamResultsRequest) String() string {
	return x.MarshalProtoText()
}
func (x *VStreamResultsResponse) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("VStreamResultsResponse { ")
	if len(x.Fields) > 0 {
		sb.WriteString(" fields: [")
		for i, v := range x.Fields {
			if i > 0 {
				sb.WriteString(", ")
			}
			sb.WriteString(v.MarshalProtoText())
		}
		sb.WriteString("]")
	}
	if x.Gtid != "" {
		sb.WriteString(" gtid: ")
		sb.WriteString(strconv.Quote(x.Gtid))
	}
	if len(x.Rows) > 0 {
		sb.WriteString(" rows: [")
		for i, v := range x.Rows {
			if i > 0 {
				sb.WriteString(", ")
			}
			sb.WriteString(v.MarshalProtoText())
		}
		sb.WriteString("]")
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *VStreamResultsResponse) String() string {
	return x.MarshalProtoText()
}
func (m *Charset) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Charset: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Charset: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Client", wireType)
			}
			m.Client = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Client |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Conn", wireType)
			}
			m.Conn = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Conn |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Server", wireType)
			}
			m.Server = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Server |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BinlogTransaction_Statement) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BinlogTransaction_Statement: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BinlogTransaction_Statement: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			m.Category = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Category |= BinlogTransaction_Statement_Category(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Charset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Charset == nil {
				m.Charset = &Charset{}
			}
			if err := m.Charset.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sql", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sql = append(m.Sql[:0], dAtA[iNdEx:postIndex]...)
			if m.Sql == nil {
				m.Sql = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BinlogTransaction) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BinlogTransaction: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BinlogTransaction: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Statements", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Statements = append(m.Statements, &BinlogTransaction_Statement{})
			if err := m.Statements[len(m.Statements)-1].UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EventToken", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EventToken == nil {
				m.EventToken = &query.EventToken{}
			}
			if err := m.EventToken.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamKeyRangeRequest) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamKeyRangeRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamKeyRangeRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Position = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyRange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyRange == nil {
				m.KeyRange = &topodata.KeyRange{}
			}
			if err := m.KeyRange.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Charset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Charset == nil {
				m.Charset = &Charset{}
			}
			if err := m.Charset.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamKeyRangeResponse) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamKeyRangeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamKeyRangeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BinlogTransaction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BinlogTransaction == nil {
				m.BinlogTransaction = &BinlogTransaction{}
			}
			if err := m.BinlogTransaction.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamTablesRequest) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamTablesRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamTablesRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Position = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tables", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tables = append(m.Tables, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Charset", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Charset == nil {
				m.Charset = &Charset{}
			}
			if err := m.Charset.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *StreamTablesResponse) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: StreamTablesResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: StreamTablesResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field BinlogTransaction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.BinlogTransaction == nil {
				m.BinlogTransaction = &BinlogTransaction{}
			}
			if err := m.BinlogTransaction.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Rule) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Rule: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Rule: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Match", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Match = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Filter = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Filter) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Filter: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Filter: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rules", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rules = append(m.Rules, &Rule{})
			if err := m.Rules[len(m.Rules)-1].UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldEventMode", wireType)
			}
			m.FieldEventMode = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FieldEventMode |= Filter_FieldEventMode(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BinlogSource) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BinlogSource: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BinlogSource: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyspace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keyspace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shard", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shard = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field TabletType", wireType)
			}
			m.TabletType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.TabletType |= topodata.TabletType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyRange", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.KeyRange == nil {
				m.KeyRange = &topodata.KeyRange{}
			}
			if err := m.KeyRange.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tables", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tables = append(m.Tables, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = &Filter{}
			}
			if err := m.Filter.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnDdl", wireType)
			}
			m.OnDdl = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.OnDdl |= OnDDLAction(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExternalMysql", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExternalMysql = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RowChange) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RowChange: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RowChange: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Before", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Before == nil {
				m.Before = &query.Row{}
			}
			if err := m.Before.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field After", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.After == nil {
				m.After = &query.Row{}
			}
			if err := m.After.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RowEvent) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RowEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RowEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TableName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowChanges", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RowChanges = append(m.RowChanges, &RowChange{})
			if err := m.RowChanges[len(m.RowChanges)-1].UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *FieldEvent) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: FieldEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: FieldEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TableName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TableName = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, &query.Field{})
			if err := m.Fields[len(m.Fields)-1].UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ShardGtid) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ShardGtid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ShardGtid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyspace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keyspace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shard", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shard = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gtid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gtid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VGtid) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VGtid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VGtid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardGtids", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShardGtids = append(m.ShardGtids, &ShardGtid{})
			if err := m.ShardGtids[len(m.ShardGtids)-1].UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *KeyspaceShard) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: KeyspaceShard: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: KeyspaceShard: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keyspace", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keyspace = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Shard", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Shard = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Journal) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Journal: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Journal: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			m.Id = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Id |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MigrationType", wireType)
			}
			m.MigrationType = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MigrationType |= MigrationType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tables", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Tables = append(m.Tables, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LocalPosition", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LocalPosition = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ShardGtids", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ShardGtids = append(m.ShardGtids, &ShardGtid{})
			if err := m.ShardGtids[len(m.ShardGtids)-1].UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participants", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Participants = append(m.Participants, &KeyspaceShard{})
			if err := m.Participants[len(m.Participants)-1].UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SourceWorkflows", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SourceWorkflows = append(m.SourceWorkflows, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VEvent) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VEvent: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VEvent: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Type", wireType)
			}
			m.Type = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Type |= VEventType(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timestamp", wireType)
			}
			m.Timestamp = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Timestamp |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gtid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gtid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Ddl", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Ddl = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RowEvent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.RowEvent == nil {
				m.RowEvent = &RowEvent{}
			}
			if err := m.RowEvent.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FieldEvent", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.FieldEvent == nil {
				m.FieldEvent = &FieldEvent{}
			}
			if err := m.FieldEvent.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Vgtid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Vgtid == nil {
				m.Vgtid = &VGtid{}
			}
			if err := m.Vgtid.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Journal", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Journal == nil {
				m.Journal = &Journal{}
			}
			if err := m.Journal.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dml", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Dml = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 20:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CurrentTime", wireType)
			}
			m.CurrentTime = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.CurrentTime |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VStreamRequest) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VStreamRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VStreamRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveCallerId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EffectiveCallerId == nil {
				m.EffectiveCallerId = &vtrpc.CallerID{}
			}
			if err := m.EffectiveCallerId.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImmediateCallerId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ImmediateCallerId == nil {
				m.ImmediateCallerId = &query.VTGateCallerID{}
			}
			if err := m.ImmediateCallerId.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Target == nil {
				m.Target = &query.Target{}
			}
			if err := m.Target.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Position", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Position = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Filter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Filter == nil {
				m.Filter = &Filter{}
			}
			if err := m.Filter.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VStreamResponse) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VStreamResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VStreamResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Events", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Events = append(m.Events, &VEvent{})
			if err := m.Events[len(m.Events)-1].UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VStreamRowsRequest) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VStreamRowsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VStreamRowsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveCallerId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EffectiveCallerId == nil {
				m.EffectiveCallerId = &vtrpc.CallerID{}
			}
			if err := m.EffectiveCallerId.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImmediateCallerId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ImmediateCallerId == nil {
				m.ImmediateCallerId = &query.VTGateCallerID{}
			}
			if err := m.ImmediateCallerId.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Target == nil {
				m.Target = &query.Target{}
			}
			if err := m.Target.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lastpk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Lastpk == nil {
				m.Lastpk = &query.QueryResult{}
			}
			if err := m.Lastpk.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VStreamRowsResponse) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VStreamRowsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VStreamRowsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, &query.Field{})
			if err := m.Fields[len(m.Fields)-1].UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Pkfields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Pkfields = append(m.Pkfields, &query.Field{})
			if err := m.Pkfields[len(m.Pkfields)-1].UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gtid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gtid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rows", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rows = append(m.Rows, &query.Row{})
			if err := m.Rows[len(m.Rows)-1].UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Lastpk", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Lastpk == nil {
				m.Lastpk = &query.Row{}
			}
			if err := m.Lastpk.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VStreamResultsRequest) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VStreamResultsRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VStreamResultsRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EffectiveCallerId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.EffectiveCallerId == nil {
				m.EffectiveCallerId = &vtrpc.CallerID{}
			}
			if err := m.EffectiveCallerId.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ImmediateCallerId", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ImmediateCallerId == nil {
				m.ImmediateCallerId = &query.VTGateCallerID{}
			}
			if err := m.ImmediateCallerId.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Target", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Target == nil {
				m.Target = &query.Target{}
			}
			if err := m.Target.UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Query", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Query = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *VStreamResultsResponse) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: VStreamResultsResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: VStreamResultsResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Fields", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Fields = append(m.Fields, &query.Field{})
			if err := m.Fields[len(m.Fields)-1].UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gtid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Gtid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rows", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Rows = append(m.Rows, &query.Row{})
			if err := m.Rows[len(m.Rows)-1].UnmarshalVT(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
