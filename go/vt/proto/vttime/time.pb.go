// Code generated by protoc-gen-go-lite. DO NOT EDIT.
// protoc-gen-go-lite version: v0.6.1
// source: github.com/dolthub/vitess/proto/dolthub/vt/time.proto

package vttime

import (
	fmt "fmt"
	protobuf_go_lite "github.com/aperturerobotics/protobuf-go-lite"
	json "github.com/aperturerobotics/protobuf-go-lite/json"
	io "io"
	strconv "strconv"
	strings "strings"
)

//
//Copyright 2019 The Vitess Authors.
//
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//
//http://www.apache.org/licenses/LICENSE-2.0
//
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// This package contains a shared time data structure

// Time represents a time stamp in nanoseconds. In go, use logutil library
// to convert times.
type Time struct {
	unknownFields []byte
	Seconds       int64 `protobuf:"varint,1,opt,name=seconds,proto3" json:"seconds,omitempty"`
	Nanoseconds   int32 `protobuf:"varint,2,opt,name=nanoseconds,proto3" json:"nanoseconds,omitempty"`
}

func (x *Time) Reset() {
	*x = Time{}
}

func (*Time) ProtoMessage() {}

func (x *Time) GetSeconds() int64 {
	if x != nil {
		return x.Seconds
	}
	return 0
}

func (x *Time) GetNanoseconds() int32 {
	if x != nil {
		return x.Nanoseconds
	}
	return 0
}

func (m *Time) CloneVT() *Time {
	if m == nil {
		return (*Time)(nil)
	}
	r := new(Time)
	r.Seconds = m.Seconds
	r.Nanoseconds = m.Nanoseconds
	if len(m.unknownFields) > 0 {
		r.unknownFields = make([]byte, len(m.unknownFields))
		copy(r.unknownFields, m.unknownFields)
	}
	return r
}

func (m *Time) CloneMessageVT() protobuf_go_lite.CloneMessage {
	return m.CloneVT()
}

func (this *Time) EqualVT(that *Time) bool {
	if this == that {
		return true
	} else if this == nil || that == nil {
		return false
	}
	if this.Seconds != that.Seconds {
		return false
	}
	if this.Nanoseconds != that.Nanoseconds {
		return false
	}
	return string(this.unknownFields) == string(that.unknownFields)
}

func (this *Time) EqualMessageVT(thatMsg any) bool {
	that, ok := thatMsg.(*Time)
	if !ok {
		return false
	}
	return this.EqualVT(that)
}

// MarshalProtoJSON marshals the Time message to JSON.
func (x *Time) MarshalProtoJSON(s *json.MarshalState) {
	if x == nil {
		s.WriteNil()
		return
	}
	s.WriteObjectStart()
	var wroteField bool
	if x.Seconds != 0 || s.HasField("seconds") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("seconds")
		s.WriteInt64(x.Seconds)
	}
	if x.Nanoseconds != 0 || s.HasField("nanoseconds") {
		s.WriteMoreIf(&wroteField)
		s.WriteObjectField("nanoseconds")
		s.WriteInt32(x.Nanoseconds)
	}
	s.WriteObjectEnd()
}

// MarshalJSON marshals the Time to JSON.
func (x *Time) MarshalJSON() ([]byte, error) {
	return json.DefaultMarshalerConfig.Marshal(x)
}

// UnmarshalProtoJSON unmarshals the Time message from JSON.
func (x *Time) UnmarshalProtoJSON(s *json.UnmarshalState) {
	if s.ReadNil() {
		return
	}
	s.ReadObject(func(key string) {
		switch key {
		default:
			s.Skip() // ignore unknown field
		case "seconds":
			s.AddField("seconds")
			x.Seconds = s.ReadInt64()
		case "nanoseconds":
			s.AddField("nanoseconds")
			x.Nanoseconds = s.ReadInt32()
		}
	})
}

// UnmarshalJSON unmarshals the Time from JSON.
func (x *Time) UnmarshalJSON(b []byte) error {
	return json.DefaultUnmarshalerConfig.Unmarshal(b, x)
}

func (m *Time) MarshalVT() (dAtA []byte, err error) {
	if m == nil {
		return nil, nil
	}
	size := m.SizeVT()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBufferVT(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Time) MarshalToVT(dAtA []byte) (int, error) {
	size := m.SizeVT()
	return m.MarshalToSizedBufferVT(dAtA[:size])
}

func (m *Time) MarshalToSizedBufferVT(dAtA []byte) (int, error) {
	if m == nil {
		return 0, nil
	}
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.unknownFields != nil {
		i -= len(m.unknownFields)
		copy(dAtA[i:], m.unknownFields)
	}
	if m.Nanoseconds != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.Nanoseconds))
		i--
		dAtA[i] = 0x10
	}
	if m.Seconds != 0 {
		i = protobuf_go_lite.EncodeVarint(dAtA, i, uint64(m.Seconds))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Time) SizeVT() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Seconds != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.Seconds))
	}
	if m.Nanoseconds != 0 {
		n += 1 + protobuf_go_lite.SizeOfVarint(uint64(m.Nanoseconds))
	}
	n += len(m.unknownFields)
	return n
}

func (x *Time) MarshalProtoText() string {
	var sb strings.Builder
	sb.WriteString("Time { ")
	if x.Seconds != 0 {
		sb.WriteString(" seconds: ")
		sb.WriteString(strconv.FormatInt(int64(x.Seconds), 10))
	}
	if x.Nanoseconds != 0 {
		sb.WriteString(" nanoseconds: ")
		sb.WriteString(strconv.FormatInt(int64(x.Nanoseconds), 10))
	}
	sb.WriteString("}")
	return sb.String()
}
func (x *Time) String() string {
	return x.MarshalProtoText()
}
func (m *Time) UnmarshalVT(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return protobuf_go_lite.ErrIntOverflow
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Time: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Time: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Seconds", wireType)
			}
			m.Seconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Seconds |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Nanoseconds", wireType)
			}
			m.Nanoseconds = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return protobuf_go_lite.ErrIntOverflow
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Nanoseconds |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := protobuf_go_lite.Skip(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return protobuf_go_lite.ErrInvalidLength
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.unknownFields = append(m.unknownFields, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
